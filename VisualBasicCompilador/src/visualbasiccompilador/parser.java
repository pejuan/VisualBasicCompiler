
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package visualbasiccompilador;

import java.util.*;
import java.io.*;
import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import AST.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\152\000\002\002\003\000\002\002\004\000\002\003" +
    "\003\000\002\003\002\000\002\005\004\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\037\002\000" +
    "\002\007\010\000\002\007\010\000\002\040\002\000\002" +
    "\010\013\000\002\041\002\000\002\010\012\000\002\010" +
    "\012\000\002\010\013\000\002\010\011\000\002\042\002" +
    "\000\002\011\015\000\002\043\002\000\002\011\014\000" +
    "\002\011\013\000\002\011\012\000\002\012\005\000\002" +
    "\012\003\000\002\013\006\000\002\014\003\000\002\014" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\004\004\000\002\004\002\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\004\000\002\016\003\000\002\017\006\000\002\017\006" +
    "\000\002\017\006\000\002\020\006\000\002\020\006\000" +
    "\002\021\005\000\002\044\002\000\002\022\007\000\002" +
    "\045\002\000\002\023\011\000\002\023\010\000\002\023" +
    "\011\000\002\046\002\000\002\024\010\000\002\047\002" +
    "\000\002\024\010\000\002\024\007\000\002\024\006\000" +
    "\002\024\006\000\002\025\005\000\002\025\003\000\002" +
    "\026\010\000\002\026\007\000\002\026\006\000\002\026" +
    "\005\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\031\005\000\002\031\005\000\002\031\005\000\002" +
    "\031\005\000\002\031\005\000\002\031\005\000\002\033" +
    "\004\000\002\033\006\000\002\033\005\000\002\033\005" +
    "\000\002\033\005\000\002\033\003\000\002\033\003\000" +
    "\002\030\005\000\002\030\005\000\002\030\005\000\002" +
    "\030\005\000\002\030\005\000\002\030\006\000\002\030" +
    "\006\000\002\030\006\000\002\030\006\000\002\030\006" +
    "\000\002\032\003\000\002\032\003\000\002\034\006\000" +
    "\002\034\005\000\002\034\005\000\002\034\006\000\002" +
    "\035\005\000\002\035\003\000\002\036\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\352\000\012\002\ufffe\026\011\027\004\030\005\001" +
    "\002\000\006\003\323\063\324\001\002\000\004\063\313" +
    "\001\002\000\010\026\011\027\004\030\005\001\002\000" +
    "\010\026\ufffb\027\ufffb\030\ufffb\001\002\000\004\002\001" +
    "\001\002\000\004\063\017\001\002\000\010\026\ufffc\027" +
    "\ufffc\030\ufffc\001\002\000\004\002\016\001\002\000\010" +
    "\026\ufffa\027\ufffa\030\ufffa\001\002\000\004\002\uffff\001" +
    "\002\000\004\002\000\001\002\000\004\050\020\001\002" +
    "\000\010\007\021\010\026\051\023\001\002\000\004\063" +
    "\uffe6\001\002\000\004\063\307\001\002\000\042\003\uffe0" +
    "\011\075\015\055\020\042\024\062\025\073\040\071\053" +
    "\054\054\276\056\050\057\043\060\063\061\053\062\047" +
    "\063\076\064\051\001\002\000\006\003\031\051\032\001" +
    "\002\000\010\003\uffe8\051\uffe8\052\027\001\002\000\004" +
    "\063\uffe5\001\002\000\006\007\021\010\026\001\002\000" +
    "\006\003\uffe9\051\uffe9\001\002\000\004\051\271\001\002" +
    "\000\004\054\033\001\002\000\010\004\035\005\034\006" +
    "\036\001\002\000\050\003\uffe3\011\uffe3\015\uffe3\020\uffe3" +
    "\024\uffe3\025\uffe3\040\uffe3\046\uffe3\051\uffe3\052\uffe3\053" +
    "\uffe3\055\uffe3\056\uffe3\057\uffe3\060\uffe3\061\uffe3\062\uffe3" +
    "\063\uffe3\064\uffe3\001\002\000\050\003\uffe4\011\uffe4\015" +
    "\uffe4\020\uffe4\024\uffe4\025\uffe4\040\uffe4\046\uffe4\051\uffe4" +
    "\052\uffe4\053\uffe4\055\uffe4\056\uffe4\057\uffe4\060\uffe4\061" +
    "\uffe4\062\uffe4\063\uffe4\064\uffe4\001\002\000\050\003\uffe2" +
    "\011\uffe2\015\uffe2\020\uffe2\024\uffe2\025\uffe2\040\uffe2\046" +
    "\uffe2\051\uffe2\052\uffe2\053\uffe2\055\uffe2\056\uffe2\057\uffe2" +
    "\060\uffe2\061\uffe2\062\uffe2\063\uffe2\064\uffe2\001\002\000" +
    "\040\011\uffef\015\uffef\020\uffef\024\uffef\025\uffef\040\uffef" +
    "\053\uffef\055\uffef\056\uffef\057\uffef\060\uffef\061\uffef\062" +
    "\uffef\063\uffef\064\uffef\001\002\000\040\011\075\015\055" +
    "\020\042\024\062\025\073\040\071\053\054\055\uffe0\056" +
    "\050\057\043\060\063\061\053\062\047\063\076\064\051" +
    "\001\002\000\112\003\uffbb\011\uffbb\012\uffbb\015\uffbb\016" +
    "\uffbb\017\uffbb\020\uffbb\023\uffbb\024\uffbb\025\uffbb\031\uffbb" +
    "\032\uffbb\033\uffbb\034\uffbb\035\uffbb\036\uffbb\037\uffbb\040" +
    "\uffbb\041\uffbb\042\uffbb\043\uffbb\044\uffbb\045\uffbb\046\uffbb" +
    "\047\uffbb\051\uffbb\052\uffbb\053\uffbb\055\uffbb\056\uffbb\057" +
    "\uffbb\060\uffbb\061\uffbb\062\uffbb\063\uffbb\064\uffbb\001\002" +
    "\000\044\003\250\011\uffc8\015\uffc8\017\uffc8\020\uffc8\021" +
    "\252\024\uffc8\025\uffc8\040\uffc8\053\uffc8\056\uffc8\057\uffc8" +
    "\060\uffc8\061\uffc8\062\uffc8\063\uffc8\064\uffc8\001\002\000" +
    "\016\024\062\025\073\040\071\062\047\063\104\064\051" +
    "\001\002\000\112\003\uffba\011\uffba\012\uffba\015\uffba\016" +
    "\uffba\017\uffba\020\uffba\023\uffba\024\uffba\025\uffba\031\uffba" +
    "\032\uffba\033\uffba\034\uffba\035\uffba\036\uffba\037\uffba\040" +
    "\uffba\041\uffba\042\uffba\043\uffba\044\uffba\045\uffba\046\uffba" +
    "\047\uffba\051\uffba\052\uffba\053\uffba\055\uffba\056\uffba\057" +
    "\uffba\060\uffba\061\uffba\062\uffba\063\uffba\064\uffba\001\002" +
    "\000\046\003\uffe0\011\075\015\055\017\uffe0\020\042\023" +
    "\uffe0\024\062\025\073\040\071\053\054\055\uffe0\056\050" +
    "\057\043\060\063\061\053\062\047\063\076\064\051\001" +
    "\002\000\046\003\uffdf\011\uffdf\015\uffdf\017\uffdf\020\uffdf" +
    "\023\uffdf\024\uffdf\025\uffdf\040\uffdf\053\uffdf\055\uffdf\056" +
    "\uffdf\057\uffdf\060\uffdf\061\uffdf\062\uffdf\063\uffdf\064\uffdf" +
    "\001\002\000\112\003\uff9f\011\uff9f\012\uff9f\015\uff9f\016" +
    "\uff9f\017\uff9f\020\uff9f\023\uff9f\024\uff9f\025\uff9f\031\uff9f" +
    "\032\uff9f\033\uff9f\034\uff9f\035\uff9f\036\uff9f\037\uff9f\040" +
    "\uff9f\041\uff9f\042\uff9f\043\uff9f\044\uff9f\045\uff9f\046\uff9f" +
    "\047\uff9f\051\uff9f\052\uff9f\053\uff9f\055\uff9f\056\uff9f\057" +
    "\uff9f\060\uff9f\061\uff9f\062\uff9f\063\uff9f\064\uff9f\001\002" +
    "\000\046\003\uffd7\011\uffd7\015\uffd7\017\uffd7\020\uffd7\023" +
    "\uffd7\024\uffd7\025\uffd7\040\uffd7\053\uffd7\055\uffd7\056\uffd7" +
    "\057\uffd7\060\uffd7\061\uffd7\062\uffd7\063\uffd7\064\uffd7\001" +
    "\002\000\112\003\uffa0\011\uffa0\012\uffa0\015\uffa0\016\uffa0" +
    "\017\uffa0\020\uffa0\023\uffa0\024\uffa0\025\uffa0\031\uffa0\032" +
    "\uffa0\033\uffa0\034\uffa0\035\uffa0\036\uffa0\037\uffa0\040\uffa0" +
    "\041\uffa0\042\uffa0\043\uffa0\044\uffa0\045\uffa0\046\uffa0\047" +
    "\uffa0\051\uffa0\052\uffa0\053\uffa0\055\uffa0\056\uffa0\057\uffa0" +
    "\060\uffa0\061\uffa0\062\uffa0\063\uffa0\064\uffa0\001\002\000" +
    "\112\003\uffb8\011\uffb8\012\uffb8\015\uffb8\016\uffb8\017\uffb8" +
    "\020\uffb8\023\uffb8\024\uffb8\025\uffb8\031\uffb8\032\uffb8\033" +
    "\uffb8\034\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8" +
    "\042\uffb8\043\uffb8\044\uffb8\045\uffb8\046\uffb8\047\uffb8\051" +
    "\uffb8\052\uffb8\053\uffb8\055\uffb8\056\uffb8\057\uffb8\060\uffb8" +
    "\061\uffb8\062\uffb8\063\uffb8\064\uffb8\001\002\000\004\050" +
    "\241\001\002\000\004\063\232\001\002\000\010\003\214" +
    "\053\054\063\203\001\002\000\046\003\uffdd\011\uffdd\015" +
    "\uffdd\017\uffdd\020\uffdd\023\uffdd\024\uffdd\025\uffdd\040\uffdd" +
    "\053\uffdd\055\uffdd\056\uffdd\057\uffdd\060\uffdd\061\uffdd\062" +
    "\uffdd\063\uffdd\064\uffdd\001\002\000\046\003\uffde\011\uffde" +
    "\015\uffde\017\uffde\020\uffde\023\uffde\024\uffde\025\uffde\040" +
    "\uffde\053\uffde\055\uffde\056\uffde\057\uffde\060\uffde\061\uffde" +
    "\062\uffde\063\uffde\064\uffde\001\002\000\102\003\uffd9\011" +
    "\uffd9\015\uffd9\017\uffd9\020\uffd9\023\uffd9\024\uffd9\025\uffd9" +
    "\031\116\032\122\033\111\034\117\035\125\036\114\037" +
    "\120\040\uffd9\041\115\042\113\043\121\044\124\045\110" +
    "\046\112\047\123\053\uffd9\055\uffd9\056\uffd9\057\uffd9\060" +
    "\uffd9\061\uffd9\062\uffd9\063\uffd9\064\uffd9\001\002\000\046" +
    "\003\uffda\011\uffda\015\uffda\017\uffda\020\uffda\023\uffda\024" +
    "\uffda\025\uffda\040\uffda\053\uffda\055\uffda\056\uffda\057\uffda" +
    "\060\uffda\061\uffda\062\uffda\063\uffda\064\uffda\001\002\000" +
    "\112\003\uffac\011\uffac\012\uffac\015\uffac\016\uffac\017\uffac" +
    "\020\uffac\023\uffac\024\uffac\025\uffac\031\uffac\032\uffac\033" +
    "\uffac\034\uffac\035\uffac\036\uffac\037\uffac\040\uffac\041\uffac" +
    "\042\uffac\043\uffac\044\uffac\045\uffac\046\uffac\047\uffac\051" +
    "\uffac\052\uffac\053\uffac\055\uffac\056\uffac\057\uffac\060\uffac" +
    "\061\uffac\062\uffac\063\uffac\064\uffac\001\002\000\004\050" +
    "\205\001\002\000\046\003\uffdc\011\uffdc\015\uffdc\017\uffdc" +
    "\020\uffdc\023\uffdc\024\uffdc\025\uffdc\040\uffdc\053\uffdc\055" +
    "\uffdc\056\uffdc\057\uffdc\060\uffdc\061\uffdc\062\uffdc\063\uffdc" +
    "\064\uffdc\001\002\000\112\003\uffbd\011\uffbd\012\uffbd\015" +
    "\uffbd\016\uffbd\017\uffbd\020\uffbd\023\uffbd\024\uffbd\025\uffbd" +
    "\031\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd\037" +
    "\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd\045\uffbd" +
    "\046\uffbd\047\uffbd\051\uffbd\052\uffbd\053\uffbd\055\uffbd\056" +
    "\uffbd\057\uffbd\060\uffbd\061\uffbd\062\uffbd\063\uffbd\064\uffbd" +
    "\001\002\000\046\003\uffdb\011\uffdb\015\uffdb\017\uffdb\020" +
    "\uffdb\023\uffdb\024\uffdb\025\uffdb\040\uffdb\053\uffdb\055\uffdb" +
    "\056\uffdb\057\uffdb\060\uffdb\061\uffdb\062\uffdb\063\uffdb\064" +
    "\uffdb\001\002\000\052\003\uffc2\011\uffc2\015\uffc2\016\uffc2" +
    "\017\uffc2\020\uffc2\023\uffc2\024\uffc2\025\uffc2\040\uffc2\052" +
    "\202\053\uffc2\055\uffc2\056\uffc2\057\uffc2\060\uffc2\061\uffc2" +
    "\062\uffc2\063\uffc2\064\uffc2\001\002\000\004\055\200\001" +
    "\002\000\020\024\062\025\073\040\071\050\175\062\047" +
    "\063\104\064\051\001\002\000\004\055\172\001\002\000" +
    "\112\003\uffab\011\uffab\012\uffab\015\uffab\016\uffab\017\uffab" +
    "\020\uffab\023\uffab\024\uffab\025\uffab\031\uffab\032\uffab\033" +
    "\uffab\034\uffab\035\uffab\036\uffab\037\uffab\040\uffab\041\uffab" +
    "\042\uffab\043\uffab\044\uffab\045\uffab\046\uffab\047\uffab\051" +
    "\uffab\052\uffab\053\uffab\055\uffab\056\uffab\057\uffab\060\uffab" +
    "\061\uffab\062\uffab\063\uffab\064\uffab\001\002\000\112\003" +
    "\uffbc\011\uffbc\012\uffbc\015\uffbc\016\uffbc\017\uffbc\020\uffbc" +
    "\023\uffbc\024\uffbc\025\uffbc\031\uffbc\032\uffbc\033\uffbc\034" +
    "\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc" +
    "\043\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc\051\uffbc\052" +
    "\uffbc\053\uffbc\055\uffbc\056\uffbc\057\uffbc\060\uffbc\061\uffbc" +
    "\062\uffbc\063\uffbc\064\uffbc\001\002\000\016\024\062\025" +
    "\073\040\071\062\047\063\104\064\051\001\002\000\106" +
    "\003\uffb9\011\uffb9\015\uffb9\017\uffb9\020\uffb9\023\uffb9\024" +
    "\uffb9\025\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9" +
    "\036\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9\044" +
    "\uffb9\045\uffb9\046\077\047\uffb9\050\101\053\uffb9\054\100" +
    "\055\uffb9\056\uffb9\057\uffb9\060\uffb9\061\uffb9\062\uffb9\063" +
    "\uffb9\064\uffb9\001\002\000\016\024\062\025\073\040\071" +
    "\062\047\063\104\064\051\001\002\000\010\004\035\005" +
    "\034\006\036\001\002\000\022\003\106\024\062\025\073" +
    "\040\071\051\107\062\047\063\104\064\051\001\002\000" +
    "\010\003\uff99\051\uff99\052\160\001\002\000\006\003\156" +
    "\051\157\001\002\000\114\003\uffb9\011\uffb9\012\uffb9\015" +
    "\uffb9\016\uffb9\017\uffb9\020\uffb9\023\uffb9\024\uffb9\025\uffb9" +
    "\031\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9\037" +
    "\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9" +
    "\046\uffb9\047\uffb9\050\101\051\uffb9\052\uffb9\053\uffb9\055" +
    "\uffb9\056\uffb9\057\uffb9\060\uffb9\061\uffb9\062\uffb9\063\uffb9" +
    "\064\uffb9\001\002\000\044\003\uff98\031\116\032\122\033" +
    "\111\034\117\035\125\036\114\037\120\041\115\042\113" +
    "\043\121\044\124\045\110\046\112\047\123\051\uff98\052" +
    "\uff98\001\002\000\112\003\uff9c\011\uff9c\012\uff9c\015\uff9c" +
    "\016\uff9c\017\uff9c\020\uff9c\023\uff9c\024\uff9c\025\uff9c\031" +
    "\uff9c\032\uff9c\033\uff9c\034\uff9c\035\uff9c\036\uff9c\037\uff9c" +
    "\040\uff9c\041\uff9c\042\uff9c\043\uff9c\044\uff9c\045\uff9c\046" +
    "\uff9c\047\uff9c\051\uff9c\052\uff9c\053\uff9c\055\uff9c\056\uff9c" +
    "\057\uff9c\060\uff9c\061\uff9c\062\uff9c\063\uff9c\064\uff9c\001" +
    "\002\000\112\003\uff9d\011\uff9d\012\uff9d\015\uff9d\016\uff9d" +
    "\017\uff9d\020\uff9d\023\uff9d\024\uff9d\025\uff9d\031\uff9d\032" +
    "\uff9d\033\uff9d\034\uff9d\035\uff9d\036\uff9d\037\uff9d\040\uff9d" +
    "\041\uff9d\042\uff9d\043\uff9d\044\uff9d\045\uff9d\046\uff9d\047" +
    "\uff9d\051\uff9d\052\uff9d\053\uff9d\055\uff9d\056\uff9d\057\uff9d" +
    "\060\uff9d\061\uff9d\062\uff9d\063\uff9d\064\uff9d\001\002\000" +
    "\016\024\062\025\073\040\071\062\047\063\104\064\051" +
    "\001\002\000\020\003\153\024\062\025\073\040\071\062" +
    "\047\063\104\064\051\001\002\000\016\024\062\025\073" +
    "\040\071\062\047\063\104\064\051\001\002\000\016\024" +
    "\062\025\073\040\071\062\047\063\104\064\051\001\002" +
    "\000\016\024\062\025\073\040\071\062\047\063\104\064" +
    "\051\001\002\000\016\024\062\025\073\040\071\062\047" +
    "\063\104\064\051\001\002\000\020\003\144\024\062\025" +
    "\073\040\071\062\047\063\104\064\051\001\002\000\020" +
    "\003\141\024\062\025\073\040\071\062\047\063\104\064" +
    "\051\001\002\000\016\024\062\025\073\040\071\062\047" +
    "\063\104\064\051\001\002\000\016\024\062\025\073\040" +
    "\071\062\047\063\104\064\051\001\002\000\020\003\134" +
    "\024\062\025\073\040\071\062\047\063\104\064\051\001" +
    "\002\000\016\024\062\025\073\040\071\062\047\063\104" +
    "\064\051\001\002\000\016\024\062\025\073\040\071\062" +
    "\047\063\104\064\051\001\002\000\020\003\127\024\062" +
    "\025\073\040\071\062\047\063\104\064\051\001\002\000" +
    "\112\003\uffa6\011\uffa6\012\uffa6\015\uffa6\016\uffa6\017\uffa6" +
    "\020\uffa6\023\uffa6\024\uffa6\025\uffa6\031\uffa6\032\uffa6\033" +
    "\111\034\117\035\uffa6\036\uffa6\037\uffa6\040\uffa6\041\uffa6" +
    "\042\uffa6\043\uffa6\044\uffa6\045\uffa6\046\uffa6\047\uffa6\051" +
    "\uffa6\052\uffa6\053\uffa6\055\uffa6\056\uffa6\057\uffa6\060\uffa6" +
    "\061\uffa6\062\uffa6\063\uffa6\064\uffa6\001\002\000\016\024" +
    "\062\025\073\040\071\062\047\063\104\064\051\001\002" +
    "\000\112\003\uffa1\011\uffa1\012\uffa1\015\uffa1\016\uffa1\017" +
    "\uffa1\020\uffa1\023\uffa1\024\uffa1\025\uffa1\031\116\032\122" +
    "\033\111\034\117\035\125\036\114\037\120\040\uffa1\041" +
    "\115\042\113\043\121\044\124\045\110\046\112\047\123" +
    "\051\uffa1\052\uffa1\053\uffa1\055\uffa1\056\uffa1\057\uffa1\060" +
    "\uffa1\061\uffa1\062\uffa1\063\uffa1\064\uffa1\001\002\000\112" +
    "\003\uffb5\011\uffb5\012\uffb5\015\uffb5\016\uffb5\017\uffb5\020" +
    "\uffb5\023\uffb5\024\uffb5\025\uffb5\031\116\032\122\033\111" +
    "\034\117\035\125\036\uffb5\037\uffb5\040\uffb5\041\uffb5\042" +
    "\uffb5\043\uffb5\044\uffb5\045\uffb5\046\uffb5\047\uffb5\051\uffb5" +
    "\052\uffb5\053\uffb5\055\uffb5\056\uffb5\057\uffb5\060\uffb5\061" +
    "\uffb5\062\uffb5\063\uffb5\064\uffb5\001\002\000\112\003\uffb2" +
    "\011\uffb2\012\uffb2\015\uffb2\016\uffb2\017\uffb2\020\uffb2\023" +
    "\uffb2\024\uffb2\025\uffb2\031\116\032\122\033\111\034\117" +
    "\035\125\036\uffb2\037\uffb2\040\uffb2\041\uffb2\042\uffb2\043" +
    "\uffb2\044\uffb2\045\uffb2\046\uffb2\047\uffb2\051\uffb2\052\uffb2" +
    "\053\uffb2\055\uffb2\056\uffb2\057\uffb2\060\uffb2\061\uffb2\062" +
    "\uffb2\063\uffb2\064\uffb2\001\002\000\112\003\uffa9\011\uffa9" +
    "\012\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9\023\uffa9\024" +
    "\uffa9\025\uffa9\031\uffa9\032\uffa9\033\111\034\117\035\uffa9" +
    "\036\uffa9\037\uffa9\040\uffa9\041\uffa9\042\uffa9\043\uffa9\044" +
    "\uffa9\045\uffa9\046\uffa9\047\uffa9\051\uffa9\052\uffa9\053\uffa9" +
    "\055\uffa9\056\uffa9\057\uffa9\060\uffa9\061\uffa9\062\uffa9\063" +
    "\uffa9\064\uffa9\001\002\000\016\024\062\025\073\040\071" +
    "\062\047\063\104\064\051\001\002\000\112\003\uffa4\011" +
    "\uffa4\012\uffa4\015\uffa4\016\uffa4\017\uffa4\020\uffa4\023\uffa4" +
    "\024\uffa4\025\uffa4\031\116\032\122\033\111\034\117\035" +
    "\125\036\114\037\120\040\uffa4\041\115\042\113\043\121" +
    "\044\124\045\110\046\112\047\123\051\uffa4\052\uffa4\053" +
    "\uffa4\055\uffa4\056\uffa4\057\uffa4\060\uffa4\061\uffa4\062\uffa4" +
    "\063\uffa4\064\uffa4\001\002\000\112\003\uffb6\011\uffb6\012" +
    "\uffb6\015\uffb6\016\uffb6\017\uffb6\020\uffb6\023\uffb6\024\uffb6" +
    "\025\uffb6\031\116\032\122\033\111\034\117\035\125\036" +
    "\uffb6\037\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6" +
    "\045\uffb6\046\uffb6\047\uffb6\051\uffb6\052\uffb6\053\uffb6\055" +
    "\uffb6\056\uffb6\057\uffb6\060\uffb6\061\uffb6\062\uffb6\063\uffb6" +
    "\064\uffb6\001\002\000\112\003\uffaf\011\uffaf\012\uffaf\015" +
    "\uffaf\016\uffaf\017\uffaf\020\uffaf\023\uffaf\024\uffaf\025\uffaf" +
    "\031\116\032\122\033\111\034\117\035\125\036\114\037" +
    "\uffaf\040\uffaf\041\115\042\113\043\121\044\124\045\110" +
    "\046\112\047\123\051\uffaf\052\uffaf\053\uffaf\055\uffaf\056" +
    "\uffaf\057\uffaf\060\uffaf\061\uffaf\062\uffaf\063\uffaf\064\uffaf" +
    "\001\002\000\112\003\uffa7\011\uffa7\012\uffa7\015\uffa7\016" +
    "\uffa7\017\uffa7\020\uffa7\023\uffa7\024\uffa7\025\uffa7\031\uffa7" +
    "\032\uffa7\033\uffa7\034\uffa7\035\uffa7\036\uffa7\037\uffa7\040" +
    "\uffa7\041\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7" +
    "\047\uffa7\051\uffa7\052\uffa7\053\uffa7\055\uffa7\056\uffa7\057" +
    "\uffa7\060\uffa7\061\uffa7\062\uffa7\063\uffa7\064\uffa7\001\002" +
    "\000\016\024\062\025\073\040\071\062\047\063\104\064" +
    "\051\001\002\000\112\003\uffa2\011\uffa2\012\uffa2\015\uffa2" +
    "\016\uffa2\017\uffa2\020\uffa2\023\uffa2\024\uffa2\025\uffa2\031" +
    "\116\032\122\033\111\034\117\035\125\036\114\037\120" +
    "\040\uffa2\041\115\042\113\043\121\044\124\045\110\046" +
    "\112\047\123\051\uffa2\052\uffa2\053\uffa2\055\uffa2\056\uffa2" +
    "\057\uffa2\060\uffa2\061\uffa2\062\uffa2\063\uffa2\064\uffa2\001" +
    "\002\000\112\003\uffaa\011\uffaa\012\uffaa\015\uffaa\016\uffaa" +
    "\017\uffaa\020\uffaa\023\uffaa\024\uffaa\025\uffaa\031\uffaa\032" +
    "\uffaa\033\111\034\117\035\uffaa\036\uffaa\037\uffaa\040\uffaa" +
    "\041\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa\046\uffaa\047" +
    "\uffaa\051\uffaa\052\uffaa\053\uffaa\055\uffaa\056\uffaa\057\uffaa" +
    "\060\uffaa\061\uffaa\062\uffaa\063\uffaa\064\uffaa\001\002\000" +
    "\016\024\062\025\073\040\071\062\047\063\104\064\051" +
    "\001\002\000\112\003\uffa5\011\uffa5\012\uffa5\015\uffa5\016" +
    "\uffa5\017\uffa5\020\uffa5\023\uffa5\024\uffa5\025\uffa5\031\116" +
    "\032\122\033\111\034\117\035\125\036\114\037\120\040" +
    "\uffa5\041\115\042\113\043\121\044\124\045\110\046\112" +
    "\047\123\051\uffa5\052\uffa5\053\uffa5\055\uffa5\056\uffa5\057" +
    "\uffa5\060\uffa5\061\uffa5\062\uffa5\063\uffa5\064\uffa5\001\002" +
    "\000\112\003\uffad\011\uffad\012\uffad\015\uffad\016\uffad\017" +
    "\uffad\020\uffad\023\uffad\024\uffad\025\uffad\031\116\032\122" +
    "\033\111\034\117\035\125\036\114\037\uffad\040\uffad\041" +
    "\uffad\042\113\043\121\044\124\045\110\046\112\047\123" +
    "\051\uffad\052\uffad\053\uffad\055\uffad\056\uffad\057\uffad\060" +
    "\uffad\061\uffad\062\uffad\063\uffad\064\uffad\001\002\000\112" +
    "\003\uffae\011\uffae\012\uffae\015\uffae\016\uffae\017\uffae\020" +
    "\uffae\023\uffae\024\uffae\025\uffae\031\116\032\122\033\111" +
    "\034\117\035\125\036\uffae\037\uffae\040\uffae\041\uffae\042" +
    "\113\043\121\044\124\045\110\046\112\047\123\051\uffae" +
    "\052\uffae\053\uffae\055\uffae\056\uffae\057\uffae\060\uffae\061" +
    "\uffae\062\uffae\063\uffae\064\uffae\001\002\000\112\003\uffb7" +
    "\011\uffb7\012\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7\023" +
    "\uffb7\024\uffb7\025\uffb7\031\116\032\122\033\111\034\117" +
    "\035\125\036\uffb7\037\uffb7\040\uffb7\041\uffb7\042\uffb7\043" +
    "\uffb7\044\uffb7\045\uffb7\046\uffb7\047\uffb7\051\uffb7\052\uffb7" +
    "\053\uffb7\055\uffb7\056\uffb7\057\uffb7\060\uffb7\061\uffb7\062" +
    "\uffb7\063\uffb7\064\uffb7\001\002\000\112\003\uffb3\011\uffb3" +
    "\012\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3\023\uffb3\024" +
    "\uffb3\025\uffb3\031\116\032\122\033\111\034\117\035\125" +
    "\036\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3\044" +
    "\uffb3\045\uffb3\046\uffb3\047\uffb3\051\uffb3\052\uffb3\053\uffb3" +
    "\055\uffb3\056\uffb3\057\uffb3\060\uffb3\061\uffb3\062\uffb3\063" +
    "\uffb3\064\uffb3\001\002\000\112\003\uffa8\011\uffa8\012\uffa8" +
    "\015\uffa8\016\uffa8\017\uffa8\020\uffa8\023\uffa8\024\uffa8\025" +
    "\uffa8\031\uffa8\032\uffa8\033\uffa8\034\uffa8\035\uffa8\036\uffa8" +
    "\037\uffa8\040\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8\045" +
    "\uffa8\046\uffa8\047\uffa8\051\uffa8\052\uffa8\053\uffa8\055\uffa8" +
    "\056\uffa8\057\uffa8\060\uffa8\061\uffa8\062\uffa8\063\uffa8\064" +
    "\uffa8\001\002\000\016\024\062\025\073\040\071\062\047" +
    "\063\104\064\051\001\002\000\112\003\uffa3\011\uffa3\012" +
    "\uffa3\015\uffa3\016\uffa3\017\uffa3\020\uffa3\023\uffa3\024\uffa3" +
    "\025\uffa3\031\116\032\122\033\111\034\117\035\125\036" +
    "\114\037\120\040\uffa3\041\115\042\113\043\121\044\124" +
    "\045\110\046\112\047\123\051\uffa3\052\uffa3\053\uffa3\055" +
    "\uffa3\056\uffa3\057\uffa3\060\uffa3\061\uffa3\062\uffa3\063\uffa3" +
    "\064\uffa3\001\002\000\112\003\uffb4\011\uffb4\012\uffb4\015" +
    "\uffb4\016\uffb4\017\uffb4\020\uffb4\023\uffb4\024\uffb4\025\uffb4" +
    "\031\116\032\122\033\111\034\117\035\125\036\uffb4\037" +
    "\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4" +
    "\046\uffb4\047\uffb4\051\uffb4\052\uffb4\053\uffb4\055\uffb4\056" +
    "\uffb4\057\uffb4\060\uffb4\061\uffb4\062\uffb4\063\uffb4\064\uffb4" +
    "\001\002\000\112\003\uff9b\011\uff9b\012\uff9b\015\uff9b\016" +
    "\uff9b\017\uff9b\020\uff9b\023\uff9b\024\uff9b\025\uff9b\031\uff9b" +
    "\032\uff9b\033\uff9b\034\uff9b\035\uff9b\036\uff9b\037\uff9b\040" +
    "\uff9b\041\uff9b\042\uff9b\043\uff9b\044\uff9b\045\uff9b\046\uff9b" +
    "\047\uff9b\051\uff9b\052\uff9b\053\uff9b\055\uff9b\056\uff9b\057" +
    "\uff9b\060\uff9b\061\uff9b\062\uff9b\063\uff9b\064\uff9b\001\002" +
    "\000\112\003\uff9e\011\uff9e\012\uff9e\015\uff9e\016\uff9e\017" +
    "\uff9e\020\uff9e\023\uff9e\024\uff9e\025\uff9e\031\uff9e\032\uff9e" +
    "\033\uff9e\034\uff9e\035\uff9e\036\uff9e\037\uff9e\040\uff9e\041" +
    "\uff9e\042\uff9e\043\uff9e\044\uff9e\045\uff9e\046\uff9e\047\uff9e" +
    "\051\uff9e\052\uff9e\053\uff9e\055\uff9e\056\uff9e\057\uff9e\060" +
    "\uff9e\061\uff9e\062\uff9e\063\uff9e\064\uff9e\001\002\000\016" +
    "\024\062\025\073\040\071\062\047\063\104\064\051\001" +
    "\002\000\006\003\uff9a\051\uff9a\001\002\000\004\046\163" +
    "\001\002\000\016\024\062\025\073\040\071\062\047\063" +
    "\104\064\051\001\002\000\106\003\uffc0\011\uffc0\015\uffc0" +
    "\016\uffc0\017\uffc0\020\uffc0\023\uffc0\024\uffc0\025\uffc0\031" +
    "\116\032\122\033\111\034\117\035\125\036\114\037\120" +
    "\040\uffc0\041\115\042\113\043\121\044\124\045\110\046" +
    "\112\047\123\052\uffc0\053\uffc0\055\uffc0\056\uffc0\057\uffc0" +
    "\060\uffc0\061\uffc0\062\uffc0\063\uffc0\064\uffc0\001\002\000" +
    "\106\003\uffbe\011\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe" +
    "\023\uffbe\024\uffbe\025\uffbe\031\116\032\122\033\111\034" +
    "\117\035\125\036\114\037\120\040\uffbe\041\115\042\113" +
    "\043\121\044\124\045\110\046\112\047\123\052\uffbe\053" +
    "\uffbe\055\uffbe\056\uffbe\057\uffbe\060\uffbe\061\uffbe\062\uffbe" +
    "\063\uffbe\064\uffbe\001\002\000\040\012\uffd0\031\116\032" +
    "\122\033\111\034\117\035\125\036\114\037\120\041\115" +
    "\042\113\043\121\044\124\045\110\046\112\047\123\001" +
    "\002\000\004\012\170\001\002\000\040\011\075\015\055" +
    "\020\042\024\062\025\073\040\071\053\054\055\uffe0\056" +
    "\050\057\043\060\063\061\053\062\047\063\076\064\051" +
    "\001\002\000\004\055\uffcf\001\002\000\004\026\173\001" +
    "\002\000\010\026\uffee\027\uffee\030\uffee\001\002\000\112" +
    "\003\uffb1\011\uffb1\012\uffb1\015\uffb1\016\uffb1\017\uffb1\020" +
    "\uffb1\023\uffb1\024\uffb1\025\uffb1\031\uffb1\032\uffb1\033\uffb1" +
    "\034\uffb1\035\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1\042" +
    "\uffb1\043\uffb1\044\uffb1\045\uffb1\046\uffb1\047\uffb1\051\uffb1" +
    "\052\uffb1\053\uffb1\055\uffb1\056\uffb1\057\uffb1\060\uffb1\061" +
    "\uffb1\062\uffb1\063\uffb1\064\uffb1\001\002\000\016\024\062" +
    "\025\073\040\071\062\047\063\104\064\051\001\002\000" +
    "\040\031\116\032\122\033\111\034\117\035\125\036\114" +
    "\037\120\041\115\042\113\043\121\044\124\045\110\046" +
    "\112\047\123\051\177\001\002\000\112\003\uffb0\011\uffb0" +
    "\012\uffb0\015\uffb0\016\uffb0\017\uffb0\020\uffb0\023\uffb0\024" +
    "\uffb0\025\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0" +
    "\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044" +
    "\uffb0\045\uffb0\046\uffb0\047\uffb0\051\uffb0\052\uffb0\053\uffb0" +
    "\055\uffb0\056\uffb0\057\uffb0\060\uffb0\061\uffb0\062\uffb0\063" +
    "\uffb0\064\uffb0\001\002\000\004\011\201\001\002\000\046" +
    "\003\uffd1\011\uffd1\015\uffd1\017\uffd1\020\uffd1\023\uffd1\024" +
    "\uffd1\025\uffd1\040\uffd1\053\uffd1\055\uffd1\056\uffd1\057\uffd1" +
    "\060\uffd1\061\uffd1\062\uffd1\063\uffd1\064\uffd1\001\002\000" +
    "\006\053\054\063\203\001\002\000\006\046\077\054\100" +
    "\001\002\000\050\003\uffc3\011\uffc3\015\uffc3\016\uffc3\017" +
    "\uffc3\020\uffc3\023\uffc3\024\uffc3\025\uffc3\040\uffc3\053\uffc3" +
    "\055\uffc3\056\uffc3\057\uffc3\060\uffc3\061\uffc3\062\uffc3\063" +
    "\uffc3\064\uffc3\001\002\000\012\003\206\062\047\063\210" +
    "\064\051\001\002\000\004\051\213\001\002\000\004\051" +
    "\212\001\002\000\004\051\211\001\002\000\046\003\uffd5" +
    "\011\uffd5\015\uffd5\017\uffd5\020\uffd5\023\uffd5\024\uffd5\025" +
    "\uffd5\040\uffd5\053\uffd5\055\uffd5\056\uffd5\057\uffd5\060\uffd5" +
    "\061\uffd5\062\uffd5\063\uffd5\064\uffd5\001\002\000\046\003" +
    "\uffd6\011\uffd6\015\uffd6\017\uffd6\020\uffd6\023\uffd6\024\uffd6" +
    "\025\uffd6\040\uffd6\053\uffd6\055\uffd6\056\uffd6\057\uffd6\060" +
    "\uffd6\061\uffd6\062\uffd6\063\uffd6\064\uffd6\001\002\000\046" +
    "\003\uffd4\011\uffd4\015\uffd4\017\uffd4\020\uffd4\023\uffd4\024" +
    "\uffd4\025\uffd4\040\uffd4\053\uffd4\055\uffd4\056\uffd4\057\uffd4" +
    "\060\uffd4\061\uffd4\062\uffd4\063\uffd4\064\uffd4\001\002\000" +
    "\004\016\226\001\002\000\004\016\216\001\002\000\016" +
    "\024\062\025\073\040\071\062\047\063\104\064\051\001" +
    "\002\000\076\003\221\011\uffce\015\uffce\020\uffce\023\uffce" +
    "\024\uffce\025\uffce\031\116\032\122\033\111\034\117\035" +
    "\125\036\114\037\120\040\uffce\041\115\042\113\043\121" +
    "\044\124\045\110\046\112\047\123\053\uffce\056\uffce\057" +
    "\uffce\060\uffce\061\uffce\062\uffce\063\uffce\064\uffce\001\002" +
    "\000\040\011\075\015\055\020\042\023\uffe0\024\062\025" +
    "\073\040\071\053\054\056\050\057\043\060\063\061\053" +
    "\062\047\063\076\064\051\001\002\000\040\011\075\015" +
    "\055\020\042\023\uffe0\024\062\025\073\040\071\053\054" +
    "\056\050\057\043\060\063\061\053\062\047\063\076\064" +
    "\051\001\002\000\004\023\223\001\002\000\046\003\uffcb" +
    "\011\uffcb\015\uffcb\017\uffcb\020\uffcb\023\uffcb\024\uffcb\025" +
    "\uffcb\040\uffcb\053\uffcb\055\uffcb\056\uffcb\057\uffcb\060\uffcb" +
    "\061\uffcb\062\uffcb\063\uffcb\064\uffcb\001\002\000\004\023" +
    "\225\001\002\000\046\003\uffcd\011\uffcd\015\uffcd\017\uffcd" +
    "\020\uffcd\023\uffcd\024\uffcd\025\uffcd\040\uffcd\053\uffcd\055" +
    "\uffcd\056\uffcd\057\uffcd\060\uffcd\061\uffcd\062\uffcd\063\uffcd" +
    "\064\uffcd\001\002\000\016\024\062\025\073\040\071\062" +
    "\047\063\104\064\051\001\002\000\074\011\075\015\055" +
    "\020\042\023\uffe0\024\062\025\073\031\116\032\122\033" +
    "\111\034\117\035\125\036\114\037\120\040\071\041\115" +
    "\042\113\043\121\044\124\045\110\046\112\047\123\053" +
    "\054\056\050\057\043\060\063\061\053\062\047\063\076" +
    "\064\051\001\002\000\004\023\231\001\002\000\046\003" +
    "\uffcc\011\uffcc\015\uffcc\017\uffcc\020\uffcc\023\uffcc\024\uffcc" +
    "\025\uffcc\040\uffcc\053\uffcc\055\uffcc\056\uffcc\057\uffcc\060" +
    "\uffcc\061\uffcc\062\uffcc\063\uffcc\064\uffcc\001\002\000\006" +
    "\046\233\054\234\001\002\000\016\024\062\025\073\040" +
    "\071\062\047\063\104\064\051\001\002\000\010\004\035" +
    "\005\034\006\036\001\002\000\004\046\236\001\002\000" +
    "\016\024\062\025\073\040\071\062\047\063\104\064\051" +
    "\001\002\000\106\003\uffc1\011\uffc1\015\uffc1\016\uffc1\017" +
    "\uffc1\020\uffc1\023\uffc1\024\uffc1\025\uffc1\031\116\032\122" +
    "\033\111\034\117\035\125\036\114\037\120\040\uffc1\041" +
    "\115\042\113\043\121\044\124\045\110\046\112\047\123" +
    "\052\uffc1\053\uffc1\055\uffc1\056\uffc1\057\uffc1\060\uffc1\061" +
    "\uffc1\062\uffc1\063\uffc1\064\uffc1\001\002\000\106\003\uffbf" +
    "\011\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf\023\uffbf\024" +
    "\uffbf\025\uffbf\031\116\032\122\033\111\034\117\035\125" +
    "\036\114\037\120\040\uffbf\041\115\042\113\043\121\044" +
    "\124\045\110\046\112\047\123\052\uffbf\053\uffbf\055\uffbf" +
    "\056\uffbf\057\uffbf\060\uffbf\061\uffbf\062\uffbf\063\uffbf\064" +
    "\uffbf\001\002\000\006\003\242\063\243\001\002\000\004" +
    "\051\245\001\002\000\004\051\244\001\002\000\046\003" +
    "\uffd3\011\uffd3\015\uffd3\017\uffd3\020\uffd3\023\uffd3\024\uffd3" +
    "\025\uffd3\040\uffd3\053\uffd3\055\uffd3\056\uffd3\057\uffd3\060" +
    "\uffd3\061\uffd3\062\uffd3\063\uffd3\064\uffd3\001\002\000\046" +
    "\003\uffd2\011\uffd2\015\uffd2\017\uffd2\020\uffd2\023\uffd2\024" +
    "\uffd2\025\uffd2\040\uffd2\053\uffd2\055\uffd2\056\uffd2\057\uffd2" +
    "\060\uffd2\061\uffd2\062\uffd2\063\uffd2\064\uffd2\001\002\000" +
    "\012\003\uffe1\017\uffe1\023\uffe1\055\uffe1\001\002\000\102" +
    "\003\uffd8\011\uffd8\015\uffd8\017\uffd8\020\uffd8\023\uffd8\024" +
    "\uffd8\025\uffd8\031\116\032\122\033\111\034\117\035\125" +
    "\036\114\037\120\040\uffd8\041\115\042\113\043\121\044" +
    "\124\045\110\046\112\047\123\053\uffd8\055\uffd8\056\uffd8" +
    "\057\uffd8\060\uffd8\061\uffd8\062\uffd8\063\uffd8\064\uffd8\001" +
    "\002\000\004\017\266\001\002\000\040\011\075\015\055" +
    "\017\uffe0\020\042\024\062\025\073\040\071\053\054\056" +
    "\050\057\043\060\063\061\053\062\047\063\076\064\051" +
    "\001\002\000\020\003\254\024\062\025\073\040\071\062" +
    "\047\063\104\064\051\001\002\000\076\003\256\011\uffca" +
    "\015\uffca\017\uffca\020\uffca\024\uffca\025\uffca\031\116\032" +
    "\122\033\111\034\117\035\125\036\114\037\120\040\uffca" +
    "\041\115\042\113\043\121\044\124\045\110\046\112\047" +
    "\123\053\uffca\056\uffca\057\uffca\060\uffca\061\uffca\062\uffca" +
    "\063\uffca\064\uffca\001\002\000\004\017\255\001\002\000" +
    "\046\003\uffc5\011\uffc5\015\uffc5\017\uffc5\020\uffc5\023\uffc5" +
    "\024\uffc5\025\uffc5\040\uffc5\053\uffc5\055\uffc5\056\uffc5\057" +
    "\uffc5\060\uffc5\061\uffc5\062\uffc5\063\uffc5\064\uffc5\001\002" +
    "\000\046\003\uffc4\011\uffc4\015\uffc4\017\uffc4\020\uffc4\023" +
    "\uffc4\024\uffc4\025\uffc4\040\uffc4\053\uffc4\055\uffc4\056\uffc4" +
    "\057\uffc4\060\uffc4\061\uffc4\062\uffc4\063\uffc4\064\uffc4\001" +
    "\002\000\040\011\075\015\055\017\uffe0\020\042\024\062" +
    "\025\073\040\071\053\054\056\050\057\043\060\063\061" +
    "\053\062\047\063\076\064\051\001\002\000\004\017\261" +
    "\001\002\000\046\003\uffc9\011\uffc9\015\uffc9\017\uffc9\020" +
    "\uffc9\023\uffc9\024\uffc9\025\uffc9\040\uffc9\053\uffc9\055\uffc9" +
    "\056\uffc9\057\uffc9\060\uffc9\061\uffc9\062\uffc9\063\uffc9\064" +
    "\uffc9\001\002\000\004\017\263\001\002\000\004\022\264" +
    "\001\002\000\016\024\062\025\073\040\071\062\047\063" +
    "\104\064\051\001\002\000\102\003\uffc7\011\uffc7\015\uffc7" +
    "\017\uffc7\020\uffc7\023\uffc7\024\uffc7\025\uffc7\031\116\032" +
    "\122\033\111\034\117\035\125\036\114\037\120\040\uffc7" +
    "\041\115\042\113\043\121\044\124\045\110\046\112\047" +
    "\123\053\uffc7\055\uffc7\056\uffc7\057\uffc7\060\uffc7\061\uffc7" +
    "\062\uffc7\063\uffc7\064\uffc7\001\002\000\004\022\267\001" +
    "\002\000\016\024\062\025\073\040\071\062\047\063\104" +
    "\064\051\001\002\000\102\003\uffc6\011\uffc6\015\uffc6\017" +
    "\uffc6\020\uffc6\023\uffc6\024\uffc6\025\uffc6\031\116\032\122" +
    "\033\111\034\117\035\125\036\114\037\120\040\uffc6\041" +
    "\115\042\113\043\121\044\124\045\110\046\112\047\123" +
    "\053\uffc6\055\uffc6\056\uffc6\057\uffc6\060\uffc6\061\uffc6\062" +
    "\uffc6\063\uffc6\064\uffc6\001\002\000\040\011\075\015\055" +
    "\020\042\024\062\025\073\040\071\053\054\055\uffe0\056" +
    "\050\057\043\060\063\061\053\062\047\063\076\064\051" +
    "\001\002\000\004\055\273\001\002\000\004\026\274\001" +
    "\002\000\010\026\uffeb\027\uffeb\030\uffeb\001\002\000\004" +
    "\003\304\001\002\000\010\004\035\005\034\006\036\001" +
    "\002\000\040\011\uffed\015\uffed\020\uffed\024\uffed\025\uffed" +
    "\040\uffed\053\uffed\055\uffed\056\uffed\057\uffed\060\uffed\061" +
    "\uffed\062\uffed\063\uffed\064\uffed\001\002\000\040\011\075" +
    "\015\055\020\042\024\062\025\073\040\071\053\054\055" +
    "\uffe0\056\050\057\043\060\063\061\053\062\047\063\076" +
    "\064\051\001\002\000\004\055\302\001\002\000\004\026" +
    "\303\001\002\000\010\026\uffec\027\uffec\030\uffec\001\002" +
    "\000\004\055\305\001\002\000\004\026\306\001\002\000" +
    "\010\026\uffea\027\uffea\030\uffea\001\002\000\004\054\310" +
    "\001\002\000\010\004\035\005\034\006\036\001\002\000" +
    "\010\003\uffe7\051\uffe7\052\uffe7\001\002\000\004\002\ufffd" +
    "\001\002\000\042\003\uffe0\011\075\015\055\020\042\024" +
    "\062\025\073\040\071\053\054\055\uffe0\056\050\057\043" +
    "\060\063\061\053\062\047\063\076\064\051\001\002\000" +
    "\006\003\316\055\ufff9\001\002\000\004\055\321\001\002" +
    "\000\004\055\317\001\002\000\004\030\320\001\002\000" +
    "\010\026\ufff7\027\ufff7\030\ufff7\001\002\000\004\030\322" +
    "\001\002\000\010\026\ufff8\027\ufff8\030\ufff8\001\002\000" +
    "\004\050\350\001\002\000\004\050\325\001\002\000\010" +
    "\007\021\010\026\051\327\001\002\000\004\051\343\001" +
    "\002\000\042\003\331\011\ufff4\015\ufff4\020\ufff4\024\ufff4" +
    "\025\ufff4\040\ufff4\053\ufff4\055\ufff4\056\ufff4\057\ufff4\060" +
    "\ufff4\061\ufff4\062\ufff4\063\ufff4\064\ufff4\001\002\000\040" +
    "\011\075\015\055\020\042\024\062\025\073\040\071\053" +
    "\054\055\uffe0\056\050\057\043\060\063\061\053\062\047" +
    "\063\076\064\051\001\002\000\042\003\uffe0\011\075\015" +
    "\055\020\042\024\062\025\073\040\071\053\054\055\uffe0" +
    "\056\050\057\043\060\063\061\053\062\047\063\076\064" +
    "\051\001\002\000\006\003\333\055\334\001\002\000\004" +
    "\055\336\001\002\000\004\027\335\001\002\000\010\026" +
    "\ufff2\027\ufff2\030\ufff2\001\002\000\004\027\337\001\002" +
    "\000\010\026\ufff1\027\ufff1\030\ufff1\001\002\000\004\055" +
    "\341\001\002\000\004\027\342\001\002\000\010\026\ufff3" +
    "\027\ufff3\030\ufff3\001\002\000\040\011\ufff6\015\ufff6\020" +
    "\ufff6\024\ufff6\025\ufff6\040\ufff6\053\ufff6\055\ufff6\056\ufff6" +
    "\057\ufff6\060\ufff6\061\ufff6\062\ufff6\063\ufff6\064\ufff6\001" +
    "\002\000\040\011\075\015\055\020\042\024\062\025\073" +
    "\040\071\053\054\055\uffe0\056\050\057\043\060\063\061" +
    "\053\062\047\063\076\064\051\001\002\000\004\055\346" +
    "\001\002\000\004\027\347\001\002\000\010\026\ufff5\027" +
    "\ufff5\030\ufff5\001\002\000\004\051\351\001\002\000\040" +
    "\011\075\015\055\020\042\024\062\025\073\040\071\053" +
    "\054\055\uffe0\056\050\057\043\060\063\061\053\062\047" +
    "\063\076\064\051\001\002\000\004\055\353\001\002\000" +
    "\004\027\354\001\002\000\010\026\ufff0\027\ufff0\030\ufff0" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\352\000\020\002\012\003\007\005\014\006\005\007" +
    "\011\010\006\011\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\005\311\006\005\007\011\010\006\011" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\012\023\013\024\014\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\004\274\016\044\017\063" +
    "\020\065\021\045\022\067\023\056\024\055\025\060\026" +
    "\066\027\057\030\064\031\073\032\043\033\040\034\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\012\027\013\024\014\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\042\037\001\001\000\042\004\071\016" +
    "\044\017\063\020\065\021\045\022\067\023\056\024\055" +
    "\025\060\026\066\027\057\030\064\031\073\032\043\033" +
    "\040\034\051\001\001\000\002\001\001\000\004\047\250" +
    "\001\001\000\016\027\246\030\064\031\073\032\043\033" +
    "\040\034\051\001\001\000\002\001\001\000\042\004\245" +
    "\016\044\017\063\020\065\021\045\022\067\023\056\024" +
    "\055\025\060\026\066\027\057\030\064\031\073\032\043" +
    "\033\040\034\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\025\214\026" +
    "\066\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\027\173\030" +
    "\064\031\073\032\043\033\040\034\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\027" +
    "\165\030\064\031\073\032\043\033\040\034\051\001\001" +
    "\000\002\001\001\000\016\027\164\030\064\031\073\032" +
    "\043\033\040\034\051\001\001\000\004\015\161\001\001" +
    "\000\022\027\104\030\064\031\073\032\043\033\040\034" +
    "\051\035\102\036\101\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\027\154\030\064\031\073" +
    "\032\043\033\040\034\051\001\001\000\016\027\151\030" +
    "\064\031\073\032\043\033\040\034\051\001\001\000\016" +
    "\027\150\030\064\031\073\032\043\033\040\034\051\001" +
    "\001\000\016\027\147\030\064\031\073\032\043\033\040" +
    "\034\051\001\001\000\016\027\146\030\064\031\073\032" +
    "\043\033\040\034\051\001\001\000\016\027\145\030\064" +
    "\031\073\032\043\033\040\034\051\001\001\000\016\027" +
    "\142\030\064\031\073\032\043\033\040\034\051\001\001" +
    "\000\016\027\137\030\064\031\073\032\043\033\040\034" +
    "\051\001\001\000\016\027\136\030\064\031\073\032\043" +
    "\033\040\034\051\001\001\000\016\027\135\030\064\031" +
    "\073\032\043\033\040\034\051\001\001\000\016\027\132" +
    "\030\064\031\073\032\043\033\040\034\051\001\001\000" +
    "\016\027\131\030\064\031\073\032\043\033\040\034\051" +
    "\001\001\000\016\027\130\030\064\031\073\032\043\033" +
    "\040\034\051\001\001\000\016\027\125\030\064\031\073" +
    "\032\043\033\040\034\051\001\001\000\002\001\001\000" +
    "\016\027\127\030\064\031\073\032\043\033\040\034\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\027\134\030\064\031\073" +
    "\032\043\033\040\034\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\027\141\030\064\031\073\032\043\033\040\034\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\027\144" +
    "\030\064\031\073\032\043\033\040\034\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\027" +
    "\153\030\064\031\073\032\043\033\040\034\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\027\104\030\064\031\073\032\043" +
    "\033\040\034\051\035\160\036\101\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\027\163\030\064\031\073" +
    "\032\043\033\040\034\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\044\166\001\001\000\002\001\001" +
    "\000\042\004\170\016\044\017\063\020\065\021\045\022" +
    "\067\023\056\024\055\025\060\026\066\027\057\030\064" +
    "\031\073\032\043\033\040\034\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\027\175\030\064\031\073\032\043\033\040\034" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\025\203\026\066\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\032\206" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\027\216\030" +
    "\064\031\073\032\043\033\040\034\051\001\001\000\004" +
    "\045\217\001\001\000\042\004\223\016\044\017\063\020" +
    "\065\021\045\022\067\023\056\024\055\025\060\026\066" +
    "\027\057\030\064\031\073\032\043\033\040\034\051\001" +
    "\001\000\042\004\221\016\044\017\063\020\065\021\045" +
    "\022\067\023\056\024\055\025\060\026\066\027\057\030" +
    "\064\031\073\032\043\033\040\034\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\027\226\030\064\031\073\032\043\033\040" +
    "\034\051\001\001\000\042\004\227\016\044\017\063\020" +
    "\065\021\045\022\067\023\056\024\055\025\060\026\066" +
    "\027\057\030\064\031\073\032\043\033\040\034\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\027\237\030\064\031\073\032\043\033\040\034" +
    "\051\001\001\000\004\015\234\001\001\000\002\001\001" +
    "\000\016\027\236\030\064\031\073\032\043\033\040\034" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\004\261\016\044\017\063\020" +
    "\065\021\045\022\067\023\056\024\055\025\060\026\066" +
    "\027\057\030\064\031\073\032\043\033\040\034\051\001" +
    "\001\000\016\027\252\030\064\031\073\032\043\033\040" +
    "\034\051\001\001\000\004\046\256\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\004\257" +
    "\016\044\017\063\020\065\021\045\022\067\023\056\024" +
    "\055\025\060\026\066\027\057\030\064\031\073\032\043" +
    "\033\040\034\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\027\264" +
    "\030\064\031\073\032\043\033\040\034\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\027\267\030\064" +
    "\031\073\032\043\033\040\034\051\001\001\000\002\001" +
    "\001\000\042\004\271\016\044\017\063\020\065\021\045" +
    "\022\067\023\056\024\055\025\060\026\066\027\057\030" +
    "\064\031\073\032\043\033\040\034\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\276\001\001\000\004\043\277\001\001" +
    "\000\042\004\300\016\044\017\063\020\065\021\045\022" +
    "\067\023\056\024\055\025\060\026\066\027\057\030\064" +
    "\031\073\032\043\033\040\034\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\310\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\004\313\016\044\017\063\020\065\021\045\022" +
    "\067\023\056\024\055\025\060\026\066\027\057\030\064" +
    "\031\073\032\043\033\040\034\051\001\001\000\004\037" +
    "\314\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\012\325" +
    "\013\024\014\021\001\001\000\002\001\001\000\004\041" +
    "\327\001\001\000\042\004\337\016\044\017\063\020\065" +
    "\021\045\022\067\023\056\024\055\025\060\026\066\027" +
    "\057\030\064\031\073\032\043\033\040\034\051\001\001" +
    "\000\042\004\331\016\044\017\063\020\065\021\045\022" +
    "\067\023\056\024\055\025\060\026\066\027\057\030\064" +
    "\031\073\032\043\033\040\034\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\040\343\001\001" +
    "\000\042\004\344\016\044\017\063\020\065\021\045\022" +
    "\067\023\056\024\055\025\060\026\066\027\057\030\064" +
    "\031\073\032\043\033\040\034\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\004\351\016\044\017\063\020\065\021\045\022" +
    "\067\023\056\024\055\025\060\026\066\027\057\030\064" +
    "\031\073\032\043\033\040\034\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        public Program FINALOBJECT = new Program();
        public IdTable tableIds = new IdTable();
        public ArrayList<Statements> listastatements = new ArrayList();
        public ArrayList<Argument> listaarguments = new ArrayList();
        public ArrayList<Parameter> listaparameters = new ArrayList();
        public ArrayList<ElseIfStatement> listaelseifs = new ArrayList();
        public boolean foundError = false;
        public boolean foundTypeError = false;
        public int bloque = 0;
        public Stack pila_de_bloques = new Stack();
        public String ambito_actual = Integer.toString(bloque);
        public String partir_ambito[];
        public String remove_scope(String[] remove){
            String scope = "";
            for(int i = 0; i < remove.length-1;i++){
                if(i != remove.length-1){
                    if(i == remove.length-2){
                        scope += remove[i];
                    }else{
                        scope += remove[i]+".";
                    }   
                }
            }
            return scope;
        }
	public void syntax_error(Symbol s){
            if(s.sym==0){

            }else{
                System.err.print("Syntax error, Line "+(s.left)+ " Column "+(s.right)+ " Symbol #"+s.sym+". ");
                List<Integer> expected = expected_token_ids();
                String expectedSymbol = "";
                /*System.out.println("Tamaño:"+expected.size());
                for(int i=0;i<expected.size();i++)
                    System.out.println(expected.get(i));*/
                if(expected.size()==1){
                    if(expected.get(0) == sym.TK_EQUALS){
                        expectedSymbol = "=";
                    }else if(expected.get(0) == sym.TK_MINUS){
                        expectedSymbol = "-";
                    }else if(expected.get(0) == sym.TK_GREATERTHAN){
                        expectedSymbol = ">";
                    }else if(expected.get(0) == sym.TK_PRODUCT){
                        expectedSymbol = "*";
                    }else if(expected.get(0) == sym.TK_LESSEQUAL){
                        expectedSymbol = "<=";
                    }else if(expected.get(0) == sym.TK_FOR){
                        expectedSymbol = "For";
                    }else if(expected.get(0) == sym.TK_LESSTHAN){
                        expectedSymbol = "<";
                    }else if(expected.get(0) == sym.TK_NOT){
                        expectedSymbol = "NOT";
                    }else if(expected.get(0) == sym.TK_AND){
                        expectedSymbol = "AND";
                    }else if(expected.get(0) == sym.TK_COMMA){
                        expectedSymbol = ",";
                    }else if(expected.get(0) == sym.TK_OR){
                        expectedSymbol = "or";
                    }else if(expected.get(0) == sym.TK_UNTIL){
                        expectedSymbol = "Until";
                    }else if(expected.get(0) == sym.TK_ELSEIF){
                        expectedSymbol = "ElseIf";
                    }else if(expected.get(0) == sym.TK_IF){
                        expectedSymbol = "If";
                    }else if(expected.get(0) == sym.TK_ID){
                        expectedSymbol = "<ID>";
                    }else if(expected.get(0) == sym.TK_PAROUT){
                        expectedSymbol = "(";
                    }else if(expected.get(0) == sym.TK_BYVAL){
                        expectedSymbol = "ByVal";
                    }else if(expected.get(0) == sym.TK_BOOLEAN){
                        expectedSymbol = "Boolean";
                    }else if(expected.get(0) == sym.TK_DIM){
                        expectedSymbol = "Dim";
                    }else if(expected.get(0) == sym.TK_GREATEREQUAL){
                        expectedSymbol = ">=";
                    }else if(expected.get(0) == sym.TK_EXIT){
                        expectedSymbol = "Exit";
                    }else if(expected.get(0) == sym.TK_LOOP){
                        expectedSymbol = "Loop";
                    }else if(expected.get(0) == sym.TK_NEXT){
                        expectedSymbol = "Next";
                    }else if(expected.get(0) == sym.TK_STRINGVAL){
                        expectedSymbol = "of type string.";
                    }else if(expected.get(0) == sym.TK_RETURN){
                        expectedSymbol = "Return";
                    }else if(expected.get(0) == sym.TK_TRUE){
                        expectedSymbol = "True";
                    }else if(expected.get(0) == sym.TK_PARIN){
                        expectedSymbol = "(";
                    }else if(expected.get(0) == sym.TK_NUMBER){
                        expectedSymbol = "of number type";
                    }else if(expected.get(0) == sym.TK_BYREF){
                        expectedSymbol = "ByRef";
                    }else if(expected.get(0) == sym.TK_STRUCTURE){
                        expectedSymbol = "Structure";
                    }else if(expected.get(0) == sym.TK_TO){
                        expectedSymbol = "To";
                    }else if(expected.get(0) == sym.TK_WHILE){
                        expectedSymbol = "While";
                    }else if(expected.get(0) == sym.TK_DIVISION){
                        expectedSymbol = "%";
                    }else if(expected.get(0) == sym.TK_END){
                        expectedSymbol = "End";
                    }else if(expected.get(0) == sym.TK_SUM){
                        expectedSymbol = "+";
                    }else if(expected.get(0) == sym.TK_FALSE){
                        expectedSymbol = "False";
                    }else if(expected.get(0) == sym.TK_AS){
                        expectedSymbol = "As";
                    }else if(expected.get(0) == sym.TK_THEN){
                        expectedSymbol = "Then";
                    }else if(expected.get(0) == sym.TK_STRING){
                        expectedSymbol = "String";
                    }else if(expected.get(0) == sym.TK_FUNCTION){
                        expectedSymbol = "Function";
                    }else if(expected.get(0) == sym.TK_DO){
                        expectedSymbol = "Do";
                    }else if(expected.get(0) == sym.TK_SUB){
                        expectedSymbol = "Sub";
                    }else if(expected.get(0) == sym.TK_INTEGER){
                        expectedSymbol = "Integer";
                    }else if(expected.get(0) == sym.TK_XOR){
                        expectedSymbol = "Xor";
                    }else if(expected.get(0) == sym.TK_AMPERSAND){
                        expectedSymbol = "&";
                    }
                    System.err.println("Expected symbol "+expectedSymbol );
                }else{
                    if(s.sym == sym.TK_ID){
                        System.err.println("Expected definition of type for ID or found a mispelled reserved word.");
                    }
                    else if(s.sym == sym.TK_PARIN || s.sym == sym.TK_PAROUT){
                        System.err.println("Expected an expression or call.");
                    }
                    else if(s.sym == sym.TK_SUM || s.sym == sym.TK_MINUS || s.sym == sym.TK_DIVISION || s.sym == sym.TK_PRODUCT  ||s.sym == sym.TK_AMPERSAND){
                        System.err.println("Unplaced, lacking or unexpected expression.");
                    }
                    else if(s.sym == sym.TK_GREATERTHAN || s.sym == sym.TK_GREATEREQUAL || s.sym == sym.TK_LESSTHAN || s.sym == sym.TK_LESSEQUAL ||s.sym == sym.TK_NOTEQUAL ){
                        System.err.println("Unexpected evaluation.");
                    }
                    else if(s.sym == sym.TK_EQUALS){
                        System.err.println("Unexpected evaluation or assignation");
                    }
                    else{
                        System.err.println("Check code's syntax;");
                    }

                }


                
            }
            
            
            
	}

        public void unrecovered_syntax_error(Symbol cur_token) {
            if(cur_token.sym==0){

            }else{
                System.err.println("Error with code's syntax in line: " + (cur_token.left + 1) + ", col: " + (cur_token.right + 1));
            }
            
            
        }

        public void report_fatal_error(String message, Object info) {
            
        }

        public void report_error(String message, Object info) {
            
        }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // initial ::= program 
            {
              Object RESULT =null;
		 System.out.println("Programa en Visual Basic"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("initial",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= initial EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= function_declarations 
            {
              Program RESULT =null;
		int functionDeclarationsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int functionDeclarationsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunctionDeclarations functionDeclarations = (FunctionDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Program"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= 
            {
              Program RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // function_declarations ::= function_declaration function_declarations 
            {
              FunctionDeclarations RESULT =null;
		int functionDeclarationleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int functionDeclarationright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FunctionDeclaration functionDeclaration = (FunctionDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int functionDeclarationsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int functionDeclarationsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunctionDeclarations functionDeclarations = (FunctionDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Func decls");FINALOBJECT.getDeclarations().add(functionDeclaration);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declarations",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // function_declaration ::= structure_statement 
            {
              FunctionDeclaration RESULT =null;
		int structureStatementleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int structureStatementright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunctionDeclaration structureStatement = (FunctionDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!foundError){RESULT = new StructureStatement(((StructureStatement)structureStatement).getStructure(),((StructureStatement)structureStatement).getId(),((StructureStatement)structureStatement).getEnd_structure(),((StructureStatement)structureStatement).getStatements());FINALOBJECT.getDeclarations().add(RESULT);} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // function_declaration ::= sub_statement 
            {
              FunctionDeclaration RESULT =null;
		int subStatementleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int subStatementright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunctionDeclaration subStatement = (FunctionDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!foundError){RESULT = new SubStatement(((SubStatement)subStatement).getSub(),((SubStatement)subStatement).getId(),((SubStatement)subStatement).getParameters(),((SubStatement)subStatement).getStatements(),((SubStatement)subStatement).getEndSub());FINALOBJECT.getDeclarations().add(RESULT);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // function_declaration ::= function_statement 
            {
              FunctionDeclaration RESULT =null;
		int functionStatementleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int functionStatementright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunctionDeclaration functionStatement = (FunctionDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!foundError){RESULT = new FunctionStatement(((FunctionStatement)functionStatement).getFunction(),((FunctionStatement)functionStatement).getId(),((FunctionStatement)functionStatement).getParameters(),((FunctionStatement)functionStatement).getStatements(),((FunctionStatement)functionStatement).getDataType(),"End Function");FINALOBJECT.getDeclarations().add(RESULT);  }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$0 ::= 
            {
              FunctionDeclaration RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statements stmnts = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
if(!foundError){bloque = 0;
                                                                ambito_actual = Integer.toString(bloque);
                                                                tableIds.addNode(new IdNode(i,"record",ambito_actual));}
                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // structure_statement ::= TK_STRUCTURE TK_ID statements NT$0 TK_END TK_STRUCTURE 
            {
              FunctionDeclaration RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (FunctionDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements stmnts = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		if(!foundError){RESULT = new StructureStatement("Structure",i,"End Structure",listastatements);listastatements = new ArrayList();}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("structure_statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // structure_statement ::= TK_STRUCTURE TK_ID statements error TK_END TK_STRUCTURE 
            {
              FunctionDeclaration RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements stmnts = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		System.err.println("Error inside Structure statement");foundError=true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("structure_statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$1 ::= 
            {
              FunctionDeclaration RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int prmtsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int prmtsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object prmts = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
if(!foundError){
                                                                            bloque++;
                                                                            ambito_actual += "." + Integer.toString(bloque);
                                                                            String tipo_sub = "";
                                                                            for(int k = 0; k < listaparameters.size(); k++){
                                                                                if(k != listaparameters.size()-1){
                                                                                    tipo_sub += listaparameters.get(k).getDataType() + "x";
                                                                                }else{
                                                                                    tipo_sub += listaparameters.get(k).getDataType();
                                                                                }
                                                                            }
                                                                            if (!tableIds.addNode(new IdNode(i,tipo_sub+"->void",ambito_actual))){
                                                                                System.err.println("Function or Sub"+i+" has already been defined");
                                                                            }
                                                                            pila_de_bloques.push(bloque);
                                                                            bloque = 0;
                                                                        }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sub_statement ::= TK_SUB TK_ID TK_PARIN parameters TK_PAROUT NT$1 statements TK_END TK_SUB 
            {
              FunctionDeclaration RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (FunctionDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int prmtsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int prmtsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object prmts = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statements stmnts = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		if(!foundError){
                                                                                                                RESULT = new SubStatement("Sub",i,listaparameters,listastatements,"End Sub");
                                                                                                                listastatements = new ArrayList();listaparameters = new ArrayList();
                                                                                                                partir_ambito = ambito_actual.split("\\.");
                                                                                                                ambito_actual = remove_scope(partir_ambito);
                                                                                                                bloque = (int) pila_de_bloques.pop();
                                                                                                            } 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$2 ::= 
            {
              FunctionDeclaration RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
if(!foundError){
                                                            bloque++;
                                                            ambito_actual += "." + Integer.toString(bloque);
                                                            if (!tableIds.addNode(new IdNode(i, "void->void", ambito_actual))){
                                                                System.err.println("Function or Sub "+i+" has already been defined");
                                                            }
                                                            pila_de_bloques.push(bloque);
                                                            bloque = 0;
                                                        }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sub_statement ::= TK_SUB TK_ID TK_PARIN TK_PAROUT NT$2 statements TK_END TK_SUB 
            {
              FunctionDeclaration RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (FunctionDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statements stmnts = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		if(!foundError){
                                                                                                                    RESULT = new SubStatement("Sub",i,null,listastatements,"End Sub");
                                                                                                                    listastatements = new ArrayList();
                                                                                                                    partir_ambito = ambito_actual.split("\\.");
                                                                                                                    ambito_actual = remove_scope(partir_ambito);
                                                                                                                    bloque = (int) pila_de_bloques.pop();
                                                                                                                }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sub_statement ::= TK_SUB TK_ID TK_PARIN TK_PAROUT error statements TK_END TK_SUB 
            {
              FunctionDeclaration RESULT =null;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statements stmnts = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		System.err.println("Error inside Sub statement");foundError=true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sub_statement ::= TK_SUB TK_ID TK_PARIN TK_PAROUT error statements error TK_END TK_SUB 
            {
              FunctionDeclaration RESULT =null;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements stmnts = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		System.err.println("Several errors inside Sub statement");foundError=true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sub_statement ::= TK_SUB error TK_PARIN TK_PAROUT statements TK_END TK_SUB 
            {
              FunctionDeclaration RESULT =null;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statements stmnts = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		System.err.println("Erroneous Sub declaration.");foundError=true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$3 ::= 
            {
              FunctionDeclaration RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int prmtsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int prmtsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object prmts = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
if(!foundError){
                                                                                                            bloque++;
                                                                                                            ambito_actual += "."+Integer.toString(bloque);
                                                                                                            String tipo_funcion = "";
                                                                                                            for(int k = 0; k < listaparameters.size(); k++){
                                                                                                                if(k != listaparameters.size()-1){
                                                                                                                    tipo_funcion += listaparameters.get(k).getDataType() + "x";
                                                                                                                }else{
                                                                                                                    tipo_funcion += listaparameters.get(k).getDataType();
                                                                                                                }
                                                                                                            }
                                                                                                            if(!tableIds.addNode(new IdNode(i, tipo_funcion+"->"+type,ambito_actual))){
                                                                                                                System.err.println("Function "+i+" already exists "+tipo_funcion+"->"+type);
                                                                                                            }
                                                                                                            pila_de_bloques.push(bloque);
                                                                                                            bloque = 0;
                                                                                                      }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // function_statement ::= TK_FUNCTION TK_ID TK_PARIN parameters TK_PAROUT TK_AS data_type NT$3 statements TK_END TK_FUNCTION 
            {
              FunctionDeclaration RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (FunctionDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int prmtsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int prmtsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object prmts = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statements stmnts = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		if(!foundError){
                                                                                                                                                RESULT = new FunctionStatement("Function",i,listaparameters,listastatements,type,"End Function"); 
                                                                                                                                                listaparameters = new ArrayList();listastatements = new ArrayList();
                                                                                                                                                partir_ambito = ambito_actual.split("\\.");
                                                                                                                                                ambito_actual = remove_scope(partir_ambito);
                                                                                                                                                bloque = (int) pila_de_bloques.pop();
                                                                                                                                            }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$4 ::= 
            {
              FunctionDeclaration RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
if(!foundError){
                                                                                            bloque++;
                                                                                            ambito_actual += "."+Integer.toString(bloque);
                                                                                            if(!tableIds.addNode(new IdNode(i, "void->"+type,ambito_actual))){
                                                                                                System.err.println("Function "+i+" already exists "+"void->"+type);
                                                                                            }
                                                                                            pila_de_bloques.push(bloque);
                                                                                            bloque = 0;
                                                                                            
                                                                                      }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // function_statement ::= TK_FUNCTION TK_ID TK_PARIN TK_PAROUT TK_AS data_type NT$4 statements TK_END TK_FUNCTION 
            {
              FunctionDeclaration RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (FunctionDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statements stmnts = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		if(!foundError){
                                                                                                                                RESULT = new FunctionStatement("Function",i,null,listastatements,type,"End Function"); 
                                                                                                                                listastatements = new ArrayList();
                                                                                                                                partir_ambito = ambito_actual.split("\\.");
                                                                                                                                ambito_actual = remove_scope(partir_ambito);
                                                                                                                                bloque = (int) pila_de_bloques.pop();
                                                                                                                             }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // function_statement ::= TK_FUNCTION TK_ID TK_PARIN parameters error TK_PAROUT statements TK_END TK_FUNCTION 
            {
              FunctionDeclaration RESULT =null;
		int prmtsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int prmtsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object prmts = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statements stmnts = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		System.err.println("Erroneous Function declaration.");foundError=true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // function_statement ::= TK_FUNCTION TK_ID TK_PARIN TK_PAROUT statements error TK_END TK_FUNCTION 
            {
              FunctionDeclaration RESULT =null;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements stmnts = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		System.err.println("Error inside Function statement.");foundError=true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // parameters ::= parameter TK_COMMA parameters 
            {
              Object RESULT =null;
		int prmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int prmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Parameter prmt = (Parameter)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int prmtsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int prmtsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object prmts = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(!foundError){listaparameters.add(prmt);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // parameters ::= parameter 
            {
              Object RESULT =null;
		int prmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int prmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Parameter prmt = (Parameter)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(!foundError){listaparameters.add(prmt);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // parameter ::= parameter_type TK_ID TK_AS data_type 
            {
              Parameter RESULT =null;
		int prmt_typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int prmt_typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String prmt_type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!foundError){RESULT = new Parameter(prmt_type, type,i);} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // parameter_type ::= TK_BYVAL 
            {
              String RESULT =null;
		 if(!foundError){RESULT = "ByVal";}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // parameter_type ::= TK_BYREF 
            {
              String RESULT =null;
		 if(!foundError){RESULT = "ByRef";}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // data_type ::= TK_INTEGER 
            {
              String RESULT =null;
		 if(!foundError){RESULT = "Integer";} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // data_type ::= TK_BOOLEAN 
            {
              String RESULT =null;
		 if(!foundError){RESULT = "Boolean";} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // data_type ::= TK_STRING 
            {
              String RESULT =null;
		 if(!foundError){RESULT = "String";} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statements ::= statement statements 
            {
              Statements RESULT =null;
		int stmntleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stmntright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statements stmnt = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statements stmnts = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!foundError){listastatements.add(stmnt);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statements ::= 
            {
              Statements RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement ::= if_statement 
            {
              Statements RESULT =null;
		int ifStatementleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ifStatementright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statements ifStatement = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!foundError){
                                                            RESULT = ifStatement;
                                                          } 
                                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statement ::= for_statement 
            {
              Statements RESULT =null;
		int forStatementleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int forStatementright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statements forStatement = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!foundError){RESULT = forStatement;} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // statement ::= do_statement 
            {
              Statements RESULT =null;
		int doStatementleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int doStatementright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statements doStatement = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!foundError){RESULT = doStatement;} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // statement ::= write_statement 
            {
              Statements RESULT =null;
		int writeStatementleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int writeStatementright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statements writeStatement = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!foundError){RESULT = writeStatement;} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // statement ::= read_statement 
            {
              Statements RESULT =null;
		int readStatementleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int readStatementright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statements readStatement = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!foundError){RESULT = readStatement;} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // statement ::= variable_declaration 
            {
              Statements RESULT =null;
		int var_declareleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var_declareright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VariableDeclaration var_declare = (VariableDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!foundError){RESULT = var_declare;} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // statement ::= expression 
            {
              Statements RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!foundError){RESULT = expr;}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // statement ::= TK_RETURN expression 
            {
              Statements RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!foundError){RESULT = new ReturnExpression("Return",exp);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // statement ::= TK_EXIT 
            {
              Statements RESULT =null;
		if(!foundError){RESULT = new ExitStatement("Exit");} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // write_statement ::= TK_WRITE TK_PARIN literal_expression TK_PAROUT 
            {
              Statements RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LiteralExpression le = (LiteralExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		if(!foundError){RESULT = new WriteStatement("Write",le,null);} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // write_statement ::= TK_WRITE TK_PARIN TK_ID TK_PAROUT 
            {
              Statements RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		if(!foundError){RESULT = new WriteStatement("Write",null,i);}  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // write_statement ::= TK_WRITE TK_PARIN error TK_PAROUT 
            {
              Statements RESULT =null;
		System.err.println("\t\t\t\t\t  Problem near Console.Write()"); foundError=true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // read_statement ::= TK_READ TK_PARIN TK_ID TK_PAROUT 
            {
              Statements RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		if(!foundError){RESULT = new ReadStatement("Read",i);} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_statement",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // read_statement ::= TK_READ TK_PARIN error TK_PAROUT 
            {
              Statements RESULT =null;
		System.err.println("\t\t\t\t\t  Problem near Console.Read().");foundError=true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_statement",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // if_statement ::= begin_if TK_END TK_IF 
            {
              Statements RESULT =null;
		int begleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int begright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IfStatement beg = (IfStatement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		if(!foundError){
                                                                                                                 RESULT = new IfStatement("If",beg.getExpression(),"Then",null,listastatements,null,null,"End IF");
                                                                                                                 listastatements = new ArrayList();
                                                                                                                 partir_ambito = ambito_actual.split("\\.");
                                                                                                                 ambito_actual = remove_scope(partir_ambito);
                                                                                                                 bloque = (int) pila_de_bloques.pop();
                                                                                                               }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$5 ::= 
            {
              IfStatement RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
if(!foundError){
                                                RESULT = new IfStatement("Begin If",expr,"","",null,null,null,"");
                                                bloque++;
                                                ambito_actual += "."+Integer.toString(bloque);
                                                pila_de_bloques.push(bloque);
                                                bloque = 0;
                                             }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // begin_if ::= TK_IF expression NT$5 TK_THEN statements 
            {
              IfStatement RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (IfStatement) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statements stmnts = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_if",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$6 ::= 
            {
              Statements RESULT =null;
		int var_declareleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int var_declareright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VariableDeclaration var_declare = (VariableDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
if(!foundError){
                                                                                            bloque++;
                                                                                            ambito_actual += "."+Integer.toString(bloque);
                                                                                            pila_de_bloques.push(bloque);
                                                                                            bloque = 0;
                                                                                        }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // for_statement ::= TK_FOR variable_declaration TK_TO expression NT$6 statements TK_NEXT 
            {
              Statements RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Statements) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int var_declareleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int var_declareright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		VariableDeclaration var_declare = (VariableDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statements stmnts = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		if(!foundError){
                                                                                                                                                    RESULT = new ForStatement("For",var_declare,"To",expr,listastatements,"Next"); 
                                                                                                                                                    listastatements = new ArrayList();
                                                                                                                                                    partir_ambito = ambito_actual.split("\\.");
                                                                                                                                                    ambito_actual = remove_scope(partir_ambito);
                                                                                                                                                    bloque = (int) pila_de_bloques.pop();
                                                                                                                                                    
                                                                                                                                               }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // for_statement ::= TK_FOR error TK_TO expression statements TK_NEXT 
            {
              Statements RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statements stmnts = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.err.println("Error in variable declaration by For.");foundError=true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // for_statement ::= TK_FOR variable_declaration TK_TO expression error statements TK_NEXT 
            {
              Statements RESULT =null;
		int var_declareleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int var_declareright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		VariableDeclaration var_declare = (VariableDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statements stmnts = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.err.println("Check syntax inside For.");foundError=true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$7 ::= 
            {
              Statements RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
if(!foundError){
                                                        bloque++;
                                                        ambito_actual += "."+Integer.toString(bloque);
                                                        pila_de_bloques.push(bloque);
                                                        bloque = 0;
                                                    }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // do_statement ::= TK_DO TK_WHILE expression NT$7 statements TK_LOOP 
            {
              Statements RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Statements) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statements stmnts = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		if(!foundError){ 
                                                                                                            RESULT = new DoStatement("Do","While",listastatements,"Loop",null,expr);
                                                                                                            listastatements = new ArrayList();
                                                                                                            partir_ambito = ambito_actual.split("\\.");
                                                                                                            ambito_actual = remove_scope(partir_ambito);
                                                                                                            bloque = (int) pila_de_bloques.pop();
                                                                                                      }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("do_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$8 ::= 
            {
              Statements RESULT =null;
if(!foundError){
                                bloque++;
                                ambito_actual += "."+Integer.toString(bloque);
                                pila_de_bloques.push(bloque);
                                bloque = 0;
                            }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // do_statement ::= TK_DO NT$8 statements TK_LOOP TK_UNTIL expression 
            {
              Statements RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Statements) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements stmnts = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!foundError){
                                                                                                           RESULT = new DoStatement("Do",null,listastatements,"Loop","Until",expr);
                                                                                                           listastatements = new ArrayList();
                                                                                                           partir_ambito = ambito_actual.split("\\.");
                                                                                                           ambito_actual = remove_scope(partir_ambito);
                                                                                                           bloque = (int) pila_de_bloques.pop();
                                                                                                      }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("do_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // do_statement ::= TK_DO error TK_LOOP TK_UNTIL expression 
            {
              Statements RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.err.println("Error inside Do Loop");foundError=true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("do_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // do_statement ::= TK_DO TK_WHILE error TK_LOOP 
            {
              Statements RESULT =null;
		System.err.println("Error in Do While");foundError=true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("do_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // do_statement ::= TK_DO TK_WHILE expression error 
            {
              Statements RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.err.println("Error after Do While statement ");foundError=true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("do_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // variable_declaration ::= variable_declarator TK_COMMA variable_declaration 
            {
              VariableDeclaration RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VariableDeclarator var = (VariableDeclarator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int var_declareleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var_declareright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VariableDeclaration var_declare = (VariableDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(!foundError){RESULT = new VariableDeclaration(var,var_declare);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // variable_declaration ::= variable_declarator 
            {
              VariableDeclaration RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VariableDeclarator var = (VariableDeclarator)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(!foundError){RESULT = new VariableDeclaration(var,null);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // variable_declarator ::= TK_DIM TK_ID TK_AS data_type TK_EQUALS expression 
            {
              VariableDeclarator RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(!foundError){RESULT = new VariableDeclarator("Dim",id,"As",type,"=",expr);
                                                                                                               String auxtype = expr.bringType();
                                                                                                               if(auxtype==type){
                                                                                                                    if(!tableIds.addNode(new IdNode(id,type,ambito_actual))){//revisar si expr tiene el mismo type que id
                                                                                                                         System.err.println("Variable id "+id+" already exists.");//No estoy seguro si foundError debe cambiar
                                                                                                                    }
                                                                                                               }else{ 
                                                                                                                    if(auxtype=="none"){ 
                                                                                                                        auxtype = tableIds.searchNodeType(expr.getId(),ambito_actual);
                                                                                                                        if(!(auxtype==type))
                                                                                                                            System.err.println("Error with variable "+id+". Type "+auxtype+" has no implicit conversion to "+type+".");
                                                                                                                    }else   
                                                                                                                        System.err.println("Error with variable "+id+". Type "+auxtype+" has no implicit conversion to "+type+".");
                                                                                                               }
                                                                                                            }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declarator",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // variable_declarator ::= TK_ID TK_AS data_type TK_EQUALS expression 
            {
              VariableDeclarator RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(!foundError){RESULT = new VariableDeclarator(id,"As",type,"=",expr);
                                                                                                                String auxtype = expr.bringType();
                                                                                                               if(auxtype==type){
                                                                                                                    if(!tableIds.addNode(new IdNode(id,type,ambito_actual))){//revisar si expr tiene el mismo type que id
                                                                                                                         System.err.println("Variable id "+id+" already exists.");//No estoy seguro si foundError debe cambiar
                                                                                                                    }
                                                                                                               }else{ 
                                                                                                                    if(auxtype=="none"){ 
                                                                                                                        auxtype = tableIds.searchNodeType(expr.getId(),ambito_actual);
                                                                                                                        if(!(auxtype==type))
                                                                                                                            System.err.println("Error with variable "+id+". Type "+auxtype+" has no implicit conversion to "+type+".");
                                                                                                                    }else   
                                                                                                                        System.err.println("Error with variable "+id+". Type "+auxtype+" has no implicit conversion to "+type+".");
                                                                                                               }
                                                                                                            }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declarator",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // variable_declarator ::= TK_DIM TK_ID TK_EQUALS expression 
            {
              VariableDeclarator RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(!foundError){RESULT = new VariableDeclarator("Dim",id,"=",expr);
                                                                                                               String auxtype1 =tableIds.searchNodeType(id,ambito_actual);
                                                                                                               String auxtype2 = expr.bringType();
                                                                                                               if(auxtype2=="none"){ auxtype2 = tableIds.searchNodeType(expr.getId(),ambito_actual);}
                                                                                                               if(auxtype1 != auxtype2){System.err.println("Error with variable "+id+". Type "+auxtype2+" has no implicit conversion to "+auxtype1+".");}
                                                                                                            } 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declarator",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // variable_declarator ::= TK_ID TK_EQUALS expression 
            {
              VariableDeclarator RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(!foundError){RESULT = new VariableDeclarator(id,"=",expr);
                                                                                                               String auxtype1 =tableIds.searchNodeType(id,ambito_actual);
                                                                                                               String auxtype2 = expr.bringType();
                                                                                                               if(auxtype2=="none"){ auxtype2 = tableIds.searchNodeType(expr.getId(),ambito_actual);}
                                                                                                               if(auxtype1 != auxtype2){System.err.println("Error with variable "+id+". Type "+auxtype2+" has no implicit conversion to "+auxtype1+".");}
                                                                                                            }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declarator",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expression ::= numeric_expression 
            {
              Expression RESULT =null;
		int num_expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int num_expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NumericExpression num_exp = (NumericExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(!foundError){RESULT = new NumericExpression(((NumericExpression)num_exp).getExpression1(),((NumericExpression)num_exp).getExpression2(),((NumericExpression)num_exp).getOperador(),null);} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expression ::= boolean_expression 
            {
              Expression RESULT =null;
		int bool_expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bool_expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BooleanExpression bool_exp = (BooleanExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!foundError){RESULT = new BooleanExpression(((BooleanExpression)bool_exp).getExpression1(), ((BooleanExpression)bool_exp).getOperador(), ((BooleanExpression)bool_exp).getExpression2(),null);} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expression ::= logical_expression 
            {
              Expression RESULT =null;
		int logic_expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int logic_expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LogicalExpression logic_exp = (LogicalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!foundError){RESULT = new LogicalExpression(((LogicalExpression)logic_exp).isValue(),((LogicalExpression)logic_exp).getOperador(),((LogicalExpression)logic_exp).getExpression1(),((LogicalExpression)logic_exp).getExpression2(),null);} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expression ::= literal_expression 
            {
              Expression RESULT =null;
		int lit_expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lit_expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LiteralExpression lit_exp = (LiteralExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!foundError){RESULT = new LiteralExpression(((LiteralExpression)lit_exp).getStringval(),((LiteralExpression)lit_exp).getNumber(),null);} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expression ::= TK_ID 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!foundError){RESULT = new Expression(id);} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expression ::= function_call 
            {
              Expression RESULT =null;
		int callleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int callright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression call = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!foundError){RESULT = new FunctionCall(((FunctionCall)call).getArguments(),((FunctionCall)call).getId());} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // boolean_expression ::= expression TK_GREATERTHAN expression 
            {
              BooleanExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(!foundError){RESULT = new BooleanExpression(e1,">",e2,null);
                                                                                            
                                                                                            if(!(e1 instanceof LiteralExpression)){
                                                                                                if(!tableIds.searchScope(e1.getId(),ambito_actual)){
                                                                                                    System.err.println("Variable "+e1.getId()+" has not been declared in this scope");
                                                                                                }else{
                                                                                                    String auxtype = e1.bringType();
                                                                                                    if(auxtype != "Integer"){
                                                                                                        if(auxtype == "none"){
                                                                                                            auxtype = tableIds.searchNodeType(e1.getId(),ambito_actual);
                                                                                                            if(auxtype != "Integer"){
                                                                                                                System.err.println("Error with variable "+e1.getId()+", not an Integer. Is "+auxtype+".");
                                                                                                            }
                                                                                                        }else{
                                                                                                            System.err.println("Error at *expression1* > *expression2*, expression1 is not an Integer. Is "+auxtype+".");
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            
                                                                                            if(!(e2 instanceof LiteralExpression)){
                                                                                                if(!tableIds.searchScope(e1.getId(),ambito_actual)){
                                                                                                    System.err.println("Variable "+e2.getId()+" has not been declared in this scope");
                                                                                                }else{
                                                                                                    String auxtype2 = e2.bringType();
                                                                                                    if(auxtype2 != "Integer"){
                                                                                                        if(auxtype2 == "none"){
                                                                                                            auxtype2 = tableIds.searchNodeType(e2.getId(),ambito_actual);
                                                                                                            if(auxtype2 != "Integer"){
                                                                                                                System.err.println("Error with variable "+e2.getId()+", is not an Integer. Is "+auxtype2+".");
                                                                                                            }
                                                                                                        }
                                                                                                    }else{
                                                                                                        System.err.println("Error at *expression1* > *expression2*, expression2 is not an Integer. Is "+auxtype2+".");
                                                                                                    }
                                                                                                }
                                                                                            }                                                                                   
                                                                                        }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // boolean_expression ::= expression TK_LESSTHAN expression 
            {
              BooleanExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(!foundError){RESULT = new BooleanExpression(e1,"<",e2,null);
                                                                                            if(!(e1 instanceof LiteralExpression)){
                                                                                                if(!tableIds.searchScope(e1.getId(),ambito_actual)){
                                                                                                    System.err.println("Variable "+e1.getId()+" has not been declared in this scope");
                                                                                                }else{
                                                                                                    String auxtype = e1.bringType();
                                                                                                    if(auxtype != "Integer"){
                                                                                                        if(auxtype == "none"){
                                                                                                            auxtype = tableIds.searchNodeType(e1.getId(),ambito_actual);
                                                                                                            if(auxtype != "Integer"){
                                                                                                                System.err.println("Error with variable "+e1.getId()+", not an Integer. Is "+auxtype+".");
                                                                                                            }
                                                                                                        }else{
                                                                                                            System.err.println("Error at *expression1* < *expression2*, expression1 is not an Integer. Is "+auxtype+".");
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            if(!(e2 instanceof LiteralExpression)){
                                                                                                if(!tableIds.searchScope(e1.getId(),ambito_actual)){
                                                                                                    System.err.println("Variable "+e2.getId()+" has not been declared in this scope");
                                                                                                }else{
                                                                                                    String auxtype2 = e2.bringType();
                                                                                                    if(auxtype2 != "Integer"){
                                                                                                        if(auxtype2 == "none"){
                                                                                                            auxtype2 = tableIds.searchNodeType(e2.getId(),ambito_actual);
                                                                                                            if(auxtype2 != "Integer"){
                                                                                                                System.err.println("Error with variable "+e2.getId()+", is not an Integer. Is "+auxtype2+".");
                                                                                                            }
                                                                                                        }
                                                                                                    }else{
                                                                                                        System.err.println("Error at *expression1* < *expression2*, expression2 is not an Integer. Is "+auxtype2+".");
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // boolean_expression ::= expression TK_GREATEREQUAL expression 
            {
              BooleanExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(!foundError){RESULT = new BooleanExpression(e1,">=",e2,null);
                                                                                            if(!(e1 instanceof LiteralExpression)){
                                                                                                if(!tableIds.searchScope(e1.getId(),ambito_actual)){
                                                                                                    System.err.println("Variable "+e1.getId()+" has not been declared in this scope");
                                                                                                }else{
                                                                                                    String auxtype = e1.bringType();
                                                                                                    if(auxtype != "Integer"){
                                                                                                        if(auxtype == "none"){
                                                                                                            auxtype = tableIds.searchNodeType(e1.getId(),ambito_actual);
                                                                                                            if(auxtype != "Integer"){
                                                                                                                System.err.println("Error with variable "+e1.getId()+", not an Integer. Is "+auxtype+".");
                                                                                                            }
                                                                                                        }else{
                                                                                                            System.err.println("Error at *expression1* >= *expression2*, expression1 is not an Integer. Is "+auxtype+".");
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            if(!(e2 instanceof LiteralExpression)){
                                                                                                if(!tableIds.searchScope(e1.getId(),ambito_actual)){
                                                                                                    System.err.println("Variable "+e2.getId()+" has not been declared in this scope");
                                                                                                }else{
                                                                                                    String auxtype2 = e2.bringType();
                                                                                                    if(auxtype2 != "Integer"){
                                                                                                        if(auxtype2 == "none"){
                                                                                                            auxtype2 = tableIds.searchNodeType(e2.getId(),ambito_actual);
                                                                                                            if(auxtype2 != "Integer"){
                                                                                                                System.err.println("Error with variable "+e2.getId()+", is not an Integer. Is "+auxtype2+".");
                                                                                                            }
                                                                                                        }
                                                                                                    }else{
                                                                                                        System.err.println("Error at *expression1* >= *expression2*, expression2 is not an Integer. Is "+auxtype2+".");
                                                                                                    }
                                                                                                }
                                                                                            } 
                                                                                        }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // boolean_expression ::= expression TK_LESSEQUAL expression 
            {
              BooleanExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(!foundError){RESULT = new BooleanExpression(e1,"<=",e2,null);
                                                                                            if(!(e1 instanceof LiteralExpression)){
                                                                                                if(!tableIds.searchScope(e1.getId(),ambito_actual)){
                                                                                                    System.err.println("Variable "+e1.getId()+" has not been declared in this scope");
                                                                                                }else{
                                                                                                    String auxtype = e1.bringType();
                                                                                                    if(auxtype != "Integer"){
                                                                                                        if(auxtype == "none"){
                                                                                                            auxtype = tableIds.searchNodeType(e1.getId(),ambito_actual);
                                                                                                            if(auxtype != "Integer"){
                                                                                                                System.err.println("Error with variable "+e1.getId()+", not an Integer. Is "+auxtype+".");
                                                                                                            }
                                                                                                        }else{
                                                                                                            System.err.println("Error at *expression1* <= *expression2*, expression1 is not an Integer. Is "+auxtype+".");
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            if(!(e2 instanceof LiteralExpression)){
                                                                                                if(!tableIds.searchScope(e1.getId(),ambito_actual)){
                                                                                                    System.err.println("Variable "+e2.getId()+" has not been declared in this scope");
                                                                                                }else{
                                                                                                    String auxtype2 = e2.bringType();
                                                                                                    if(auxtype2 != "Integer"){
                                                                                                        if(auxtype2 == "none"){
                                                                                                            auxtype2 = tableIds.searchNodeType(e2.getId(),ambito_actual);
                                                                                                            if(auxtype2 != "Integer"){
                                                                                                                System.err.println("Error with variable "+e2.getId()+", is not an Integer. Is "+auxtype2+".");
                                                                                                            }
                                                                                                        }
                                                                                                    }else{
                                                                                                        System.err.println("Error at *expression1* <= *expression2*, expression2 is not an Integer. Is "+auxtype2+".");
                                                                                                    }
                                                                                                }
                                                                                            } 
                                                                                        }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // boolean_expression ::= expression TK_EQUALS expression 
            {
              BooleanExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(!foundError){RESULT = new BooleanExpression(e1,"=",e2,null);
                                                                                            if(!(e1 instanceof LiteralExpression)){
                                                                                                if(!tableIds.searchScope(e1.getId(),ambito_actual)){
                                                                                                    System.err.println("Variable "+e1.getId()+" has not been declared in this scope");
                                                                                                }else{
                                                                                                    String auxtype = e1.bringType();
                                                                                                    if(auxtype != "Integer"){
                                                                                                        if(auxtype == "none"){
                                                                                                            auxtype = tableIds.searchNodeType(e1.getId(),ambito_actual);
                                                                                                            if(auxtype != "Integer"){
                                                                                                                System.err.println("Error with variable "+e1.getId()+", not an Integer. Is "+auxtype+".");
                                                                                                            }
                                                                                                        }else{
                                                                                                            System.err.println("Error at *expression1* = *expression2*, expression1 is not an Integer. Is "+auxtype+".");
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            if(!(e2 instanceof LiteralExpression)){
                                                                                                if(!tableIds.searchScope(e1.getId(),ambito_actual)){
                                                                                                    System.err.println("Variable "+e2.getId()+" has not been declared in this scope");
                                                                                                }else{
                                                                                                    String auxtype2 = e2.bringType();
                                                                                                    if(auxtype2 != "Integer"){
                                                                                                        if(auxtype2 == "none"){
                                                                                                            auxtype2 = tableIds.searchNodeType(e2.getId(),ambito_actual);
                                                                                                            if(auxtype2 != "Integer"){
                                                                                                                System.err.println("Error with variable "+e2.getId()+", is not an Integer. Is "+auxtype2+".");
                                                                                                            }
                                                                                                        }
                                                                                                    }else{
                                                                                                        System.err.println("Error at *expression1* = *expression2*, expression2 is not an Integer. Is "+auxtype2+".");
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // boolean_expression ::= expression TK_NOTEQUAL expression 
            {
              BooleanExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(!foundError){RESULT = new BooleanExpression(e1,"<>",e2,null);
                                                                                            if(!(e1 instanceof LiteralExpression)){
                                                                                                if(!tableIds.searchScope(e1.getId(),ambito_actual)){
                                                                                                    System.err.println("Variable "+e1.getId()+" has not been declared in this scope");
                                                                                                }else{
                                                                                                    String auxtype = e1.bringType();
                                                                                                    if(auxtype != "Integer"){
                                                                                                        if(auxtype == "none"){
                                                                                                            auxtype = tableIds.searchNodeType(e1.getId(),ambito_actual);
                                                                                                            if(auxtype != "Integer"){
                                                                                                                System.err.println("Error with variable "+e1.getId()+", not an Integer. Is "+auxtype+".");
                                                                                                            }
                                                                                                        }else{
                                                                                                            System.err.println("Error at *expression1* <> *expression2*, expression1 is not an Integer. Is "+auxtype+".");
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            if(!(e2 instanceof LiteralExpression)){
                                                                                                if(!tableIds.searchScope(e1.getId(),ambito_actual)){
                                                                                                    System.err.println("Variable "+e2.getId()+" has not been declared in this scope");
                                                                                                }else{
                                                                                                    String auxtype2 = e2.bringType();
                                                                                                    if(auxtype2 != "Integer"){
                                                                                                        if(auxtype2 == "none"){
                                                                                                            auxtype2 = tableIds.searchNodeType(e2.getId(),ambito_actual);
                                                                                                            if(auxtype2 != "Integer"){
                                                                                                                System.err.println("Error with variable "+e2.getId()+", is not an Integer. Is "+auxtype2+".");
                                                                                                            }
                                                                                                        }
                                                                                                    }else{
                                                                                                        System.err.println("Error at *expression1* <> *expression2*, expression2 is not an Integer. Is "+auxtype2+".");
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        } 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // logical_expression ::= TK_NOT expression 
            {
              LogicalExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!foundError){RESULT = new LogicalExpression("Not",e1,null);
                                                                           String auxtype = e1.bringType();
                                                                            if(auxtype != "Boolean"){
                                                                                if(auxtype == "none"){
                                                                                    auxtype = tableIds.searchNodeType(e1.getId(),ambito_actual);
                                                                                    if(auxtype != "Boolean"){System.err.println("Error with variable "+e1.getId()+", not a boolean expression. Is "+auxtype+".");}
                                                                                }else{System.err.println("Error at NOT *expression*, not a boolean expression. Is "+auxtype+".");}
                                                                            }
                                                                                
                                                                        }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_expression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // logical_expression ::= TK_NOT TK_PARIN expression TK_PAROUT 
            {
              LogicalExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		if(!foundError){RESULT = new LogicalExpression("Not",e1,null);
                                                                           String auxtype = e1.bringType();
                                                                            if(auxtype != "Boolean"){
                                                                                if(auxtype == "none"){
                                                                                    auxtype = tableIds.searchNodeType(e1.getId(),ambito_actual);
                                                                                    if(auxtype != "Boolean"){System.err.println("Error with variable "+e1.getId()+", not a boolean expression. Is "+auxtype+".");}
                                                                                }else{System.err.println("Error at NOT *(expression)*, not a boolean expression. Is "+auxtype+".");}
                                                                            }
                                                                                
                                                                        }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_expression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // logical_expression ::= expression TK_OR expression 
            {
              LogicalExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!foundError){RESULT = new LogicalExpression("Or",e1,e2,null);
                                                                            String auxtype = e1.bringType();
                                                                            if(auxtype != "Boolean"){
                                                                                if(auxtype == "none"){
                                                                                    auxtype = tableIds.searchNodeType(e1.getId(),ambito_actual);
                                                                                    if(auxtype != "Boolean"){System.err.println("Error with variable "+e1.getId()+", not a boolean expression. Is "+auxtype+".");}
                                                                                }else{System.err.println("Error at *expression* Or *expression*, not a boolean expression. Is "+auxtype+".");}
                                                                            }
                                                                            String auxtype2 = e2.bringType();
                                                                            if(auxtype2 != "Boolean"){
                                                                                if(auxtype2 == "none"){
                                                                                    auxtype2 = tableIds.searchNodeType(e2.getId(),ambito_actual);
                                                                                    if(auxtype2 != "Boolean"){System.err.println("Error with variable "+e2.getId()+", not a boolean expression. Is "+auxtype2+".");}
                                                                                }else{System.err.println("Error at *expression* Or *expression*, not a boolean expression. Is "+auxtype2+".");}
                                                                            }
                                                                        }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_expression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // logical_expression ::= expression TK_AND expression 
            {
              LogicalExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!foundError){RESULT = new LogicalExpression("And",e1,e2,null);
                                                                            String auxtype = e1.bringType();
                                                                            if(auxtype != "Boolean"){
                                                                                if(auxtype == "none"){
                                                                                    auxtype = tableIds.searchNodeType(e1.getId(),ambito_actual);
                                                                                    if(auxtype != "Boolean"){System.err.println("Error with variable "+e1.getId()+", not a boolean expression. Is "+auxtype+".");}
                                                                                }else{System.err.println("Error at *expression* And *expression*, not a boolean expression. Is "+auxtype+".");}
                                                                            }
                                                                            String auxtype2 = e2.bringType();
                                                                            if(auxtype2 != "Boolean"){
                                                                                if(auxtype2 == "none"){
                                                                                    auxtype2 = tableIds.searchNodeType(e2.getId(),ambito_actual);
                                                                                    if(auxtype2 != "Boolean"){System.err.println("Error with variable "+e2.getId()+", not a boolean expression. Is "+auxtype2+".");}
                                                                                }else{System.err.println("Error at *expression* And *expression*, not a boolean expression. Is "+auxtype2+".");}
                                                                            }
                                                                        } 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_expression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // logical_expression ::= expression TK_XOR expression 
            {
              LogicalExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!foundError){RESULT = new LogicalExpression("Xor",e1,e2,null);
                                                                            String auxtype = e1.bringType();
                                                                            if(auxtype != "Boolean"){
                                                                                if(auxtype == "none"){
                                                                                    auxtype = tableIds.searchNodeType(e1.getId(),ambito_actual);
                                                                                    if(auxtype != "Boolean"){System.err.println("Error with variable "+e1.getId()+", not a boolean expression. Is "+auxtype+".");}
                                                                                }else{System.err.println("Error at *expression* Xor *expression*, not a boolean expression. Is "+auxtype+".");}
                                                                            }
                                                                            String auxtype2 = e2.bringType();
                                                                            if(auxtype2 != "Boolean"){
                                                                                if(auxtype2 == "none"){
                                                                                    auxtype2 = tableIds.searchNodeType(e2.getId(),ambito_actual);
                                                                                    if(auxtype2 != "Boolean"){System.err.println("Error with variable "+e2.getId()+", not a boolean expression. Is "+auxtype2+".");}
                                                                                }else{System.err.println("Error at *expression* Xor *expression*, not a boolean expression. Is "+auxtype2+".");}
                                                                            }
                                                                        } 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_expression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // logical_expression ::= TK_TRUE 
            {
              LogicalExpression RESULT =null;
		if(!foundError){RESULT = new LogicalExpression(true,null);} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_expression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // logical_expression ::= TK_FALSE 
            {
              LogicalExpression RESULT =null;
		if(!foundError){RESULT = new LogicalExpression(false,null);} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_expression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // numeric_expression ::= expression TK_SUM expression 
            {
              NumericExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!foundError){RESULT = new NumericExpression(e1,e2,"+",null);
                                                                            if(!(e1 instanceof LiteralExpression)){
                                                                                if(!tableIds.searchScope(e1.getId(),ambito_actual)){
                                                                                    System.err.println("Variable "+e1.getId()+" has not been declared in this scope");
                                                                                }else{
                                                                                    String auxtype = e1.bringType();
                                                                                    if(auxtype != "Integer"){
                                                                                        if(auxtype == "none"){
                                                                                            auxtype = tableIds.searchNodeType(e1.getId(),ambito_actual);
                                                                                                if(auxtype != "Integer"){
                                                                                                    System.err.println("Error with variable "+e1.getId()+", not a numeric expression. Is "+auxtype+".");
                                                                                                }
                                                                                        }else{
                                                                                            System.err.println("Error at *expression1* + *expression2*, not a numeric expression. Is "+auxtype+".");
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            if(!(e2 instanceof LiteralExpression)){
                                                                                if(!tableIds.searchScope(e1.getId(),ambito_actual)){
                                                                                    System.err.println("Variable "+e2.getId()+" has not been declared in this scope");
                                                                                }else{
                                                                                    String auxtype2 = e2.bringType();
                                                                                    if(auxtype2 != "Integer"){
                                                                                        if(auxtype2 == "none"){
                                                                                            auxtype2 = tableIds.searchNodeType(e2.getId(),ambito_actual);
                                                                                            if(auxtype2 != "Integer"){
                                                                                                System.err.println("Error with variable "+e2.getId()+", not a numeric expression. Is "+auxtype2+".");
                                                                                            }
                                                                                        } 
                                                                                    }else{
                                                                                        System.err.println("Error at *expression1* + *expression2*, not a numeric expression. Is "+auxtype2+".");
                                                                                    }
                                                                                }
                                                                            }
                                                                            
                                                                        } 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_expression",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // numeric_expression ::= expression TK_MINUS expression 
            {
              NumericExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!foundError){RESULT = new NumericExpression(e1,e2,"-",null);
                                                                            if(!(e1 instanceof LiteralExpression)){
                                                                                if(!tableIds.searchScope(e1.getId(),ambito_actual)){
                                                                                    System.err.println("Variable "+e1.getId()+" has not been declared in this scope");
                                                                                }else{
                                                                                    String auxtype = e1.bringType();
                                                                                    if(auxtype != "Integer"){
                                                                                        if(auxtype == "none"){
                                                                                            auxtype = tableIds.searchNodeType(e1.getId(),ambito_actual);
                                                                                                if(auxtype != "Integer"){
                                                                                                    System.err.println("Error with variable "+e1.getId()+", not a numeric expression. Is "+auxtype+".");
                                                                                                }
                                                                                        }else{
                                                                                            System.err.println("Error at *expression1* - *expression2*, not a numeric expression. Is "+auxtype+".");
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            if(!(e2 instanceof LiteralExpression)){
                                                                                if(!tableIds.searchScope(e1.getId(),ambito_actual)){
                                                                                    System.err.println("Variable "+e2.getId()+" has not been declared in this scope");
                                                                                }else{
                                                                                    String auxtype2 = e2.bringType();
                                                                                    if(auxtype2 != "Integer"){
                                                                                        if(auxtype2 == "none"){
                                                                                            auxtype2 = tableIds.searchNodeType(e2.getId(),ambito_actual);
                                                                                            if(auxtype2 != "Integer"){
                                                                                                System.err.println("Error with variable "+e2.getId()+", not a numeric expression. Is "+auxtype2+".");
                                                                                            }
                                                                                        } 
                                                                                    }else{
                                                                                        System.err.println("Error at *expression1* - *expression2*, not a numeric expression. Is "+auxtype2+".");
                                                                                    }
                                                                                }
                                                                            }
                                                                        } 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_expression",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // numeric_expression ::= expression TK_PRODUCT expression 
            {
              NumericExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!foundError){RESULT = new NumericExpression(e1,e2,"*",null);
                                                                            if(!(e1 instanceof LiteralExpression)){
                                                                                if(!tableIds.searchScope(e1.getId(),ambito_actual)){
                                                                                    System.err.println("Variable "+e1.getId()+" has not been declared in this scope");
                                                                                }else{
                                                                                    String auxtype = e1.bringType();
                                                                                    if(auxtype != "Integer"){
                                                                                        if(auxtype == "none"){
                                                                                            auxtype = tableIds.searchNodeType(e1.getId(),ambito_actual);
                                                                                                if(auxtype != "Integer"){
                                                                                                    System.err.println("Error with variable "+e1.getId()+", not a numeric expression. Is "+auxtype+".");
                                                                                                }
                                                                                        }else{
                                                                                            System.err.println("Error at *expression1* * *expression2*, not a numeric expression. Is "+auxtype+".");
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            if(!(e2 instanceof LiteralExpression)){
                                                                                if(!tableIds.searchScope(e1.getId(),ambito_actual)){
                                                                                    System.err.println("Variable "+e2.getId()+" has not been declared in this scope");
                                                                                }else{
                                                                                    String auxtype2 = e2.bringType();
                                                                                    if(auxtype2 != "Integer"){
                                                                                        if(auxtype2 == "none"){
                                                                                            auxtype2 = tableIds.searchNodeType(e2.getId(),ambito_actual);
                                                                                            if(auxtype2 != "Integer"){
                                                                                                System.err.println("Error with variable "+e2.getId()+", not a numeric expression. Is "+auxtype2+".");
                                                                                            }
                                                                                        } 
                                                                                    }else{
                                                                                        System.err.println("Error at *expression1* * *expression2*, not a numeric expression. Is "+auxtype2+".");
                                                                                    }
                                                                                }
                                                                            }
                                                                        } 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_expression",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // numeric_expression ::= expression TK_DIVISION expression 
            {
              NumericExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!foundError){RESULT = new NumericExpression(e1,e2,"/",null);
                                                                            if(!(e1 instanceof LiteralExpression)){
                                                                                if(!tableIds.searchScope(e1.getId(),ambito_actual)){
                                                                                    System.err.println("Variable "+e1.getId()+" has not been declared in this scope");
                                                                                }else{
                                                                                    String auxtype = e1.bringType();
                                                                                    if(auxtype != "Integer"){
                                                                                        if(auxtype == "none"){
                                                                                            auxtype = tableIds.searchNodeType(e1.getId(),ambito_actual);
                                                                                                if(auxtype != "Integer"){
                                                                                                    System.err.println("Error with variable "+e1.getId()+", not a numeric expression. Is "+auxtype+".");
                                                                                                }
                                                                                        }else{
                                                                                            System.err.println("Error at *expression1* / *expression2*, not a numeric expression. Is "+auxtype+".");
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            if(!(e2 instanceof LiteralExpression)){
                                                                                if(!tableIds.searchScope(e1.getId(),ambito_actual)){
                                                                                    System.err.println("Variable "+e2.getId()+" has not been declared in this scope");
                                                                                }else{
                                                                                    String auxtype2 = e2.bringType();
                                                                                    if(auxtype2 != "Integer"){
                                                                                        if(auxtype2 == "none"){
                                                                                            auxtype2 = tableIds.searchNodeType(e2.getId(),ambito_actual);
                                                                                            if(auxtype2 != "Integer"){
                                                                                                System.err.println("Error with variable "+e2.getId()+", not a numeric expression. Is "+auxtype2+".");
                                                                                            }
                                                                                        } 
                                                                                    }else{
                                                                                        System.err.println("Error at *expression1* / *expression2*, not a numeric expression. Is "+auxtype2+".");
                                                                                    }
                                                                                }
                                                                            }
                                                                        } 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_expression",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // numeric_expression ::= expression TK_AMPERSAND expression 
            {
              NumericExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!foundError){RESULT = new NumericExpression(e1,e2,"&",null);
                                                                            if(!(e1 instanceof LiteralExpression)){
                                                                                if(!tableIds.searchScope(e1.getId(),ambito_actual)){
                                                                                    System.err.println("Variable "+e1.getId()+" has not been declared in this scope");
                                                                                }else{
                                                                                    String auxtype = e1.bringType();
                                                                                    if(auxtype != "String"){
                                                                                        if(auxtype == "none"){
                                                                                            auxtype = tableIds.searchNodeType(e1.getId(),ambito_actual);
                                                                                                if(auxtype != "String"){
                                                                                                    System.err.println("Error with variable "+e1.getId()+", not a String. Is "+auxtype+".");
                                                                                                }
                                                                                        }else{
                                                                                            System.err.println("Error at *expression1* & *expression2*, first expression is not a String. Is "+auxtype+".");
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            if(!(e2 instanceof LiteralExpression)){
                                                                                if(!tableIds.searchScope(e1.getId(),ambito_actual)){
                                                                                    System.err.println("Variable "+e2.getId()+" has not been declared in this scope");
                                                                                }else{
                                                                                    String auxtype2 = e2.bringType();
                                                                                    if(auxtype2 != "String"){
                                                                                        if(auxtype2 == "none"){
                                                                                            auxtype2 = tableIds.searchNodeType(e2.getId(),ambito_actual);
                                                                                            if(auxtype2 != "String"){
                                                                                                System.err.println("Error with variable "+e2.getId()+", is not a String Is "+auxtype2+".");
                                                                                            }
                                                                                        } 
                                                                                    }else{
                                                                                        System.err.println("Error at *expression1* / *expression2*, second expression is not a String. Is "+auxtype2+".");
                                                                                    }
                                                                                }
                                                                            }
                                                                        } 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_expression",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // numeric_expression ::= expression TK_SUM error expression 
            {
              NumericExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.err.println("Error in numeric expression.");foundError=true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_expression",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // numeric_expression ::= expression TK_MINUS error expression 
            {
              NumericExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.err.println("Error in numeric expression.");foundError=true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_expression",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // numeric_expression ::= expression TK_PRODUCT error expression 
            {
              NumericExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.err.println("Error in numeric expression.");foundError=true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_expression",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // numeric_expression ::= expression TK_DIVISION error expression 
            {
              NumericExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.err.println("Error in numeric expression.");foundError=true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_expression",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // numeric_expression ::= expression TK_AMPERSAND error expression 
            {
              NumericExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.err.println("Error in numeric expression.");foundError=true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_expression",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // literal_expression ::= TK_NUMBER 
            {
              LiteralExpression RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!foundError){RESULT = new LiteralExpression(null,num,null);} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_expression",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // literal_expression ::= TK_STRINGVAL 
            {
              LiteralExpression RESULT =null;
		int strValleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strValright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String strVal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!foundError){RESULT = new LiteralExpression(strVal,null,null);} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_expression",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // function_call ::= TK_ID TK_PARIN arguments TK_PAROUT 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Argument args = (Argument)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		if(!foundError){RESULT = new FunctionCall(listaarguments,i); listaarguments = new ArrayList();} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // function_call ::= TK_ID TK_PARIN TK_PAROUT 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		if(!foundError){RESULT = new FunctionCall(null,i);} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // function_call ::= TK_ID TK_PARIN error 
            {
              Expression RESULT =null;
		System.err.println("Function call expects ')'");foundError=true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // function_call ::= TK_ID TK_PARIN arguments error 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Argument args = (Argument)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.err.println("Function call expects2 ')'");foundError=true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // arguments ::= argument TK_COMMA arguments 
            {
              Argument RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Argument arg = (Argument)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Argument args = (Argument)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!foundError){listaarguments.add(arg);} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arguments",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // arguments ::= argument 
            {
              Argument RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Argument arg = (Argument)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!foundError){listaarguments.add(arg);} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arguments",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // argument ::= expression 
            {
              Argument RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!foundError){RESULT = new Argument(expr);} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argument",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
