
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package visualbasiccompilador;

import java.util.*;
import java.io.*;
import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import AST.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\165\000\002\002\003\000\002\002\004\000\002\003" +
    "\003\000\002\003\002\000\002\005\004\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\042\002\000" +
    "\002\007\010\000\002\007\010\000\002\043\002\000\002" +
    "\010\013\000\002\044\002\000\002\010\012\000\002\010" +
    "\012\000\002\010\013\000\002\010\011\000\002\045\002" +
    "\000\002\011\013\000\002\046\002\000\002\011\015\000" +
    "\002\047\002\000\002\011\014\000\002\050\002\000\002" +
    "\011\012\000\002\011\013\000\002\011\012\000\002\012" +
    "\005\000\002\012\003\000\002\013\006\000\002\014\003" +
    "\000\002\014\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\004\004\000\002\004\002\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\004\000\002\016\003\000" +
    "\002\017\006\000\002\017\006\000\002\017\006\000\002" +
    "\020\006\000\002\020\006\000\002\021\010\000\002\021" +
    "\011\000\002\021\011\000\002\021\012\000\002\021\007" +
    "\000\002\022\004\000\002\022\003\000\002\024\004\000" +
    "\002\023\006\000\002\025\010\000\002\025\010\000\002" +
    "\025\011\000\002\026\007\000\002\026\006\000\002\026" +
    "\007\000\002\027\007\000\002\027\007\000\002\027\007" +
    "\000\002\027\006\000\002\027\006\000\002\030\005\000" +
    "\002\030\003\000\002\031\010\000\002\031\007\000\002" +
    "\031\006\000\002\031\005\000\002\032\003\000\002\032" +
    "\003\000\002\032\003\000\002\032\003\000\002\032\003" +
    "\000\002\032\003\000\002\034\005\000\002\034\005\000" +
    "\002\034\005\000\002\034\005\000\002\034\005\000\002" +
    "\034\005\000\002\036\004\000\002\036\006\000\002\036" +
    "\005\000\002\036\005\000\002\036\005\000\002\036\003" +
    "\000\002\036\003\000\002\033\005\000\002\033\005\000" +
    "\002\033\005\000\002\033\005\000\002\033\005\000\002" +
    "\033\006\000\002\033\006\000\002\033\006\000\002\033" +
    "\006\000\002\033\006\000\002\035\003\000\002\035\003" +
    "\000\002\037\006\000\002\037\005\000\002\037\005\000" +
    "\002\037\006\000\002\040\005\000\002\040\003\000\002" +
    "\041\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0108\000\012\002\ufffe\026\011\027\004\030\005\001" +
    "\002\000\006\003\361\063\362\001\002\000\004\063\351" +
    "\001\002\000\010\026\011\027\004\030\005\001\002\000" +
    "\010\026\ufffb\027\ufffb\030\ufffb\001\002\000\004\002\001" +
    "\001\002\000\004\063\017\001\002\000\010\026\ufffc\027" +
    "\ufffc\030\ufffc\001\002\000\004\002\016\001\002\000\010" +
    "\026\ufffa\027\ufffa\030\ufffa\001\002\000\004\002\uffff\001" +
    "\002\000\004\002\000\001\002\000\004\050\020\001\002" +
    "\000\010\007\021\010\025\051\024\001\002\000\004\063" +
    "\uffe2\001\002\000\004\063\345\001\002\000\006\003\325" +
    "\051\326\001\002\000\046\003\uffdc\011\067\015\047\020" +
    "\031\021\045\024\055\025\064\040\062\053\046\054\065" +
    "\055\uffdc\056\041\057\033\060\054\061\042\062\040\063" +
    "\070\064\044\001\002\000\004\063\uffe1\001\002\000\010" +
    "\003\uffe4\051\uffe4\052\027\001\002\000\006\007\021\010" +
    "\025\001\002\000\006\003\uffe5\051\uffe5\001\002\000\044" +
    "\003\307\011\067\015\047\017\uffdc\020\031\021\306\024" +
    "\055\025\064\040\062\053\046\056\041\057\033\060\054" +
    "\061\042\062\040\063\070\064\044\001\002\000\120\003" +
    "\uffb0\011\uffb0\012\uffb0\013\uffb0\014\uffb0\015\uffb0\016\uffb0" +
    "\017\uffb0\020\uffb0\021\uffb0\023\uffb0\024\uffb0\025\uffb0\031" +
    "\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0" +
    "\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046" +
    "\uffb0\047\uffb0\051\uffb0\052\uffb0\053\uffb0\055\uffb0\056\uffb0" +
    "\057\uffb0\060\uffb0\061\uffb0\062\uffb0\063\uffb0\064\uffb0\001" +
    "\002\000\016\024\055\025\064\040\062\062\040\063\076" +
    "\064\044\001\002\000\120\003\uffaf\011\uffaf\012\uffaf\013" +
    "\uffaf\014\uffaf\015\uffaf\016\uffaf\017\uffaf\020\uffaf\021\uffaf" +
    "\023\uffaf\024\uffaf\025\uffaf\031\uffaf\032\uffaf\033\uffaf\034" +
    "\uffaf\035\uffaf\036\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf" +
    "\043\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf\051\uffaf\052" +
    "\uffaf\053\uffaf\055\uffaf\056\uffaf\057\uffaf\060\uffaf\061\uffaf" +
    "\062\uffaf\063\uffaf\064\uffaf\001\002\000\054\003\uffdc\011" +
    "\067\013\uffdc\014\uffdc\015\047\017\uffdc\020\031\021\045" +
    "\023\uffdc\024\055\025\064\040\062\053\046\055\uffdc\056" +
    "\041\057\033\060\054\061\042\062\040\063\070\064\044" +
    "\001\002\000\054\003\uffdb\011\uffdb\013\uffdb\014\uffdb\015" +
    "\uffdb\017\uffdb\020\uffdb\021\uffdb\023\uffdb\024\uffdb\025\uffdb" +
    "\040\uffdb\053\uffdb\055\uffdb\056\uffdb\057\uffdb\060\uffdb\061" +
    "\uffdb\062\uffdb\063\uffdb\064\uffdb\001\002\000\054\003\uffda" +
    "\011\uffda\013\uffda\014\uffda\015\uffda\017\uffda\020\uffda\021" +
    "\uffda\023\uffda\024\uffda\025\uffda\040\uffda\053\uffda\055\uffda" +
    "\056\uffda\057\uffda\060\uffda\061\uffda\062\uffda\063\uffda\064" +
    "\uffda\001\002\000\120\003\uff94\011\uff94\012\uff94\013\uff94" +
    "\014\uff94\015\uff94\016\uff94\017\uff94\020\uff94\021\uff94\023" +
    "\uff94\024\uff94\025\uff94\031\uff94\032\uff94\033\uff94\034\uff94" +
    "\035\uff94\036\uff94\037\uff94\040\uff94\041\uff94\042\uff94\043" +
    "\uff94\044\uff94\045\uff94\046\uff94\047\uff94\051\uff94\052\uff94" +
    "\053\uff94\055\uff94\056\uff94\057\uff94\060\uff94\061\uff94\062" +
    "\uff94\063\uff94\064\uff94\001\002\000\054\003\uffd2\011\uffd2" +
    "\013\uffd2\014\uffd2\015\uffd2\017\uffd2\020\uffd2\021\uffd2\023" +
    "\uffd2\024\uffd2\025\uffd2\040\uffd2\053\uffd2\055\uffd2\056\uffd2" +
    "\057\uffd2\060\uffd2\061\uffd2\062\uffd2\063\uffd2\064\uffd2\001" +
    "\002\000\004\050\277\001\002\000\120\003\uffad\011\uffad" +
    "\012\uffad\013\uffad\014\uffad\015\uffad\016\uffad\017\uffad\020" +
    "\uffad\021\uffad\023\uffad\024\uffad\025\uffad\031\uffad\032\uffad" +
    "\033\uffad\034\uffad\035\uffad\036\uffad\037\uffad\040\uffad\041" +
    "\uffad\042\uffad\043\uffad\044\uffad\045\uffad\046\uffad\047\uffad" +
    "\051\uffad\052\uffad\053\uffad\055\uffad\056\uffad\057\uffad\060" +
    "\uffad\061\uffad\062\uffad\063\uffad\064\uffad\001\002\000\120" +
    "\003\uff95\011\uff95\012\uff95\013\uff95\014\uff95\015\uff95\016" +
    "\uff95\017\uff95\020\uff95\021\uff95\023\uff95\024\uff95\025\uff95" +
    "\031\uff95\032\uff95\033\uff95\034\uff95\035\uff95\036\uff95\037" +
    "\uff95\040\uff95\041\uff95\042\uff95\043\uff95\044\uff95\045\uff95" +
    "\046\uff95\047\uff95\051\uff95\052\uff95\053\uff95\055\uff95\056" +
    "\uff95\057\uff95\060\uff95\061\uff95\062\uff95\063\uff95\064\uff95" +
    "\001\002\000\020\003\270\024\055\025\064\040\062\062" +
    "\040\063\076\064\044\001\002\000\004\063\260\001\002" +
    "\000\010\003\243\053\046\063\232\001\002\000\054\003" +
    "\uffd8\011\uffd8\013\uffd8\014\uffd8\015\uffd8\017\uffd8\020\uffd8" +
    "\021\uffd8\023\uffd8\024\uffd8\025\uffd8\040\uffd8\053\uffd8\055" +
    "\uffd8\056\uffd8\057\uffd8\060\uffd8\061\uffd8\062\uffd8\063\uffd8" +
    "\064\uffd8\001\002\000\054\003\uffd9\011\uffd9\013\uffd9\014" +
    "\uffd9\015\uffd9\017\uffd9\020\uffd9\021\uffd9\023\uffd9\024\uffd9" +
    "\025\uffd9\040\uffd9\053\uffd9\055\uffd9\056\uffd9\057\uffd9\060" +
    "\uffd9\061\uffd9\062\uffd9\063\uffd9\064\uffd9\001\002\000\110" +
    "\003\uffd4\011\uffd4\013\uffd4\014\uffd4\015\uffd4\017\uffd4\020" +
    "\uffd4\021\uffd4\023\uffd4\024\uffd4\025\uffd4\031\110\032\114" +
    "\033\103\034\111\035\117\036\105\037\113\040\uffd4\041" +
    "\107\042\106\043\112\044\115\045\102\046\104\047\116" +
    "\053\uffd4\055\uffd4\056\uffd4\057\uffd4\060\uffd4\061\uffd4\062" +
    "\uffd4\063\uffd4\064\uffd4\001\002\000\054\003\uffd5\011\uffd5" +
    "\013\uffd5\014\uffd5\015\uffd5\017\uffd5\020\uffd5\021\uffd5\023" +
    "\uffd5\024\uffd5\025\uffd5\040\uffd5\053\uffd5\055\uffd5\056\uffd5" +
    "\057\uffd5\060\uffd5\061\uffd5\062\uffd5\063\uffd5\064\uffd5\001" +
    "\002\000\004\050\234\001\002\000\120\003\uffa1\011\uffa1" +
    "\012\uffa1\013\uffa1\014\uffa1\015\uffa1\016\uffa1\017\uffa1\020" +
    "\uffa1\021\uffa1\023\uffa1\024\uffa1\025\uffa1\031\uffa1\032\uffa1" +
    "\033\uffa1\034\uffa1\035\uffa1\036\uffa1\037\uffa1\040\uffa1\041" +
    "\uffa1\042\uffa1\043\uffa1\044\uffa1\045\uffa1\046\uffa1\047\uffa1" +
    "\051\uffa1\052\uffa1\053\uffa1\055\uffa1\056\uffa1\057\uffa1\060" +
    "\uffa1\061\uffa1\062\uffa1\063\uffa1\064\uffa1\001\002\000\054" +
    "\003\uffd7\011\uffd7\013\uffd7\014\uffd7\015\uffd7\017\uffd7\020" +
    "\uffd7\021\uffd7\023\uffd7\024\uffd7\025\uffd7\040\uffd7\053\uffd7" +
    "\055\uffd7\056\uffd7\057\uffd7\060\uffd7\061\uffd7\062\uffd7\063" +
    "\uffd7\064\uffd7\001\002\000\054\003\uffd6\011\uffd6\013\uffd6" +
    "\014\uffd6\015\uffd6\017\uffd6\020\uffd6\021\uffd6\023\uffd6\024" +
    "\uffd6\025\uffd6\040\uffd6\053\uffd6\055\uffd6\056\uffd6\057\uffd6" +
    "\060\uffd6\061\uffd6\062\uffd6\063\uffd6\064\uffd6\001\002\000" +
    "\120\003\uffb2\011\uffb2\012\uffb2\013\uffb2\014\uffb2\015\uffb2" +
    "\016\uffb2\017\uffb2\020\uffb2\021\uffb2\023\uffb2\024\uffb2\025" +
    "\uffb2\031\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2" +
    "\037\uffb2\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\045" +
    "\uffb2\046\uffb2\047\uffb2\051\uffb2\052\uffb2\053\uffb2\055\uffb2" +
    "\056\uffb2\057\uffb2\060\uffb2\061\uffb2\062\uffb2\063\uffb2\064" +
    "\uffb2\001\002\000\060\003\uffb7\011\uffb7\013\uffb7\014\uffb7" +
    "\015\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\023\uffb7\024" +
    "\uffb7\025\uffb7\040\uffb7\052\231\053\uffb7\055\uffb7\056\uffb7" +
    "\057\uffb7\060\uffb7\061\uffb7\062\uffb7\063\uffb7\064\uffb7\001" +
    "\002\000\020\024\055\025\064\040\062\050\226\062\040" +
    "\063\076\064\044\001\002\000\006\003\217\055\uffe9\001" +
    "\002\000\120\003\uffa0\011\uffa0\012\uffa0\013\uffa0\014\uffa0" +
    "\015\uffa0\016\uffa0\017\uffa0\020\uffa0\021\uffa0\023\uffa0\024" +
    "\uffa0\025\uffa0\031\uffa0\032\uffa0\033\uffa0\034\uffa0\035\uffa0" +
    "\036\uffa0\037\uffa0\040\uffa0\041\uffa0\042\uffa0\043\uffa0\044" +
    "\uffa0\045\uffa0\046\uffa0\047\uffa0\051\uffa0\052\uffa0\053\uffa0" +
    "\055\uffa0\056\uffa0\057\uffa0\060\uffa0\061\uffa0\062\uffa0\063" +
    "\uffa0\064\uffa0\001\002\000\010\004\155\005\154\006\156" +
    "\001\002\000\120\003\uffb1\011\uffb1\012\uffb1\013\uffb1\014" +
    "\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1\023\uffb1" +
    "\024\uffb1\025\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1\035" +
    "\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1" +
    "\044\uffb1\045\uffb1\046\uffb1\047\uffb1\051\uffb1\052\uffb1\053" +
    "\uffb1\055\uffb1\056\uffb1\057\uffb1\060\uffb1\061\uffb1\062\uffb1" +
    "\063\uffb1\064\uffb1\001\002\000\016\024\055\025\064\040" +
    "\062\062\040\063\076\064\044\001\002\000\114\003\uffae" +
    "\011\uffae\013\uffae\014\uffae\015\uffae\017\uffae\020\uffae\021" +
    "\uffae\023\uffae\024\uffae\025\uffae\031\uffae\032\uffae\033\uffae" +
    "\034\uffae\035\uffae\036\uffae\037\uffae\040\uffae\041\uffae\042" +
    "\uffae\043\uffae\044\uffae\045\uffae\046\071\047\uffae\050\073" +
    "\053\uffae\054\072\055\uffae\056\uffae\057\uffae\060\uffae\061" +
    "\uffae\062\uffae\063\uffae\064\uffae\001\002\000\016\024\055" +
    "\025\064\040\062\062\040\063\076\064\044\001\002\000" +
    "\010\004\155\005\154\006\156\001\002\000\022\003\100" +
    "\024\055\025\064\040\062\051\101\062\040\063\076\064" +
    "\044\001\002\000\006\003\152\051\153\001\002\000\010" +
    "\003\uff8e\051\uff8e\052\150\001\002\000\122\003\uffae\011" +
    "\uffae\012\uffae\013\uffae\014\uffae\015\uffae\016\uffae\017\uffae" +
    "\020\uffae\021\uffae\023\uffae\024\uffae\025\uffae\031\uffae\032" +
    "\uffae\033\uffae\034\uffae\035\uffae\036\uffae\037\uffae\040\uffae" +
    "\041\uffae\042\uffae\043\uffae\044\uffae\045\uffae\046\uffae\047" +
    "\uffae\050\073\051\uffae\052\uffae\053\uffae\055\uffae\056\uffae" +
    "\057\uffae\060\uffae\061\uffae\062\uffae\063\uffae\064\uffae\001" +
    "\002\000\044\003\uff8d\031\110\032\114\033\103\034\111" +
    "\035\117\036\105\037\113\041\107\042\106\043\112\044" +
    "\115\045\102\046\104\047\116\051\uff8d\052\uff8d\001\002" +
    "\000\120\003\uff91\011\uff91\012\uff91\013\uff91\014\uff91\015" +
    "\uff91\016\uff91\017\uff91\020\uff91\021\uff91\023\uff91\024\uff91" +
    "\025\uff91\031\uff91\032\uff91\033\uff91\034\uff91\035\uff91\036" +
    "\uff91\037\uff91\040\uff91\041\uff91\042\uff91\043\uff91\044\uff91" +
    "\045\uff91\046\uff91\047\uff91\051\uff91\052\uff91\053\uff91\055" +
    "\uff91\056\uff91\057\uff91\060\uff91\061\uff91\062\uff91\063\uff91" +
    "\064\uff91\001\002\000\120\003\uff92\011\uff92\012\uff92\013" +
    "\uff92\014\uff92\015\uff92\016\uff92\017\uff92\020\uff92\021\uff92" +
    "\023\uff92\024\uff92\025\uff92\031\uff92\032\uff92\033\uff92\034" +
    "\uff92\035\uff92\036\uff92\037\uff92\040\uff92\041\uff92\042\uff92" +
    "\043\uff92\044\uff92\045\uff92\046\uff92\047\uff92\051\uff92\052" +
    "\uff92\053\uff92\055\uff92\056\uff92\057\uff92\060\uff92\061\uff92" +
    "\062\uff92\063\uff92\064\uff92\001\002\000\016\024\055\025" +
    "\064\040\062\062\040\063\076\064\044\001\002\000\020" +
    "\003\145\024\055\025\064\040\062\062\040\063\076\064" +
    "\044\001\002\000\016\024\055\025\064\040\062\062\040" +
    "\063\076\064\044\001\002\000\016\024\055\025\064\040" +
    "\062\062\040\063\076\064\044\001\002\000\016\024\055" +
    "\025\064\040\062\062\040\063\076\064\044\001\002\000" +
    "\016\024\055\025\064\040\062\062\040\063\076\064\044" +
    "\001\002\000\020\003\136\024\055\025\064\040\062\062" +
    "\040\063\076\064\044\001\002\000\020\003\133\024\055" +
    "\025\064\040\062\062\040\063\076\064\044\001\002\000" +
    "\016\024\055\025\064\040\062\062\040\063\076\064\044" +
    "\001\002\000\016\024\055\025\064\040\062\062\040\063" +
    "\076\064\044\001\002\000\020\003\126\024\055\025\064" +
    "\040\062\062\040\063\076\064\044\001\002\000\016\024" +
    "\055\025\064\040\062\062\040\063\076\064\044\001\002" +
    "\000\016\024\055\025\064\040\062\062\040\063\076\064" +
    "\044\001\002\000\020\003\121\024\055\025\064\040\062" +
    "\062\040\063\076\064\044\001\002\000\120\003\uff9b\011" +
    "\uff9b\012\uff9b\013\uff9b\014\uff9b\015\uff9b\016\uff9b\017\uff9b" +
    "\020\uff9b\021\uff9b\023\uff9b\024\uff9b\025\uff9b\031\uff9b\032" +
    "\uff9b\033\103\034\111\035\uff9b\036\uff9b\037\uff9b\040\uff9b" +
    "\041\uff9b\042\uff9b\043\uff9b\044\uff9b\045\uff9b\046\uff9b\047" +
    "\uff9b\051\uff9b\052\uff9b\053\uff9b\055\uff9b\056\uff9b\057\uff9b" +
    "\060\uff9b\061\uff9b\062\uff9b\063\uff9b\064\uff9b\001\002\000" +
    "\016\024\055\025\064\040\062\062\040\063\076\064\044" +
    "\001\002\000\120\003\uff96\011\uff96\012\uff96\013\uff96\014" +
    "\uff96\015\uff96\016\uff96\017\uff96\020\uff96\021\uff96\023\uff96" +
    "\024\uff96\025\uff96\031\110\032\114\033\103\034\111\035" +
    "\117\036\105\037\113\040\uff96\041\107\042\106\043\112" +
    "\044\115\045\102\046\104\047\116\051\uff96\052\uff96\053" +
    "\uff96\055\uff96\056\uff96\057\uff96\060\uff96\061\uff96\062\uff96" +
    "\063\uff96\064\uff96\001\002\000\120\003\uffa7\011\uffa7\012" +
    "\uffa7\013\uffa7\014\uffa7\015\uffa7\016\uffa7\017\uffa7\020\uffa7" +
    "\021\uffa7\023\uffa7\024\uffa7\025\uffa7\031\110\032\114\033" +
    "\103\034\111\035\117\036\uffa7\037\uffa7\040\uffa7\041\uffa7" +
    "\042\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7\047\uffa7\051" +
    "\uffa7\052\uffa7\053\uffa7\055\uffa7\056\uffa7\057\uffa7\060\uffa7" +
    "\061\uffa7\062\uffa7\063\uffa7\064\uffa7\001\002\000\120\003" +
    "\uffaa\011\uffaa\012\uffaa\013\uffaa\014\uffaa\015\uffaa\016\uffaa" +
    "\017\uffaa\020\uffaa\021\uffaa\023\uffaa\024\uffaa\025\uffaa\031" +
    "\110\032\114\033\103\034\111\035\117\036\uffaa\037\uffaa" +
    "\040\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa\046" +
    "\uffaa\047\uffaa\051\uffaa\052\uffaa\053\uffaa\055\uffaa\056\uffaa" +
    "\057\uffaa\060\uffaa\061\uffaa\062\uffaa\063\uffaa\064\uffaa\001" +
    "\002\000\120\003\uff9e\011\uff9e\012\uff9e\013\uff9e\014\uff9e" +
    "\015\uff9e\016\uff9e\017\uff9e\020\uff9e\021\uff9e\023\uff9e\024" +
    "\uff9e\025\uff9e\031\uff9e\032\uff9e\033\103\034\111\035\uff9e" +
    "\036\uff9e\037\uff9e\040\uff9e\041\uff9e\042\uff9e\043\uff9e\044" +
    "\uff9e\045\uff9e\046\uff9e\047\uff9e\051\uff9e\052\uff9e\053\uff9e" +
    "\055\uff9e\056\uff9e\057\uff9e\060\uff9e\061\uff9e\062\uff9e\063" +
    "\uff9e\064\uff9e\001\002\000\016\024\055\025\064\040\062" +
    "\062\040\063\076\064\044\001\002\000\120\003\uff99\011" +
    "\uff99\012\uff99\013\uff99\014\uff99\015\uff99\016\uff99\017\uff99" +
    "\020\uff99\021\uff99\023\uff99\024\uff99\025\uff99\031\110\032" +
    "\114\033\103\034\111\035\117\036\105\037\113\040\uff99" +
    "\041\107\042\106\043\112\044\115\045\102\046\104\047" +
    "\116\051\uff99\052\uff99\053\uff99\055\uff99\056\uff99\057\uff99" +
    "\060\uff99\061\uff99\062\uff99\063\uff99\064\uff99\001\002\000" +
    "\120\003\uffa4\011\uffa4\012\uffa4\013\uffa4\014\uffa4\015\uffa4" +
    "\016\uffa4\017\uffa4\020\uffa4\021\uffa4\023\uffa4\024\uffa4\025" +
    "\uffa4\031\110\032\114\033\103\034\111\035\117\036\105" +
    "\037\uffa4\040\uffa4\041\107\042\106\043\112\044\115\045" +
    "\102\046\104\047\116\051\uffa4\052\uffa4\053\uffa4\055\uffa4" +
    "\056\uffa4\057\uffa4\060\uffa4\061\uffa4\062\uffa4\063\uffa4\064" +
    "\uffa4\001\002\000\120\003\uffab\011\uffab\012\uffab\013\uffab" +
    "\014\uffab\015\uffab\016\uffab\017\uffab\020\uffab\021\uffab\023" +
    "\uffab\024\uffab\025\uffab\031\110\032\114\033\103\034\111" +
    "\035\117\036\uffab\037\uffab\040\uffab\041\uffab\042\uffab\043" +
    "\uffab\044\uffab\045\uffab\046\uffab\047\uffab\051\uffab\052\uffab" +
    "\053\uffab\055\uffab\056\uffab\057\uffab\060\uffab\061\uffab\062" +
    "\uffab\063\uffab\064\uffab\001\002\000\120\003\uff9c\011\uff9c" +
    "\012\uff9c\013\uff9c\014\uff9c\015\uff9c\016\uff9c\017\uff9c\020" +
    "\uff9c\021\uff9c\023\uff9c\024\uff9c\025\uff9c\031\uff9c\032\uff9c" +
    "\033\uff9c\034\uff9c\035\uff9c\036\uff9c\037\uff9c\040\uff9c\041" +
    "\uff9c\042\uff9c\043\uff9c\044\uff9c\045\uff9c\046\uff9c\047\uff9c" +
    "\051\uff9c\052\uff9c\053\uff9c\055\uff9c\056\uff9c\057\uff9c\060" +
    "\uff9c\061\uff9c\062\uff9c\063\uff9c\064\uff9c\001\002\000\016" +
    "\024\055\025\064\040\062\062\040\063\076\064\044\001" +
    "\002\000\120\003\uff97\011\uff97\012\uff97\013\uff97\014\uff97" +
    "\015\uff97\016\uff97\017\uff97\020\uff97\021\uff97\023\uff97\024" +
    "\uff97\025\uff97\031\110\032\114\033\103\034\111\035\117" +
    "\036\105\037\113\040\uff97\041\107\042\106\043\112\044" +
    "\115\045\102\046\104\047\116\051\uff97\052\uff97\053\uff97" +
    "\055\uff97\056\uff97\057\uff97\060\uff97\061\uff97\062\uff97\063" +
    "\uff97\064\uff97\001\002\000\120\003\uff9f\011\uff9f\012\uff9f" +
    "\013\uff9f\014\uff9f\015\uff9f\016\uff9f\017\uff9f\020\uff9f\021" +
    "\uff9f\023\uff9f\024\uff9f\025\uff9f\031\uff9f\032\uff9f\033\103" +
    "\034\111\035\uff9f\036\uff9f\037\uff9f\040\uff9f\041\uff9f\042" +
    "\uff9f\043\uff9f\044\uff9f\045\uff9f\046\uff9f\047\uff9f\051\uff9f" +
    "\052\uff9f\053\uff9f\055\uff9f\056\uff9f\057\uff9f\060\uff9f\061" +
    "\uff9f\062\uff9f\063\uff9f\064\uff9f\001\002\000\016\024\055" +
    "\025\064\040\062\062\040\063\076\064\044\001\002\000" +
    "\120\003\uff9a\011\uff9a\012\uff9a\013\uff9a\014\uff9a\015\uff9a" +
    "\016\uff9a\017\uff9a\020\uff9a\021\uff9a\023\uff9a\024\uff9a\025" +
    "\uff9a\031\110\032\114\033\103\034\111\035\117\036\105" +
    "\037\113\040\uff9a\041\107\042\106\043\112\044\115\045" +
    "\102\046\104\047\116\051\uff9a\052\uff9a\053\uff9a\055\uff9a" +
    "\056\uff9a\057\uff9a\060\uff9a\061\uff9a\062\uff9a\063\uff9a\064" +
    "\uff9a\001\002\000\120\003\uffa2\011\uffa2\012\uffa2\013\uffa2" +
    "\014\uffa2\015\uffa2\016\uffa2\017\uffa2\020\uffa2\021\uffa2\023" +
    "\uffa2\024\uffa2\025\uffa2\031\110\032\114\033\103\034\111" +
    "\035\117\036\105\037\uffa2\040\uffa2\041\uffa2\042\106\043" +
    "\112\044\115\045\102\046\104\047\116\051\uffa2\052\uffa2" +
    "\053\uffa2\055\uffa2\056\uffa2\057\uffa2\060\uffa2\061\uffa2\062" +
    "\uffa2\063\uffa2\064\uffa2\001\002\000\120\003\uffac\011\uffac" +
    "\012\uffac\013\uffac\014\uffac\015\uffac\016\uffac\017\uffac\020" +
    "\uffac\021\uffac\023\uffac\024\uffac\025\uffac\031\110\032\114" +
    "\033\103\034\111\035\117\036\uffac\037\uffac\040\uffac\041" +
    "\uffac\042\uffac\043\uffac\044\uffac\045\uffac\046\uffac\047\uffac" +
    "\051\uffac\052\uffac\053\uffac\055\uffac\056\uffac\057\uffac\060" +
    "\uffac\061\uffac\062\uffac\063\uffac\064\uffac\001\002\000\120" +
    "\003\uffa3\011\uffa3\012\uffa3\013\uffa3\014\uffa3\015\uffa3\016" +
    "\uffa3\017\uffa3\020\uffa3\021\uffa3\023\uffa3\024\uffa3\025\uffa3" +
    "\031\110\032\114\033\103\034\111\035\117\036\uffa3\037" +
    "\uffa3\040\uffa3\041\uffa3\042\106\043\112\044\115\045\102" +
    "\046\104\047\116\051\uffa3\052\uffa3\053\uffa3\055\uffa3\056" +
    "\uffa3\057\uffa3\060\uffa3\061\uffa3\062\uffa3\063\uffa3\064\uffa3" +
    "\001\002\000\120\003\uffa8\011\uffa8\012\uffa8\013\uffa8\014" +
    "\uffa8\015\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8\023\uffa8" +
    "\024\uffa8\025\uffa8\031\110\032\114\033\103\034\111\035" +
    "\117\036\uffa8\037\uffa8\040\uffa8\041\uffa8\042\uffa8\043\uffa8" +
    "\044\uffa8\045\uffa8\046\uffa8\047\uffa8\051\uffa8\052\uffa8\053" +
    "\uffa8\055\uffa8\056\uffa8\057\uffa8\060\uffa8\061\uffa8\062\uffa8" +
    "\063\uffa8\064\uffa8\001\002\000\120\003\uff9d\011\uff9d\012" +
    "\uff9d\013\uff9d\014\uff9d\015\uff9d\016\uff9d\017\uff9d\020\uff9d" +
    "\021\uff9d\023\uff9d\024\uff9d\025\uff9d\031\uff9d\032\uff9d\033" +
    "\uff9d\034\uff9d\035\uff9d\036\uff9d\037\uff9d\040\uff9d\041\uff9d" +
    "\042\uff9d\043\uff9d\044\uff9d\045\uff9d\046\uff9d\047\uff9d\051" +
    "\uff9d\052\uff9d\053\uff9d\055\uff9d\056\uff9d\057\uff9d\060\uff9d" +
    "\061\uff9d\062\uff9d\063\uff9d\064\uff9d\001\002\000\016\024" +
    "\055\025\064\040\062\062\040\063\076\064\044\001\002" +
    "\000\120\003\uff98\011\uff98\012\uff98\013\uff98\014\uff98\015" +
    "\uff98\016\uff98\017\uff98\020\uff98\021\uff98\023\uff98\024\uff98" +
    "\025\uff98\031\110\032\114\033\103\034\111\035\117\036" +
    "\105\037\113\040\uff98\041\107\042\106\043\112\044\115" +
    "\045\102\046\104\047\116\051\uff98\052\uff98\053\uff98\055" +
    "\uff98\056\uff98\057\uff98\060\uff98\061\uff98\062\uff98\063\uff98" +
    "\064\uff98\001\002\000\120\003\uffa9\011\uffa9\012\uffa9\013" +
    "\uffa9\014\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9" +
    "\023\uffa9\024\uffa9\025\uffa9\031\110\032\114\033\103\034" +
    "\111\035\117\036\uffa9\037\uffa9\040\uffa9\041\uffa9\042\uffa9" +
    "\043\uffa9\044\uffa9\045\uffa9\046\uffa9\047\uffa9\051\uffa9\052" +
    "\uffa9\053\uffa9\055\uffa9\056\uffa9\057\uffa9\060\uffa9\061\uffa9" +
    "\062\uffa9\063\uffa9\064\uffa9\001\002\000\016\024\055\025" +
    "\064\040\062\062\040\063\076\064\044\001\002\000\006" +
    "\003\uff8f\051\uff8f\001\002\000\120\003\uff90\011\uff90\012" +
    "\uff90\013\uff90\014\uff90\015\uff90\016\uff90\017\uff90\020\uff90" +
    "\021\uff90\023\uff90\024\uff90\025\uff90\031\uff90\032\uff90\033" +
    "\uff90\034\uff90\035\uff90\036\uff90\037\uff90\040\uff90\041\uff90" +
    "\042\uff90\043\uff90\044\uff90\045\uff90\046\uff90\047\uff90\051" +
    "\uff90\052\uff90\053\uff90\055\uff90\056\uff90\057\uff90\060\uff90" +
    "\061\uff90\062\uff90\063\uff90\064\uff90\001\002\000\120\003" +
    "\uff93\011\uff93\012\uff93\013\uff93\014\uff93\015\uff93\016\uff93" +
    "\017\uff93\020\uff93\021\uff93\023\uff93\024\uff93\025\uff93\031" +
    "\uff93\032\uff93\033\uff93\034\uff93\035\uff93\036\uff93\037\uff93" +
    "\040\uff93\041\uff93\042\uff93\043\uff93\044\uff93\045\uff93\046" +
    "\uff93\047\uff93\051\uff93\052\uff93\053\uff93\055\uff93\056\uff93" +
    "\057\uff93\060\uff93\061\uff93\062\uff93\063\uff93\064\uff93\001" +
    "\002\000\052\003\uffdf\011\uffdf\015\uffdf\020\uffdf\021\uffdf" +
    "\024\uffdf\025\uffdf\040\uffdf\046\uffdf\051\uffdf\052\uffdf\053" +
    "\uffdf\055\uffdf\056\uffdf\057\uffdf\060\uffdf\061\uffdf\062\uffdf" +
    "\063\uffdf\064\uffdf\001\002\000\052\003\uffe0\011\uffe0\015" +
    "\uffe0\020\uffe0\021\uffe0\024\uffe0\025\uffe0\040\uffe0\046\uffe0" +
    "\051\uffe0\052\uffe0\053\uffe0\055\uffe0\056\uffe0\057\uffe0\060" +
    "\uffe0\061\uffe0\062\uffe0\063\uffe0\064\uffe0\001\002\000\052" +
    "\003\uffde\011\uffde\015\uffde\020\uffde\021\uffde\024\uffde\025" +
    "\uffde\040\uffde\046\uffde\051\uffde\052\uffde\053\uffde\055\uffde" +
    "\056\uffde\057\uffde\060\uffde\061\uffde\062\uffde\063\uffde\064" +
    "\uffde\001\002\000\004\046\160\001\002\000\016\024\055" +
    "\025\064\040\062\062\040\063\076\064\044\001\002\000" +
    "\114\003\uffb5\011\uffb5\013\uffb5\014\uffb5\015\uffb5\016\uffb5" +
    "\017\uffb5\020\uffb5\021\uffb5\023\uffb5\024\uffb5\025\uffb5\031" +
    "\110\032\114\033\103\034\111\035\117\036\105\037\113" +
    "\040\uffb5\041\107\042\106\043\112\044\115\045\102\046" +
    "\104\047\116\052\uffb5\053\uffb5\055\uffb5\056\uffb5\057\uffb5" +
    "\060\uffb5\061\uffb5\062\uffb5\063\uffb5\064\uffb5\001\002\000" +
    "\114\003\uffb3\011\uffb3\013\uffb3\014\uffb3\015\uffb3\016\uffb3" +
    "\017\uffb3\020\uffb3\021\uffb3\023\uffb3\024\uffb3\025\uffb3\031" +
    "\110\032\114\033\103\034\111\035\117\036\105\037\113" +
    "\040\uffb3\041\107\042\106\043\112\044\115\045\102\046" +
    "\104\047\116\052\uffb3\053\uffb3\055\uffb3\056\uffb3\057\uffb3" +
    "\060\uffb3\061\uffb3\062\uffb3\063\uffb3\064\uffb3\001\002\000" +
    "\040\012\164\031\110\032\114\033\103\034\111\035\117" +
    "\036\105\037\113\041\107\042\106\043\112\044\115\045" +
    "\102\046\104\047\116\001\002\000\050\003\uffdc\011\067" +
    "\013\uffdc\014\uffdc\015\047\020\031\021\045\024\055\025" +
    "\064\040\062\053\046\055\uffdc\056\041\057\033\060\054" +
    "\061\042\062\040\063\070\064\044\001\002\000\012\003" +
    "\170\013\166\014\173\055\171\001\002\000\016\024\055" +
    "\025\064\040\062\062\040\063\076\064\044\001\002\000" +
    "\006\014\173\055\202\001\002\000\054\003\uffc8\011\uffc8" +
    "\013\uffc8\014\uffc8\015\uffc8\017\uffc8\020\uffc8\021\uffc8\023" +
    "\uffc8\024\uffc8\025\uffc8\040\uffc8\053\uffc8\055\uffc8\056\uffc8" +
    "\057\uffc8\060\uffc8\061\uffc8\062\uffc8\063\uffc8\064\uffc8\001" +
    "\002\000\004\011\201\001\002\000\010\013\166\014\uffc6" +
    "\055\uffc6\001\002\000\042\011\067\015\047\020\031\021" +
    "\045\024\055\025\064\040\062\053\046\055\uffdc\056\041" +
    "\057\033\060\054\061\042\062\040\063\070\064\044\001" +
    "\002\000\004\055\175\001\002\000\004\011\176\001\002" +
    "\000\054\003\uffcb\011\uffcb\013\uffcb\014\uffcb\015\uffcb\017" +
    "\uffcb\020\uffcb\021\uffcb\023\uffcb\024\uffcb\025\uffcb\040\uffcb" +
    "\053\uffcb\055\uffcb\056\uffcb\057\uffcb\060\uffcb\061\uffcb\062" +
    "\uffcb\063\uffcb\064\uffcb\001\002\000\004\055\uffc5\001\002" +
    "\000\006\014\uffc7\055\uffc7\001\002\000\054\003\uffcc\011" +
    "\uffcc\013\uffcc\014\uffcc\015\uffcc\017\uffcc\020\uffcc\021\uffcc" +
    "\023\uffcc\024\uffcc\025\uffcc\040\uffcc\053\uffcc\055\uffcc\056" +
    "\uffcc\057\uffcc\060\uffcc\061\uffcc\062\uffcc\063\uffcc\064\uffcc" +
    "\001\002\000\004\011\206\001\002\000\004\055\204\001" +
    "\002\000\004\011\205\001\002\000\054\003\uffc9\011\uffc9" +
    "\013\uffc9\014\uffc9\015\uffc9\017\uffc9\020\uffc9\021\uffc9\023" +
    "\uffc9\024\uffc9\025\uffc9\040\uffc9\053\uffc9\055\uffc9\056\uffc9" +
    "\057\uffc9\060\uffc9\061\uffc9\062\uffc9\063\uffc9\064\uffc9\001" +
    "\002\000\054\003\uffca\011\uffca\013\uffca\014\uffca\015\uffca" +
    "\017\uffca\020\uffca\021\uffca\023\uffca\024\uffca\025\uffca\040" +
    "\uffca\053\uffca\055\uffca\056\uffca\057\uffca\060\uffca\061\uffca" +
    "\062\uffca\063\uffca\064\uffca\001\002\000\040\012\210\031" +
    "\110\032\114\033\103\034\111\035\117\036\105\037\113" +
    "\041\107\042\106\043\112\044\115\045\102\046\104\047" +
    "\116\001\002\000\046\011\067\013\uffdc\014\uffdc\015\047" +
    "\020\031\021\045\024\055\025\064\040\062\053\046\055" +
    "\uffdc\056\041\057\033\060\054\061\042\062\040\063\070" +
    "\064\044\001\002\000\010\013\uffc4\014\uffc4\055\uffc4\001" +
    "\002\000\042\011\uffeb\015\uffeb\020\uffeb\021\uffeb\024\uffeb" +
    "\025\uffeb\040\uffeb\053\uffeb\055\uffeb\056\uffeb\057\uffeb\060" +
    "\uffeb\061\uffeb\062\uffeb\063\uffeb\064\uffeb\001\002\000\042" +
    "\011\067\015\047\020\031\021\045\024\055\025\064\040" +
    "\062\053\046\055\uffdc\056\041\057\033\060\054\061\042" +
    "\062\040\063\070\064\044\001\002\000\004\055\215\001" +
    "\002\000\004\026\216\001\002\000\010\026\uffea\027\uffea" +
    "\030\uffea\001\002\000\004\055\223\001\002\000\004\055" +
    "\221\001\002\000\004\026\222\001\002\000\010\026\uffe8" +
    "\027\uffe8\030\uffe8\001\002\000\004\026\224\001\002\000" +
    "\010\026\uffe6\027\uffe6\030\uffe6\001\002\000\120\003\uffa6" +
    "\011\uffa6\012\uffa6\013\uffa6\014\uffa6\015\uffa6\016\uffa6\017" +
    "\uffa6\020\uffa6\021\uffa6\023\uffa6\024\uffa6\025\uffa6\031\uffa6" +
    "\032\uffa6\033\uffa6\034\uffa6\035\uffa6\036\uffa6\037\uffa6\040" +
    "\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6\046\uffa6" +
    "\047\uffa6\051\uffa6\052\uffa6\053\uffa6\055\uffa6\056\uffa6\057" +
    "\uffa6\060\uffa6\061\uffa6\062\uffa6\063\uffa6\064\uffa6\001\002" +
    "\000\016\024\055\025\064\040\062\062\040\063\076\064" +
    "\044\001\002\000\040\031\110\032\114\033\103\034\111" +
    "\035\117\036\105\037\113\041\107\042\106\043\112\044" +
    "\115\045\102\046\104\047\116\051\230\001\002\000\120" +
    "\003\uffa5\011\uffa5\012\uffa5\013\uffa5\014\uffa5\015\uffa5\016" +
    "\uffa5\017\uffa5\020\uffa5\021\uffa5\023\uffa5\024\uffa5\025\uffa5" +
    "\031\uffa5\032\uffa5\033\uffa5\034\uffa5\035\uffa5\036\uffa5\037" +
    "\uffa5\040\uffa5\041\uffa5\042\uffa5\043\uffa5\044\uffa5\045\uffa5" +
    "\046\uffa5\047\uffa5\051\uffa5\052\uffa5\053\uffa5\055\uffa5\056" +
    "\uffa5\057\uffa5\060\uffa5\061\uffa5\062\uffa5\063\uffa5\064\uffa5" +
    "\001\002\000\006\053\046\063\232\001\002\000\006\046" +
    "\071\054\072\001\002\000\056\003\uffb8\011\uffb8\013\uffb8" +
    "\014\uffb8\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\023" +
    "\uffb8\024\uffb8\025\uffb8\040\uffb8\053\uffb8\055\uffb8\056\uffb8" +
    "\057\uffb8\060\uffb8\061\uffb8\062\uffb8\063\uffb8\064\uffb8\001" +
    "\002\000\012\003\235\062\040\063\237\064\044\001\002" +
    "\000\004\051\242\001\002\000\004\051\241\001\002\000" +
    "\004\051\240\001\002\000\054\003\uffd0\011\uffd0\013\uffd0" +
    "\014\uffd0\015\uffd0\017\uffd0\020\uffd0\021\uffd0\023\uffd0\024" +
    "\uffd0\025\uffd0\040\uffd0\053\uffd0\055\uffd0\056\uffd0\057\uffd0" +
    "\060\uffd0\061\uffd0\062\uffd0\063\uffd0\064\uffd0\001\002\000" +
    "\054\003\uffd1\011\uffd1\013\uffd1\014\uffd1\015\uffd1\017\uffd1" +
    "\020\uffd1\021\uffd1\023\uffd1\024\uffd1\025\uffd1\040\uffd1\053" +
    "\uffd1\055\uffd1\056\uffd1\057\uffd1\060\uffd1\061\uffd1\062\uffd1" +
    "\063\uffd1\064\uffd1\001\002\000\054\003\uffcf\011\uffcf\013" +
    "\uffcf\014\uffcf\015\uffcf\017\uffcf\020\uffcf\021\uffcf\023\uffcf" +
    "\024\uffcf\025\uffcf\040\uffcf\053\uffcf\055\uffcf\056\uffcf\057" +
    "\uffcf\060\uffcf\061\uffcf\062\uffcf\063\uffcf\064\uffcf\001\002" +
    "\000\004\016\254\001\002\000\004\016\245\001\002\000" +
    "\016\024\055\025\064\040\062\062\040\063\076\064\044" +
    "\001\002\000\100\003\250\011\067\015\047\020\031\021" +
    "\045\023\uffdc\024\055\025\064\031\110\032\114\033\103" +
    "\034\111\035\117\036\105\037\113\040\062\041\107\042" +
    "\106\043\112\044\115\045\102\046\104\047\116\053\046" +
    "\056\041\057\033\060\054\061\042\062\040\063\070\064" +
    "\044\001\002\000\004\023\253\001\002\000\042\011\067" +
    "\015\047\020\031\021\045\023\uffdc\024\055\025\064\040" +
    "\062\053\046\056\041\057\033\060\054\061\042\062\040" +
    "\063\070\064\044\001\002\000\004\023\252\001\002\000" +
    "\054\003\uffc1\011\uffc1\013\uffc1\014\uffc1\015\uffc1\017\uffc1" +
    "\020\uffc1\021\uffc1\023\uffc1\024\uffc1\025\uffc1\040\uffc1\053" +
    "\uffc1\055\uffc1\056\uffc1\057\uffc1\060\uffc1\061\uffc1\062\uffc1" +
    "\063\uffc1\064\uffc1\001\002\000\054\003\uffc3\011\uffc3\013" +
    "\uffc3\014\uffc3\015\uffc3\017\uffc3\020\uffc3\021\uffc3\023\uffc3" +
    "\024\uffc3\025\uffc3\040\uffc3\053\uffc3\055\uffc3\056\uffc3\057" +
    "\uffc3\060\uffc3\061\uffc3\062\uffc3\063\uffc3\064\uffc3\001\002" +
    "\000\016\024\055\025\064\040\062\062\040\063\076\064" +
    "\044\001\002\000\076\011\067\015\047\020\031\021\045" +
    "\023\uffdc\024\055\025\064\031\110\032\114\033\103\034" +
    "\111\035\117\036\105\037\113\040\062\041\107\042\106" +
    "\043\112\044\115\045\102\046\104\047\116\053\046\056" +
    "\041\057\033\060\054\061\042\062\040\063\070\064\044" +
    "\001\002\000\004\023\257\001\002\000\054\003\uffc2\011" +
    "\uffc2\013\uffc2\014\uffc2\015\uffc2\017\uffc2\020\uffc2\021\uffc2" +
    "\023\uffc2\024\uffc2\025\uffc2\040\uffc2\053\uffc2\055\uffc2\056" +
    "\uffc2\057\uffc2\060\uffc2\061\uffc2\062\uffc2\063\uffc2\064\uffc2" +
    "\001\002\000\006\046\261\054\262\001\002\000\016\024" +
    "\055\025\064\040\062\062\040\063\076\064\044\001\002" +
    "\000\010\004\155\005\154\006\156\001\002\000\004\046" +
    "\264\001\002\000\016\024\055\025\064\040\062\062\040" +
    "\063\076\064\044\001\002\000\114\003\uffb6\011\uffb6\013" +
    "\uffb6\014\uffb6\015\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6" +
    "\023\uffb6\024\uffb6\025\uffb6\031\110\032\114\033\103\034" +
    "\111\035\117\036\105\037\113\040\uffb6\041\107\042\106" +
    "\043\112\044\115\045\102\046\104\047\116\052\uffb6\053" +
    "\uffb6\055\uffb6\056\uffb6\057\uffb6\060\uffb6\061\uffb6\062\uffb6" +
    "\063\uffb6\064\uffb6\001\002\000\114\003\uffb4\011\uffb4\013" +
    "\uffb4\014\uffb4\015\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4" +
    "\023\uffb4\024\uffb4\025\uffb4\031\110\032\114\033\103\034" +
    "\111\035\117\036\105\037\113\040\uffb4\041\107\042\106" +
    "\043\112\044\115\045\102\046\104\047\116\052\uffb4\053" +
    "\uffb4\055\uffb4\056\uffb4\057\uffb4\060\uffb4\061\uffb4\062\uffb4" +
    "\063\uffb4\064\uffb4\001\002\000\076\011\067\015\047\020" +
    "\031\021\045\024\055\025\064\031\110\032\114\033\103" +
    "\034\111\035\117\036\105\037\113\040\062\041\107\042" +
    "\106\043\112\044\115\045\102\046\104\047\116\053\046" +
    "\055\uffdc\056\041\057\033\060\054\061\042\062\040\063" +
    "\070\064\044\001\002\000\004\055\271\001\002\000\004" +
    "\021\272\001\002\000\054\003\uffbf\011\uffbf\013\uffbf\014" +
    "\uffbf\015\uffbf\017\uffbf\020\uffbf\021\uffbf\023\uffbf\024\uffbf" +
    "\025\uffbf\040\uffbf\053\uffbf\055\uffbf\056\uffbf\057\uffbf\060" +
    "\uffbf\061\uffbf\062\uffbf\063\uffbf\064\uffbf\001\002\000\004" +
    "\055\274\001\002\000\006\003\275\021\276\001\002\000" +
    "\054\003\uffbe\011\uffbe\013\uffbe\014\uffbe\015\uffbe\017\uffbe" +
    "\020\uffbe\021\uffbe\023\uffbe\024\uffbe\025\uffbe\040\uffbe\053" +
    "\uffbe\055\uffbe\056\uffbe\057\uffbe\060\uffbe\061\uffbe\062\uffbe" +
    "\063\uffbe\064\uffbe\001\002\000\054\003\uffc0\011\uffc0\013" +
    "\uffc0\014\uffc0\015\uffc0\017\uffc0\020\uffc0\021\uffc0\023\uffc0" +
    "\024\uffc0\025\uffc0\040\uffc0\053\uffc0\055\uffc0\056\uffc0\057" +
    "\uffc0\060\uffc0\061\uffc0\062\uffc0\063\uffc0\064\uffc0\001\002" +
    "\000\006\003\300\063\301\001\002\000\004\051\303\001" +
    "\002\000\004\051\302\001\002\000\054\003\uffce\011\uffce" +
    "\013\uffce\014\uffce\015\uffce\017\uffce\020\uffce\021\uffce\023" +
    "\uffce\024\uffce\025\uffce\040\uffce\053\uffce\055\uffce\056\uffce" +
    "\057\uffce\060\uffce\061\uffce\062\uffce\063\uffce\064\uffce\001" +
    "\002\000\054\003\uffcd\011\uffcd\013\uffcd\014\uffcd\015\uffcd" +
    "\017\uffcd\020\uffcd\021\uffcd\023\uffcd\024\uffcd\025\uffcd\040" +
    "\uffcd\053\uffcd\055\uffcd\056\uffcd\057\uffcd\060\uffcd\061\uffcd" +
    "\062\uffcd\063\uffcd\064\uffcd\001\002\000\016\003\uffdd\013" +
    "\uffdd\014\uffdd\017\uffdd\023\uffdd\055\uffdd\001\002\000\110" +
    "\003\uffd3\011\uffd3\013\uffd3\014\uffd3\015\uffd3\017\uffd3\020" +
    "\uffd3\021\uffd3\023\uffd3\024\uffd3\025\uffd3\031\110\032\114" +
    "\033\103\034\111\035\117\036\105\037\113\040\uffd3\041" +
    "\107\042\106\043\112\044\115\045\102\046\104\047\116" +
    "\053\uffd3\055\uffd3\056\uffd3\057\uffd3\060\uffd3\061\uffd3\062" +
    "\uffd3\063\uffd3\064\uffd3\001\002\000\020\003\320\024\055" +
    "\025\064\040\062\062\040\063\076\064\044\001\002\000" +
    "\004\017\314\001\002\000\004\017\311\001\002\000\004" +
    "\022\312\001\002\000\016\024\055\025\064\040\062\062" +
    "\040\063\076\064\044\001\002\000\110\003\uffbc\011\uffbc" +
    "\013\uffbc\014\uffbc\015\uffbc\017\uffbc\020\uffbc\021\uffbc\023" +
    "\uffbc\024\uffbc\025\uffbc\031\110\032\114\033\103\034\111" +
    "\035\117\036\105\037\113\040\uffbc\041\107\042\106\043" +
    "\112\044\115\045\102\046\104\047\116\053\uffbc\055\uffbc" +
    "\056\uffbc\057\uffbc\060\uffbc\061\uffbc\062\uffbc\063\uffbc\064" +
    "\uffbc\001\002\000\004\022\315\001\002\000\016\024\055" +
    "\025\064\040\062\062\040\063\076\064\044\001\002\000" +
    "\110\003\uffbb\011\uffbb\013\uffbb\014\uffbb\015\uffbb\017\uffbb" +
    "\020\uffbb\021\uffbb\023\uffbb\024\uffbb\025\uffbb\031\110\032" +
    "\114\033\103\034\111\035\117\036\105\037\113\040\uffbb" +
    "\041\107\042\106\043\112\044\115\045\102\046\104\047" +
    "\116\053\uffbb\055\uffbb\056\uffbb\057\uffbb\060\uffbb\061\uffbb" +
    "\062\uffbb\063\uffbb\064\uffbb\001\002\000\102\003\323\011" +
    "\067\015\047\017\uffdc\020\031\021\045\024\055\025\064" +
    "\031\110\032\114\033\103\034\111\035\117\036\105\037" +
    "\113\040\062\041\107\042\106\043\112\044\115\045\102" +
    "\046\104\047\116\053\046\055\uffdc\056\041\057\033\060" +
    "\054\061\042\062\040\063\070\064\044\001\002\000\006" +
    "\017\321\055\271\001\002\000\054\003\uffba\011\uffba\013" +
    "\uffba\014\uffba\015\uffba\017\uffba\020\uffba\021\uffba\023\uffba" +
    "\024\uffba\025\uffba\040\uffba\053\uffba\055\uffba\056\uffba\057" +
    "\uffba\060\uffba\061\uffba\062\uffba\063\uffba\064\uffba\001\002" +
    "\000\006\017\324\055\274\001\002\000\054\003\uffb9\011" +
    "\uffb9\013\uffb9\014\uffb9\015\uffb9\017\uffb9\020\uffb9\021\uffb9" +
    "\023\uffb9\024\uffb9\025\uffb9\040\uffb9\053\uffb9\055\uffb9\056" +
    "\uffb9\057\uffb9\060\uffb9\061\uffb9\062\uffb9\063\uffb9\064\uffb9" +
    "\001\002\000\054\003\uffbd\011\uffbd\013\uffbd\014\uffbd\015" +
    "\uffbd\017\uffbd\020\uffbd\021\uffbd\023\uffbd\024\uffbd\025\uffbd" +
    "\040\uffbd\053\uffbd\055\uffbd\056\uffbd\057\uffbd\060\uffbd\061" +
    "\uffbd\062\uffbd\063\uffbd\064\uffbd\001\002\000\004\051\341" +
    "\001\002\000\044\011\uffef\015\uffef\020\uffef\021\uffef\024" +
    "\uffef\025\uffef\040\uffef\053\uffef\054\327\055\uffef\056\uffef" +
    "\057\uffef\060\uffef\061\uffef\062\uffef\063\uffef\064\uffef\001" +
    "\002\000\010\004\155\005\154\006\156\001\002\000\042" +
    "\011\067\015\047\020\031\021\045\024\055\025\064\040" +
    "\062\053\046\055\uffdc\056\041\057\033\060\054\061\042" +
    "\062\040\063\070\064\044\001\002\000\004\055\332\001" +
    "\002\000\004\026\333\001\002\000\010\026\uffee\027\uffee" +
    "\030\uffee\001\002\000\042\011\uffed\015\uffed\020\uffed\021" +
    "\uffed\024\uffed\025\uffed\040\uffed\053\uffed\055\uffed\056\uffed" +
    "\057\uffed\060\uffed\061\uffed\062\uffed\063\uffed\064\uffed\001" +
    "\002\000\042\011\067\015\047\020\031\021\045\024\055" +
    "\025\064\040\062\053\046\055\uffdc\056\041\057\033\060" +
    "\054\061\042\062\040\063\070\064\044\001\002\000\004" +
    "\055\337\001\002\000\004\026\340\001\002\000\010\026" +
    "\uffec\027\uffec\030\uffec\001\002\000\042\011\067\015\047" +
    "\020\031\021\045\024\055\025\064\040\062\053\046\055" +
    "\uffdc\056\041\057\033\060\054\061\042\062\040\063\070" +
    "\064\044\001\002\000\004\055\343\001\002\000\004\026" +
    "\344\001\002\000\010\026\uffe7\027\uffe7\030\uffe7\001\002" +
    "\000\004\054\346\001\002\000\010\004\155\005\154\006" +
    "\156\001\002\000\010\003\uffe3\051\uffe3\052\uffe3\001\002" +
    "\000\004\002\ufffd\001\002\000\044\003\uffdc\011\067\015" +
    "\047\020\031\021\045\024\055\025\064\040\062\053\046" +
    "\055\uffdc\056\041\057\033\060\054\061\042\062\040\063" +
    "\070\064\044\001\002\000\006\003\354\055\ufff9\001\002" +
    "\000\004\055\357\001\002\000\004\055\355\001\002\000" +
    "\004\030\356\001\002\000\010\026\ufff7\027\ufff7\030\ufff7" +
    "\001\002\000\004\030\360\001\002\000\010\026\ufff8\027" +
    "\ufff8\030\ufff8\001\002\000\004\050\u0106\001\002\000\004" +
    "\050\363\001\002\000\010\007\021\010\025\051\365\001" +
    "\002\000\004\051\u0101\001\002\000\044\003\367\011\ufff4" +
    "\015\ufff4\020\ufff4\021\ufff4\024\ufff4\025\ufff4\040\ufff4\053" +
    "\ufff4\055\ufff4\056\ufff4\057\ufff4\060\ufff4\061\ufff4\062\ufff4" +
    "\063\ufff4\064\ufff4\001\002\000\042\011\067\015\047\020" +
    "\031\021\045\024\055\025\064\040\062\053\046\055\uffdc" +
    "\056\041\057\033\060\054\061\042\062\040\063\070\064" +
    "\044\001\002\000\044\003\uffdc\011\067\015\047\020\031" +
    "\021\045\024\055\025\064\040\062\053\046\055\uffdc\056" +
    "\041\057\033\060\054\061\042\062\040\063\070\064\044" +
    "\001\002\000\006\003\371\055\372\001\002\000\004\055" +
    "\374\001\002\000\004\027\373\001\002\000\010\026\ufff2" +
    "\027\ufff2\030\ufff2\001\002\000\004\027\375\001\002\000" +
    "\010\026\ufff1\027\ufff1\030\ufff1\001\002\000\004\055\377" +
    "\001\002\000\004\027\u0100\001\002\000\010\026\ufff3\027" +
    "\ufff3\030\ufff3\001\002\000\042\011\ufff6\015\ufff6\020\ufff6" +
    "\021\ufff6\024\ufff6\025\ufff6\040\ufff6\053\ufff6\055\ufff6\056" +
    "\ufff6\057\ufff6\060\ufff6\061\ufff6\062\ufff6\063\ufff6\064\ufff6" +
    "\001\002\000\042\011\067\015\047\020\031\021\045\024" +
    "\055\025\064\040\062\053\046\055\uffdc\056\041\057\033" +
    "\060\054\061\042\062\040\063\070\064\044\001\002\000" +
    "\004\055\u0104\001\002\000\004\027\u0105\001\002\000\010" +
    "\026\ufff5\027\ufff5\030\ufff5\001\002\000\004\051\u0107\001" +
    "\002\000\042\011\067\015\047\020\031\021\045\024\055" +
    "\025\064\040\062\053\046\055\uffdc\056\041\057\033\060" +
    "\054\061\042\062\040\063\070\064\044\001\002\000\004" +
    "\055\u0109\001\002\000\004\027\u010a\001\002\000\010\026" +
    "\ufff0\027\ufff0\030\ufff0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0108\000\020\002\012\003\007\005\014\006\005\007" +
    "\011\010\006\011\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\005\347\006\005\007\011\010\006\011" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\012\022\013\025\014\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\004\062" +
    "\016\034\017\055\020\056\021\035\025\050\026\036\027" +
    "\047\030\052\031\060\032\051\033\057\034\065\035\033" +
    "\036\031\037\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\012\027\013\025\014\021\001\001\000\002" +
    "\001\001\000\042\004\307\016\034\017\055\020\056\021" +
    "\035\025\050\026\036\027\047\030\052\031\060\032\051" +
    "\033\057\034\065\035\033\036\031\037\042\001\001\000" +
    "\002\001\001\000\016\032\304\033\057\034\065\035\033" +
    "\036\031\037\042\001\001\000\002\001\001\000\042\004" +
    "\303\016\034\017\055\020\056\021\035\025\050\026\036" +
    "\027\047\030\052\031\060\032\051\033\057\034\065\035" +
    "\033\036\031\037\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\032\266" +
    "\033\057\034\065\035\033\036\031\037\042\001\001\000" +
    "\002\001\001\000\006\030\243\031\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\032\224\033\057\034\065\035\033\036\031\037\042" +
    "\001\001\000\004\050\217\001\001\000\002\001\001\000" +
    "\004\015\211\001\001\000\002\001\001\000\016\032\162" +
    "\033\057\034\065\035\033\036\031\037\042\001\001\000" +
    "\002\001\001\000\016\032\161\033\057\034\065\035\033" +
    "\036\031\037\042\001\001\000\004\015\156\001\001\000" +
    "\022\032\076\033\057\034\065\035\033\036\031\037\042" +
    "\040\073\041\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\032\146\033\057\034\065\035" +
    "\033\036\031\037\042\001\001\000\016\032\143\033\057" +
    "\034\065\035\033\036\031\037\042\001\001\000\016\032" +
    "\142\033\057\034\065\035\033\036\031\037\042\001\001" +
    "\000\016\032\141\033\057\034\065\035\033\036\031\037" +
    "\042\001\001\000\016\032\140\033\057\034\065\035\033" +
    "\036\031\037\042\001\001\000\016\032\137\033\057\034" +
    "\065\035\033\036\031\037\042\001\001\000\016\032\134" +
    "\033\057\034\065\035\033\036\031\037\042\001\001\000" +
    "\016\032\131\033\057\034\065\035\033\036\031\037\042" +
    "\001\001\000\016\032\130\033\057\034\065\035\033\036" +
    "\031\037\042\001\001\000\016\032\127\033\057\034\065" +
    "\035\033\036\031\037\042\001\001\000\016\032\124\033" +
    "\057\034\065\035\033\036\031\037\042\001\001\000\016" +
    "\032\123\033\057\034\065\035\033\036\031\037\042\001" +
    "\001\000\016\032\122\033\057\034\065\035\033\036\031" +
    "\037\042\001\001\000\016\032\117\033\057\034\065\035" +
    "\033\036\031\037\042\001\001\000\002\001\001\000\016" +
    "\032\121\033\057\034\065\035\033\036\031\037\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\032\126\033\057\034\065\035" +
    "\033\036\031\037\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\032" +
    "\133\033\057\034\065\035\033\036\031\037\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\032\136\033" +
    "\057\034\065\035\033\036\031\037\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\032\145" +
    "\033\057\034\065\035\033\036\031\037\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\032\076\033\057" +
    "\034\065\035\033\036\031\037\042\040\150\041\074\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\032\160\033\057\034\065\035\033" +
    "\036\031\037\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\004\164\016\034\017\055" +
    "\020\056\021\035\025\050\026\036\027\047\030\052\031" +
    "\060\032\051\033\057\034\065\035\033\036\031\037\042" +
    "\001\001\000\010\022\166\023\171\024\173\001\001\000" +
    "\016\032\206\033\057\034\065\035\033\036\031\037\042" +
    "\001\001\000\004\024\202\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\022\177\023\171\001\001\000\042" +
    "\004\176\016\034\017\055\020\056\021\035\025\050\026" +
    "\036\027\047\030\052\031\060\032\051\033\057\034\065" +
    "\035\033\036\031\037\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\004\210\016\034\017\055\020" +
    "\056\021\035\025\050\026\036\027\047\030\052\031\060" +
    "\032\051\033\057\034\065\035\033\036\031\037\042\001" +
    "\001\000\002\001\001\000\004\047\212\001\001\000\042" +
    "\004\213\016\034\017\055\020\056\021\035\025\050\026" +
    "\036\027\047\030\052\031\060\032\051\033\057\034\065" +
    "\035\033\036\031\037\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\032\226" +
    "\033\057\034\065\035\033\036\031\037\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\030\232\031\060" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\235\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\032\245" +
    "\033\057\034\065\035\033\036\031\037\042\001\001\000" +
    "\042\004\246\016\034\017\055\020\056\021\035\025\050" +
    "\026\036\027\047\030\052\031\060\032\051\033\057\034" +
    "\065\035\033\036\031\037\042\001\001\000\002\001\001" +
    "\000\042\004\250\016\034\017\055\020\056\021\035\025" +
    "\050\026\036\027\047\030\052\031\060\032\051\033\057" +
    "\034\065\035\033\036\031\037\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\032\254" +
    "\033\057\034\065\035\033\036\031\037\042\001\001\000" +
    "\042\004\255\016\034\017\055\020\056\021\035\025\050" +
    "\026\036\027\047\030\052\031\060\032\051\033\057\034" +
    "\065\035\033\036\031\037\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\032\265\033" +
    "\057\034\065\035\033\036\031\037\042\001\001\000\004" +
    "\015\262\001\001\000\002\001\001\000\016\032\264\033" +
    "\057\034\065\035\033\036\031\037\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\004\272\016\034\017" +
    "\055\020\056\021\035\025\050\026\036\027\047\030\052" +
    "\031\060\032\051\033\057\034\065\035\033\036\031\037" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\032\316\033\057" +
    "\034\065\035\033\036\031\037\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\032\312" +
    "\033\057\034\065\035\033\036\031\037\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\032\315\033\057" +
    "\034\065\035\033\036\031\037\042\001\001\000\002\001" +
    "\001\000\042\004\321\016\034\017\055\020\056\021\035" +
    "\025\050\026\036\027\047\030\052\031\060\032\051\033" +
    "\057\034\065\035\033\036\031\037\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\045\327" +
    "\001\001\000\004\015\333\001\001\000\042\004\330\016" +
    "\034\017\055\020\056\021\035\025\050\026\036\027\047" +
    "\030\052\031\060\032\051\033\057\034\065\035\033\036" +
    "\031\037\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\046\334\001\001\000\042\004" +
    "\335\016\034\017\055\020\056\021\035\025\050\026\036" +
    "\027\047\030\052\031\060\032\051\033\057\034\065\035" +
    "\033\036\031\037\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\004\341\016\034\017" +
    "\055\020\056\021\035\025\050\026\036\027\047\030\052" +
    "\031\060\032\051\033\057\034\065\035\033\036\031\037" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\346\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\004\351\016\034" +
    "\017\055\020\056\021\035\025\050\026\036\027\047\030" +
    "\052\031\060\032\051\033\057\034\065\035\033\036\031" +
    "\037\042\001\001\000\004\042\352\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\012\363\013\025\014\021\001\001" +
    "\000\002\001\001\000\004\044\365\001\001\000\042\004" +
    "\375\016\034\017\055\020\056\021\035\025\050\026\036" +
    "\027\047\030\052\031\060\032\051\033\057\034\065\035" +
    "\033\036\031\037\042\001\001\000\042\004\367\016\034" +
    "\017\055\020\056\021\035\025\050\026\036\027\047\030" +
    "\052\031\060\032\051\033\057\034\065\035\033\036\031" +
    "\037\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\043\u0101\001\001\000\042\004\u0102\016\034" +
    "\017\055\020\056\021\035\025\050\026\036\027\047\030" +
    "\052\031\060\032\051\033\057\034\065\035\033\036\031" +
    "\037\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\004\u0107\016\034" +
    "\017\055\020\056\021\035\025\050\026\036\027\047\030" +
    "\052\031\060\032\051\033\057\034\065\035\033\036\031" +
    "\037\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        public Program FINALOBJECT = new Program();
        public IdTable tableIds = new IdTable();
        public ArrayList<Statements> listastatements = new ArrayList();
        public ArrayList<Argument> listaarguments = new ArrayList();
        public ArrayList<Parameter> listaparameters = new ArrayList();
        public ArrayList<ElseIfStatement> listaelseifs = new ArrayList();
        public boolean foundError = false;
        public boolean foundTypeError = false;
        public int bloque = 0;
        public String ambito_actual = Integer.toString(bloque);
        public String partir_ambito[];
	public void syntax_error(Symbol s){
            if(s.sym==0){

            }else{
                System.err.print("Syntax error, Line "+(s.left)+ " Column "+(s.right)+ " Symbol #"+s.sym+". ");
                List<Integer> expected = expected_token_ids();
                String expectedSymbol = "";
                /*System.out.println("Tamaño:"+expected.size());
                for(int i=0;i<expected.size();i++)
                    System.out.println(expected.get(i));*/
                if(expected.size()==1){
                    if(expected.get(0) == sym.TK_EQUALS){
                        expectedSymbol = "=";
                    }else if(expected.get(0) == sym.TK_MINUS){
                        expectedSymbol = "-";
                    }else if(expected.get(0) == sym.TK_GREATERTHAN){
                        expectedSymbol = ">";
                    }else if(expected.get(0) == sym.TK_PRODUCT){
                        expectedSymbol = "*";
                    }else if(expected.get(0) == sym.TK_LESSEQUAL){
                        expectedSymbol = "<=";
                    }else if(expected.get(0) == sym.TK_FOR){
                        expectedSymbol = "For";
                    }else if(expected.get(0) == sym.TK_LESSTHAN){
                        expectedSymbol = "<";
                    }else if(expected.get(0) == sym.TK_NOT){
                        expectedSymbol = "NOT";
                    }else if(expected.get(0) == sym.TK_AND){
                        expectedSymbol = "AND";
                    }else if(expected.get(0) == sym.TK_COMMA){
                        expectedSymbol = ",";
                    }else if(expected.get(0) == sym.TK_OR){
                        expectedSymbol = "or";
                    }else if(expected.get(0) == sym.TK_UNTIL){
                        expectedSymbol = "Until";
                    }else if(expected.get(0) == sym.TK_ELSEIF){
                        expectedSymbol = "ElseIf";
                    }else if(expected.get(0) == sym.TK_IF){
                        expectedSymbol = "If";
                    }else if(expected.get(0) == sym.TK_ID){
                        expectedSymbol = "<ID>";
                    }else if(expected.get(0) == sym.TK_PAROUT){
                        expectedSymbol = "(";
                    }else if(expected.get(0) == sym.TK_BYVAL){
                        expectedSymbol = "ByVal";
                    }else if(expected.get(0) == sym.TK_BOOLEAN){
                        expectedSymbol = "Boolean";
                    }else if(expected.get(0) == sym.TK_DIM){
                        expectedSymbol = "Dim";
                    }else if(expected.get(0) == sym.TK_GREATEREQUAL){
                        expectedSymbol = ">=";
                    }else if(expected.get(0) == sym.TK_EXIT){
                        expectedSymbol = "Exit";
                    }else if(expected.get(0) == sym.TK_LOOP){
                        expectedSymbol = "Loop";
                    }else if(expected.get(0) == sym.TK_NEXT){
                        expectedSymbol = "Next";
                    }else if(expected.get(0) == sym.TK_STRINGVAL){
                        expectedSymbol = "of type string.";
                    }else if(expected.get(0) == sym.TK_RETURN){
                        expectedSymbol = "Return";
                    }else if(expected.get(0) == sym.TK_TRUE){
                        expectedSymbol = "True";
                    }else if(expected.get(0) == sym.TK_PARIN){
                        expectedSymbol = "(";
                    }else if(expected.get(0) == sym.TK_NUMBER){
                        expectedSymbol = "of number type";
                    }else if(expected.get(0) == sym.TK_BYREF){
                        expectedSymbol = "ByRef";
                    }else if(expected.get(0) == sym.TK_STRUCTURE){
                        expectedSymbol = "Structure";
                    }else if(expected.get(0) == sym.TK_TO){
                        expectedSymbol = "To";
                    }else if(expected.get(0) == sym.TK_WHILE){
                        expectedSymbol = "While";
                    }else if(expected.get(0) == sym.TK_DIVISION){
                        expectedSymbol = "%";
                    }else if(expected.get(0) == sym.TK_END){
                        expectedSymbol = "End";
                    }else if(expected.get(0) == sym.TK_SUM){
                        expectedSymbol = "+";
                    }else if(expected.get(0) == sym.TK_FALSE){
                        expectedSymbol = "False";
                    }else if(expected.get(0) == sym.TK_AS){
                        expectedSymbol = "As";
                    }else if(expected.get(0) == sym.TK_THEN){
                        expectedSymbol = "Then";
                    }else if(expected.get(0) == sym.TK_STRING){
                        expectedSymbol = "String";
                    }else if(expected.get(0) == sym.TK_FUNCTION){
                        expectedSymbol = "Function";
                    }else if(expected.get(0) == sym.TK_DO){
                        expectedSymbol = "Do";
                    }else if(expected.get(0) == sym.TK_SUB){
                        expectedSymbol = "Sub";
                    }else if(expected.get(0) == sym.TK_INTEGER){
                        expectedSymbol = "Integer";
                    }else if(expected.get(0) == sym.TK_XOR){
                        expectedSymbol = "Xor";
                    }else if(expected.get(0) == sym.TK_AMPERSAND){
                        expectedSymbol = "&";
                    }
                    System.err.println("Expected symbol "+expectedSymbol );
                }else{
                    if(s.sym == sym.TK_ID){
                        System.err.println("Expected definition of type for ID or found a mispelled reserved word.");
                    }
                    else if(s.sym == sym.TK_PARIN || s.sym == sym.TK_PAROUT){
                        System.err.println("Expected an expression or call.");
                    }
                    else if(s.sym == sym.TK_SUM || s.sym == sym.TK_MINUS || s.sym == sym.TK_DIVISION || s.sym == sym.TK_PRODUCT  ||s.sym == sym.TK_AMPERSAND){
                        System.err.println("Unplaced, lacking or unexpected expression.");
                    }
                    else if(s.sym == sym.TK_GREATERTHAN || s.sym == sym.TK_GREATEREQUAL || s.sym == sym.TK_LESSTHAN || s.sym == sym.TK_LESSEQUAL ||s.sym == sym.TK_NOTEQUAL ){
                        System.err.println("Unexpected evaluation.");
                    }
                    else if(s.sym == sym.TK_EQUALS){
                        System.err.println("Unexpected evaluation or assignation");
                    }
                    else{
                        System.err.println("Check code's syntax;");
                    }

                }


                
            }
            
            
            
	}

        public void unrecovered_syntax_error(Symbol cur_token) {
            if(cur_token.sym==0){

            }else{
                System.err.println("Error with code's syntax in line: " + (cur_token.left + 1) + ", col: " + (cur_token.right + 1));
            }
            
            
        }

        public void report_fatal_error(String message, Object info) {
            
        }

        public void report_error(String message, Object info) {
            
        }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // initial ::= program 
            {
              Object RESULT =null;
		 System.out.println("Programa en Visual Basic"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("initial",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= initial EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= function_declarations 
            {
              Program RESULT =null;
		int functionDeclarationsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int functionDeclarationsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunctionDeclarations functionDeclarations = (FunctionDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Program"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= 
            {
              Program RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // function_declarations ::= function_declaration function_declarations 
            {
              FunctionDeclarations RESULT =null;
		int functionDeclarationleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int functionDeclarationright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FunctionDeclaration functionDeclaration = (FunctionDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int functionDeclarationsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int functionDeclarationsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunctionDeclarations functionDeclarations = (FunctionDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Func decls");FINALOBJECT.getDeclarations().add(functionDeclaration);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declarations",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // function_declaration ::= structure_statement 
            {
              FunctionDeclaration RESULT =null;
		int structureStatementleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int structureStatementright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunctionDeclaration structureStatement = (FunctionDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!foundError){RESULT = new StructureStatement(((StructureStatement)structureStatement).getStructure(),((StructureStatement)structureStatement).getId(),((StructureStatement)structureStatement).getEnd_structure(),((StructureStatement)structureStatement).getStatements());FINALOBJECT.getDeclarations().add(RESULT);} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // function_declaration ::= sub_statement 
            {
              FunctionDeclaration RESULT =null;
		int subStatementleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int subStatementright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunctionDeclaration subStatement = (FunctionDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!foundError){RESULT = new SubStatement(((SubStatement)subStatement).getSub(),((SubStatement)subStatement).getId(),((SubStatement)subStatement).getParameters(),((SubStatement)subStatement).getStatements(),((SubStatement)subStatement).getEndSub());FINALOBJECT.getDeclarations().add(RESULT);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // function_declaration ::= function_statement 
            {
              FunctionDeclaration RESULT =null;
		int functionStatementleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int functionStatementright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunctionDeclaration functionStatement = (FunctionDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!foundError){RESULT = new FunctionStatement(((FunctionStatement)functionStatement).getFunction(),((FunctionStatement)functionStatement).getId(),((FunctionStatement)functionStatement).getParameters(),((FunctionStatement)functionStatement).getStatements(),((FunctionStatement)functionStatement).getDataType(),"End Function");FINALOBJECT.getDeclarations().add(RESULT);  }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$0 ::= 
            {
              FunctionDeclaration RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statements stmnts = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
if(!foundError){bloque = 0;
                                                                ambito_actual = Integer.toString(bloque);
                                                                tableIds.addNode(new IdNode(i,"record",ambito_actual));}
                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // structure_statement ::= TK_STRUCTURE TK_ID statements NT$0 TK_END TK_STRUCTURE 
            {
              FunctionDeclaration RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (FunctionDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements stmnts = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		if(!foundError){RESULT = new StructureStatement("Structure",i,"End Structure",listastatements);listastatements = new ArrayList();}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("structure_statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // structure_statement ::= TK_STRUCTURE TK_ID statements error TK_END TK_STRUCTURE 
            {
              FunctionDeclaration RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements stmnts = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		System.err.println("Error inside Structure statement");foundError=true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("structure_statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$1 ::= 
            {
              FunctionDeclaration RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int prmtsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int prmtsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object prmts = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
if(!foundError){
                                                                            bloque++;
                                                                            ambito_actual += "." + Integer.toString(bloque);
                                                                            String tipo_sub = "";
                                                                            for(int k = 0; k < listaparameters.size(); k++){
                                                                                if(k != listaparameters.size()-1){
                                                                                    tipo_sub += listaparameters.get(k).getDataType() + "x";
                                                                                }else{
                                                                                    tipo_sub += listaparameters.get(k).getDataType();
                                                                                }
                                                                            }
                                                                            if (!tableIds.addNode(new IdNode(i,tipo_sub+"->void",ambito_actual))){
                                                                                System.err.println("Function or Sub"+i+" has already been defined");
                                                                            }else{
                                                                                System.out.println("Sub "+i+" with data type "+tipo_sub+" and scope "+ambito_actual+" has been added to symbol table");
                                                                            }
                                                                            partir_ambito = ambito_actual.split("\\.");
                                                                            ambito_actual = partir_ambito[0];
                                                                        }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sub_statement ::= TK_SUB TK_ID TK_PARIN parameters TK_PAROUT NT$1 statements TK_END TK_SUB 
            {
              FunctionDeclaration RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (FunctionDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int prmtsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int prmtsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object prmts = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statements stmnts = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		if(!foundError){RESULT = new SubStatement("Sub",i,listaparameters,listastatements,"End Sub");listastatements = new ArrayList();listaparameters = new ArrayList();} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$2 ::= 
            {
              FunctionDeclaration RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
if(!foundError){
                                                            bloque++;
                                                            ambito_actual += "." + Integer.toString(bloque);
                                                            if (!tableIds.addNode(new IdNode(i, "void->void", ambito_actual))){
                                                                System.err.println("Function or Sub "+i+" has already been defined");
                                                            }else{
                                                                System.out.println("Sub "+i+" with data type void->void and scope "+ambito_actual+" has been added to symbol table");
                                                            }
                                                            partir_ambito = ambito_actual.split("\\.");
                                                            ambito_actual = partir_ambito[0];
                                                        }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sub_statement ::= TK_SUB TK_ID TK_PARIN TK_PAROUT NT$2 statements TK_END TK_SUB 
            {
              FunctionDeclaration RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (FunctionDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statements stmnts = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		if(!foundError){RESULT = new SubStatement("Sub",i,null,listastatements,"End Sub");listastatements = new ArrayList();} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sub_statement ::= TK_SUB TK_ID TK_PARIN TK_PAROUT error statements TK_END TK_SUB 
            {
              FunctionDeclaration RESULT =null;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statements stmnts = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		System.err.println("Error inside Sub statement");foundError=true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sub_statement ::= TK_SUB TK_ID TK_PARIN TK_PAROUT error statements error TK_END TK_SUB 
            {
              FunctionDeclaration RESULT =null;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements stmnts = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		System.err.println("Several errors inside Sub statement");foundError=true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sub_statement ::= TK_SUB error TK_PARIN TK_PAROUT statements TK_END TK_SUB 
            {
              FunctionDeclaration RESULT =null;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statements stmnts = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		System.err.println("Erroneous Sub declaration.");foundError=true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$3 ::= 
            {
              FunctionDeclaration RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int prmtsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int prmtsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object prmts = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
if(!foundError){
                                                                                    bloque++;
                                                                                    ambito_actual += "." + Integer.toString(bloque);
                                                                                    String tipo_funcion = "";
                                                                                    for(int k = 0; k < listaparameters.size(); k++){
                                                                                        if(k != listaparameters.size()-1){
                                                                                            tipo_funcion += listaparameters.get(k).getDataType() + "x";
                                                                                        }else{
                                                                                            tipo_funcion += listaparameters.get(k).getDataType();
                                                                                        }
                                                                                    }
                                                                                    if (!tableIds.addNode(new IdNode(i, tipo_funcion+"->void", ambito_actual))){
                                                                                        System.err.println("Function "+i+" already exists "+tipo_funcion+"->void");
                                                                                    }else{
                                                                                        System.out.println("Function "+i+" with data type "+tipo_funcion+"->void and scope "+ambito_actual+" has been added to symbol table");
                                                                                    }
                                                                                    partir_ambito = ambito_actual.split("\\.");
                                                                                    ambito_actual = partir_ambito[0];
                                                                                 }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // function_statement ::= TK_FUNCTION TK_ID TK_PARIN parameters TK_PAROUT NT$3 statements TK_END TK_FUNCTION 
            {
              FunctionDeclaration RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (FunctionDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int prmtsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int prmtsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object prmts = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statements stmnts = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		if(!foundError){RESULT = new FunctionStatement("Function",i,listaparameters,listastatements,null,"End Function"); listaparameters = new ArrayList();listastatements = new ArrayList();}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$4 ::= 
            {
              FunctionDeclaration RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int prmtsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int prmtsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object prmts = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
if(!foundError){
                                                                                                            bloque++;
                                                                                                            ambito_actual += "."+Integer.toString(bloque);
                                                                                                            String tipo_funcion = "";
                                                                                                            for(int k = 0; k < listaparameters.size(); k++){
                                                                                                                if(k != listaparameters.size()-1){
                                                                                                                    tipo_funcion += listaparameters.get(k).getDataType() + "x";
                                                                                                                }else{
                                                                                                                    tipo_funcion += listaparameters.get(k).getDataType();
                                                                                                                }
                                                                                                            }
                                                                                                            if(!tableIds.addNode(new IdNode(i, tipo_funcion+"->"+type,ambito_actual))){
                                                                                                                System.err.println("Function "+i+" already exists "+tipo_funcion+"->"+type);
                                                                                                            }else{
                                                                                                                System.out.println("Function "+i+" with data type "+tipo_funcion+"->"+type+" and scope "+ambito_actual+" has been added ot symbol table");
                                                                                                            }
                                                                                                            partir_ambito = ambito_actual.split("\\.");
                                                                                                            ambito_actual = partir_ambito[0];
                                                                                                      }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // function_statement ::= TK_FUNCTION TK_ID TK_PARIN parameters TK_PAROUT TK_AS data_type NT$4 statements TK_END TK_FUNCTION 
            {
              FunctionDeclaration RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (FunctionDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int prmtsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int prmtsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object prmts = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statements stmnts = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		if(!foundError){RESULT = new FunctionStatement("Function",i,listaparameters,listastatements,type,"End Function"); listaparameters = new ArrayList();listastatements = new ArrayList();} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$5 ::= 
            {
              FunctionDeclaration RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
if(!foundError){
                                                                                            bloque++;
                                                                                            ambito_actual += "."+Integer.toString(bloque);
                                                                                            if(!tableIds.addNode(new IdNode(i, "void->"+type,ambito_actual))){
                                                                                                System.err.println("Function "+i+" already exists "+"void->"+type);
                                                                                            }else{
                                                                                                System.out.println("Function "+i+" with data type void->"+type+" and scope "+ambito_actual+" has been added to symbol table");
                                                                                            }
                                                                                            
                                                                                      }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // function_statement ::= TK_FUNCTION TK_ID TK_PARIN TK_PAROUT TK_AS data_type NT$5 statements TK_END TK_FUNCTION 
            {
              FunctionDeclaration RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (FunctionDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statements stmnts = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		if(!foundError){
                                                                                                                                RESULT = new FunctionStatement("Function",i,null,listastatements,type,"End Function"); 
                                                                                                                                listastatements = new ArrayList();
                                                                                                                                partir_ambito = ambito_actual.split("\\.");
                                                                                                                                ambito_actual = partir_ambito[0];
                                                                                                                             }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$6 ::= 
            {
              FunctionDeclaration RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statements stmnts = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
if(!foundError){
                                                                                        bloque = 0;
                                                                                        ambito_actual = Integer.toString(bloque);
                                                                                        if(!tableIds.addNode(new IdNode(i, "void->void",ambito_actual))){
                                                                                             System.err.println("Function "+i+" already exists "+" void->void");
                                                                                        } else {
                                                                                            System.out.println("Function "+i+" with data type void->void and scope "+ambito_actual+" has been added to symbol table");
                                                                                        }
                                                                                  }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // function_statement ::= TK_FUNCTION TK_ID TK_PARIN TK_PAROUT statements NT$6 TK_END TK_FUNCTION 
            {
              FunctionDeclaration RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (FunctionDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements stmnts = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		if(!foundError){RESULT = new FunctionStatement("Function",i,null,listastatements,null,"End Function"); listastatements = new ArrayList();} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // function_statement ::= TK_FUNCTION TK_ID TK_PARIN parameters error TK_PAROUT statements TK_END TK_FUNCTION 
            {
              FunctionDeclaration RESULT =null;
		int prmtsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int prmtsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object prmts = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statements stmnts = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		System.err.println("Erroneous Function declaration.");foundError=true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // function_statement ::= TK_FUNCTION TK_ID TK_PARIN TK_PAROUT statements error TK_END TK_FUNCTION 
            {
              FunctionDeclaration RESULT =null;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements stmnts = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		System.err.println("Error inside Function statement.");foundError=true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // parameters ::= parameter TK_COMMA parameters 
            {
              Object RESULT =null;
		int prmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int prmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Parameter prmt = (Parameter)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int prmtsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int prmtsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object prmts = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(!foundError){listaparameters.add(prmt);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // parameters ::= parameter 
            {
              Object RESULT =null;
		int prmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int prmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Parameter prmt = (Parameter)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(!foundError){listaparameters.add(prmt);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // parameter ::= parameter_type TK_ID TK_AS data_type 
            {
              Parameter RESULT =null;
		int prmt_typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int prmt_typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String prmt_type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!foundError){RESULT = new Parameter(prmt_type, type,i);} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // parameter_type ::= TK_BYVAL 
            {
              String RESULT =null;
		 if(!foundError){RESULT = "ByVal";}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // parameter_type ::= TK_BYREF 
            {
              String RESULT =null;
		 if(!foundError){RESULT = "ByRef";}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // data_type ::= TK_INTEGER 
            {
              String RESULT =null;
		 if(!foundError){RESULT = "Integer";} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // data_type ::= TK_BOOLEAN 
            {
              String RESULT =null;
		 if(!foundError){RESULT = "Boolean";} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // data_type ::= TK_STRING 
            {
              String RESULT =null;
		 if(!foundError){RESULT = "String";} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // statements ::= statement statements 
            {
              Statements RESULT =null;
		int stmntleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stmntright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statements stmnt = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statements stmnts = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!foundError){listastatements.add(stmnt);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // statements ::= 
            {
              Statements RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // statement ::= if_statement 
            {
              Statements RESULT =null;
		int ifStatementleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ifStatementright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statements ifStatement = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!foundError){RESULT = ifStatement;} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // statement ::= while_statement 
            {
              Statements RESULT =null;
		int whileStatementleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int whileStatementright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statements whileStatement = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!foundError){RESULT = whileStatement;} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // statement ::= for_statement 
            {
              Statements RESULT =null;
		int forStatementleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int forStatementright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statements forStatement = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!foundError){RESULT = forStatement;} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // statement ::= do_statement 
            {
              Statements RESULT =null;
		int doStatementleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int doStatementright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statements doStatement = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!foundError){RESULT = doStatement;} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // statement ::= write_statement 
            {
              Statements RESULT =null;
		int writeStatementleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int writeStatementright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statements writeStatement = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!foundError){RESULT = writeStatement;} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // statement ::= read_statement 
            {
              Statements RESULT =null;
		int readStatementleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int readStatementright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statements readStatement = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!foundError){RESULT = readStatement;} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // statement ::= variable_declaration 
            {
              Statements RESULT =null;
		int var_declareleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var_declareright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VariableDeclaration var_declare = (VariableDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!foundError){RESULT = var_declare;} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // statement ::= expression 
            {
              Statements RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!foundError){RESULT = expr;}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // statement ::= TK_RETURN expression 
            {
              Statements RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!foundError){RESULT = new ReturnExpression("Return",exp);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // statement ::= TK_EXIT 
            {
              Statements RESULT =null;
		if(!foundError){RESULT = new ExitStatement("Exit");} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // write_statement ::= TK_WRITE TK_PARIN literal_expression TK_PAROUT 
            {
              Statements RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LiteralExpression le = (LiteralExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		if(!foundError){RESULT = new WriteStatement("Write",le,null);} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // write_statement ::= TK_WRITE TK_PARIN TK_ID TK_PAROUT 
            {
              Statements RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		if(!foundError){RESULT = new WriteStatement("Write",null,i);}  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // write_statement ::= TK_WRITE TK_PARIN error TK_PAROUT 
            {
              Statements RESULT =null;
		System.err.println("\t\t\t\t\t  Problem near Console.Write()"); foundError=true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // read_statement ::= TK_READ TK_PARIN TK_ID TK_PAROUT 
            {
              Statements RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		if(!foundError){RESULT = new ReadStatement("Read",i);} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_statement",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // read_statement ::= TK_READ TK_PARIN error TK_PAROUT 
            {
              Statements RESULT =null;
		System.err.println("\t\t\t\t\t  Problem near Console.Read().");foundError=true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_statement",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // if_statement ::= TK_IF expression TK_THEN statements TK_END TK_IF 
            {
              Statements RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statements stmnts = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		if(!foundError){RESULT = new IfStatement("If",expr,"Then",null,listastatements,null,null,"End IF");listastatements = new ArrayList();} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // if_statement ::= TK_IF expression TK_THEN statements else_statement TK_END TK_IF 
            {
              Statements RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements stmnts = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int elseStmntleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elseStmntright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ElseStatement elseStmnt = (ElseStatement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		if(!foundError){RESULT = new IfStatement("If",expr,"Then","Else",listastatements,null,elseStmnt,"End IF");listastatements = new ArrayList();} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // if_statement ::= TK_IF expression TK_THEN statements elseif_statements TK_END TK_IF 
            {
              Statements RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements stmnts = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int elseifStmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elseifStmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statements elseifStmnts = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		if(!foundError){RESULT = new IfStatement("If",expr,"Then",null,listastatements,listaelseifs,null,"End IF");listastatements = new ArrayList();listaelseifs = new ArrayList();} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // if_statement ::= TK_IF expression TK_THEN statements elseif_statements else_statement TK_END TK_IF 
            {
              Statements RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements stmnts = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int elseifStmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int elseifStmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements elseifStmnts = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int elseStmntleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elseStmntright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ElseStatement elseStmnt = (ElseStatement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		if(!foundError){RESULT = new IfStatement("If",expr,"Then","Else",listastatements,listaelseifs,elseStmnt,"End IF");listastatements = new ArrayList();listaelseifs = new ArrayList();} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // if_statement ::= TK_IF expression TK_THEN statements error 
            {
              Statements RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statements stmnts = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.err.print("Error in If.");foundError=true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // elseif_statements ::= elseif_statement elseif_statements 
            {
              Statements RESULT =null;
		int elseifStmntleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elseifStmntright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ElseIfStatement elseifStmnt = (ElseIfStatement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elseifStmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elseifStmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statements elseifStmnts = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!foundError){listaelseifs.add(elseifStmnt);} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseif_statements",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // elseif_statements ::= elseif_statement 
            {
              Statements RESULT =null;
		int elseifStmntleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elseifStmntright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ElseIfStatement elseifStmnt = (ElseIfStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!foundError){listaelseifs.add(elseifStmnt);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseif_statements",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // else_statement ::= TK_ELSE statements 
            {
              ElseStatement RESULT =null;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statements stmnts = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!foundError){RESULT = new ElseStatement("Else",listastatements);listastatements = new ArrayList();}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // elseif_statement ::= TK_ELSEIF expression TK_THEN statements 
            {
              ElseIfStatement RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statements stmnts = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!foundError){ RESULT = new ElseIfStatement("ElseIf",expr,"Then",listastatements);listastatements = new ArrayList();} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseif_statement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // for_statement ::= TK_FOR variable_declaration TK_TO expression statements TK_NEXT 
            {
              Statements RESULT =null;
		int var_declareleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int var_declareright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		VariableDeclaration var_declare = (VariableDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statements stmnts = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		if(!foundError){RESULT = new ForStatement("For",var_declare,"To",expr,listastatements,"Next"); listastatements = new ArrayList(); } 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // for_statement ::= TK_FOR error TK_TO expression statements TK_NEXT 
            {
              Statements RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statements stmnts = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.err.println("Error in variable declaration by For.");foundError=true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // for_statement ::= TK_FOR variable_declaration TK_TO expression error statements TK_NEXT 
            {
              Statements RESULT =null;
		int var_declareleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int var_declareright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		VariableDeclaration var_declare = (VariableDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statements stmnts = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.err.println("Check syntax inside For.");foundError=true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // while_statement ::= TK_WHILE expression statements TK_END TK_WHILE 
            {
              Statements RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statements stmnts = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		if(!foundError){ RESULT = new WhileStatement("While",expr,listastatements,"End While");listastatements = new ArrayList();} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // while_statement ::= TK_WHILE error TK_END TK_WHILE 
            {
              Statements RESULT =null;
		System.err.println("Error inside While block");foundError=true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // while_statement ::= TK_WHILE expression statements TK_END error 
            {
              Statements RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statements stmnts = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		foundError=true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // do_statement ::= TK_DO TK_WHILE expression statements TK_LOOP 
            {
              Statements RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statements stmnts = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		if(!foundError){ RESULT = new DoStatement("Do","While",listastatements,"Loop",null,expr);listastatements = new ArrayList();} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("do_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // do_statement ::= TK_DO statements TK_LOOP TK_UNTIL expression 
            {
              Statements RESULT =null;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements stmnts = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!foundError){ RESULT = new DoStatement("Do",null,listastatements,"Loop","Until",expr);listastatements = new ArrayList();} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("do_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // do_statement ::= TK_DO error TK_LOOP TK_UNTIL expression 
            {
              Statements RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.err.println("Error inside Do Loop");foundError=true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("do_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // do_statement ::= TK_DO TK_WHILE error TK_LOOP 
            {
              Statements RESULT =null;
		System.err.println("Error in Do While");foundError=true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("do_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // do_statement ::= TK_DO TK_WHILE expression error 
            {
              Statements RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.err.println("Error after Do While statement ");foundError=true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("do_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // variable_declaration ::= variable_declarator TK_COMMA variable_declaration 
            {
              VariableDeclaration RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VariableDeclarator var = (VariableDeclarator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int var_declareleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var_declareright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VariableDeclaration var_declare = (VariableDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(!foundError){RESULT = new VariableDeclaration(var,var_declare);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // variable_declaration ::= variable_declarator 
            {
              VariableDeclaration RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VariableDeclarator var = (VariableDeclarator)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(!foundError){RESULT = new VariableDeclaration(var,null);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // variable_declarator ::= TK_DIM TK_ID TK_AS data_type TK_EQUALS expression 
            {
              VariableDeclarator RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(!foundError){RESULT = new VariableDeclarator("Dim",id,"As",type,"=",expr);
                                                                                                               String auxtype = expr.bringType();
                                                                                                               if(auxtype==type){
                                                                                                                    if(!tableIds.addNode(new IdNode(id,type))){//revisar si expr tiene el mismo type que id
                                                                                                                         System.err.println("Variable id "+id+" already exists.");//No estoy seguro si foundError debe cambiar
                                                                                                                    }
                                                                                                               }else{ 
                                                                                                                    if(auxtype=="none"){ 
                                                                                                                        auxtype = tableIds.searchNodeType(expr.getId(),"none");
                                                                                                                        if(!(auxtype==type))
                                                                                                                            System.err.println("Error with variable "+id+". Type "+auxtype+" has no implicit conversion to "+type+".");
                                                                                                                    }else   
                                                                                                                        System.err.println("Error with variable "+id+". Type "+auxtype+" has no implicit conversion to "+type+".");
                                                                                                               }
                                                                                                            }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declarator",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // variable_declarator ::= TK_ID TK_AS data_type TK_EQUALS expression 
            {
              VariableDeclarator RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(!foundError){RESULT = new VariableDeclarator(id,"As",type,"=",expr);
                                                                                                                String auxtype = expr.bringType();
                                                                                                               if(auxtype==type){
                                                                                                                    if(!tableIds.addNode(new IdNode(id,type))){//revisar si expr tiene el mismo type que id
                                                                                                                         System.err.println("Variable id "+id+" already exists.");//No estoy seguro si foundError debe cambiar
                                                                                                                    }
                                                                                                               }else{ 
                                                                                                                    if(auxtype=="none"){ 
                                                                                                                        auxtype = tableIds.searchNodeType(expr.getId(),"none");
                                                                                                                        if(!(auxtype==type))
                                                                                                                            System.err.println("Error with variable "+id+". Type "+auxtype+" has no implicit conversion to "+type+".");
                                                                                                                    }else   
                                                                                                                        System.err.println("Error with variable "+id+". Type "+auxtype+" has no implicit conversion to "+type+".");
                                                                                                               }
                                                                                                            }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declarator",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // variable_declarator ::= TK_DIM TK_ID TK_EQUALS expression 
            {
              VariableDeclarator RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(!foundError){RESULT = new VariableDeclarator("Dim",id,"=",expr);
                                                                                                               String auxtype1 =tableIds.searchNodeType(id,"none");
                                                                                                               String auxtype2 = expr.bringType();
                                                                                                               if(auxtype2=="none"){ auxtype2 = tableIds.searchNodeType(expr.getId(),"none");}
                                                                                                               if(auxtype1 != auxtype2){System.err.println("Error with variable "+id+". Type "+auxtype2+" has no implicit conversion to "+auxtype1+".");}
                                                                                                            } 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declarator",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // variable_declarator ::= TK_ID TK_EQUALS expression 
            {
              VariableDeclarator RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(!foundError){RESULT = new VariableDeclarator(id,"=",expr);
                                                                                                               String auxtype1 =tableIds.searchNodeType(id,"none");
                                                                                                               String auxtype2 = expr.bringType();
                                                                                                               if(auxtype2=="none"){ auxtype2 = tableIds.searchNodeType(expr.getId(),"none");}
                                                                                                               if(auxtype1 != auxtype2){System.err.println("Error with variable "+id+". Type "+auxtype2+" has no implicit conversion to "+auxtype1+".");}
                                                                                                            }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declarator",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expression ::= numeric_expression 
            {
              Expression RESULT =null;
		int num_expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int num_expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NumericExpression num_exp = (NumericExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(!foundError){RESULT = new NumericExpression(((NumericExpression)num_exp).getExpression1(),((NumericExpression)num_exp).getExpression2(),((NumericExpression)num_exp).getOperador(),null);} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expression ::= boolean_expression 
            {
              Expression RESULT =null;
		int bool_expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bool_expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BooleanExpression bool_exp = (BooleanExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!foundError){RESULT = new BooleanExpression(((BooleanExpression)bool_exp).getExpression1(), ((BooleanExpression)bool_exp).getOperador(), ((BooleanExpression)bool_exp).getExpression2(),null);} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expression ::= logical_expression 
            {
              Expression RESULT =null;
		int logic_expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int logic_expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LogicalExpression logic_exp = (LogicalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!foundError){RESULT = new LogicalExpression(((LogicalExpression)logic_exp).isValue(),((LogicalExpression)logic_exp).getOperador(),((LogicalExpression)logic_exp).getExpression1(),((LogicalExpression)logic_exp).getExpression2(),null);} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expression ::= literal_expression 
            {
              Expression RESULT =null;
		int lit_expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lit_expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LiteralExpression lit_exp = (LiteralExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!foundError){RESULT = new LiteralExpression(((LiteralExpression)lit_exp).getStringval(),((LiteralExpression)lit_exp).getNumber(),null);} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expression ::= TK_ID 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!foundError){RESULT = new Expression(id);} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expression ::= function_call 
            {
              Expression RESULT =null;
		int callleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int callright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression call = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!foundError){RESULT = new FunctionCall(((FunctionCall)call).getArguments(),((FunctionCall)call).getId());} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // boolean_expression ::= expression TK_GREATERTHAN expression 
            {
              BooleanExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(!foundError){RESULT = new BooleanExpression(e1,">",e2,null);
                                                                                            String auxtype = e1.bringType();
                                                                                            if(auxtype != "Integer"){
                                                                                                if(auxtype == "none"){
                                                                                                    auxtype = tableIds.searchNodeType(e1.getId(),"none");
                                                                                                    if(auxtype != "Integer"){System.err.println("Error with variable "+e1.getId()+", not an Integer. Is "+auxtype+".");}
                                                                                                }else{System.err.println("Error at *expression1* > *expression2*, expression1 is not an Integer. Is "+auxtype+".");}
                                                                                            }
                                                                                            String auxtype2 = e2.bringType();
                                                                                            if(auxtype2 != "Integer"){
                                                                                                if(auxtype2 == "none"){
                                                                                                    auxtype2 = tableIds.searchNodeType(e2.getId(),"none");
                                                                                                    if(auxtype2 != "Integer"){System.err.println("Error with variable "+e2.getId()+", not an Integer. Is "+auxtype2+".");}
                                                                                                }else{System.err.println("Error at *expression1* > *expression2*,expression2 not an Integer. Is "+auxtype2+".");}
                                                                                            }                                                                                     
                                                                                        }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // boolean_expression ::= expression TK_LESSTHAN expression 
            {
              BooleanExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(!foundError){RESULT = new BooleanExpression(e1,"<",e2,null);
                                                                                            String auxtype = e1.bringType();
                                                                                            if(auxtype != "Integer"){
                                                                                                if(auxtype == "none"){
                                                                                                    auxtype = tableIds.searchNodeType(e1.getId(),"none");
                                                                                                    if(auxtype != "Integer"){System.err.println("Error with variable "+e1.getId()+", not an Integer. Is "+auxtype+".");}
                                                                                                }else{System.err.println("Error at *expression1* > *expression2*, expression1 is not an Integer. Is "+auxtype+".");}
                                                                                            }
                                                                                            String auxtype2 = e2.bringType();
                                                                                            if(auxtype2 != "Integer"){
                                                                                                if(auxtype2 == "none"){
                                                                                                    auxtype2 = tableIds.searchNodeType(e2.getId(),"none");
                                                                                                    if(auxtype2 != "Integer"){System.err.println("Error with variable "+e2.getId()+", not an Integer. Is "+auxtype2+".");}
                                                                                                }else{System.err.println("Error at *expression1* < *expression2*,expression2 not an Integer. Is "+auxtype2+".");}
                                                                                            } 
                                                                                        }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // boolean_expression ::= expression TK_GREATEREQUAL expression 
            {
              BooleanExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(!foundError){RESULT = new BooleanExpression(e1,">=",e2,null);
                                                                                            String auxtype = e1.bringType();
                                                                                            if(auxtype != "Integer"){
                                                                                                if(auxtype == "none"){
                                                                                                    auxtype = tableIds.searchNodeType(e1.getId(),"none");
                                                                                                    if(auxtype != "Integer"){System.err.println("Error with variable "+e1.getId()+", not an Integer. Is "+auxtype+".");}
                                                                                                }else{System.err.println("Error at *expression1* >= *expression2*, expression1 is not an Integer. Is "+auxtype+".");}
                                                                                            }
                                                                                            String auxtype2 = e2.bringType();
                                                                                            if(auxtype2 != "Integer"){
                                                                                                if(auxtype2 == "none"){
                                                                                                    auxtype2 = tableIds.searchNodeType(e2.getId(),"none");
                                                                                                    if(auxtype2 != "Integer"){System.err.println("Error with variable "+e2.getId()+", not an Integer. Is "+auxtype2+".");}
                                                                                                }else{System.err.println("Error at *expression1* >= *expression2*,expression2 not an Integer. Is "+auxtype2+".");}
                                                                                            } 
                                                                                        }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // boolean_expression ::= expression TK_LESSEQUAL expression 
            {
              BooleanExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(!foundError){RESULT = new BooleanExpression(e1,"<=",e2,null);
                                                                                            String auxtype = e1.bringType();
                                                                                            if(auxtype != "Integer"){
                                                                                                if(auxtype == "none"){
                                                                                                    auxtype = tableIds.searchNodeType(e1.getId(),"none");
                                                                                                    if(auxtype != "Integer"){System.err.println("Error with variable "+e1.getId()+", not an Integer. Is "+auxtype+".");}
                                                                                                }else{System.err.println("Error at *expression1* <= *expression2*, expression1 is not an Integer. Is "+auxtype+".");}
                                                                                            }
                                                                                            String auxtype2 = e2.bringType();
                                                                                            if(auxtype2 != "Integer"){
                                                                                                if(auxtype2 == "none"){
                                                                                                    auxtype2 = tableIds.searchNodeType(e2.getId(),"none");
                                                                                                    if(auxtype2 != "Integer"){System.err.println("Error with variable "+e2.getId()+", not an Integer. Is "+auxtype2+".");}
                                                                                                }else{System.err.println("Error at *expression1* <= *expression2*,expression2 not an Integer. Is "+auxtype2+".");}
                                                                                            }
                                                                                        }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // boolean_expression ::= expression TK_EQUALS expression 
            {
              BooleanExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(!foundError){RESULT = new BooleanExpression(e1,"=",e2,null);
                                                                                            String auxtype = e1.bringType();
                                                                                            if(auxtype != "Integer"){
                                                                                                if(auxtype == "none"){
                                                                                                    auxtype = tableIds.searchNodeType(e1.getId(),"none");
                                                                                                    if(auxtype != "Integer"){System.err.println("Error with variable "+e1.getId()+", not an Integer. Is "+auxtype+".");}
                                                                                                }else{System.err.println("Error at *expression1* = *expression2*, expression1 is not an Integer. Is "+auxtype+".");}
                                                                                            }
                                                                                            String auxtype2 = e2.bringType();
                                                                                            if(auxtype2 != "Integer"){
                                                                                                if(auxtype2 == "none"){
                                                                                                    auxtype2 = tableIds.searchNodeType(e2.getId(),"none");
                                                                                                    if(auxtype2 != "Integer"){System.err.println("Error with variable "+e2.getId()+", not an Integer. Is "+auxtype2+".");}
                                                                                                }else{System.err.println("Error at *expression1* = *expression2*,expression2 not an Integer. Is "+auxtype2+".");}
                                                                                            }
                                                                                        }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // boolean_expression ::= expression TK_NOTEQUAL expression 
            {
              BooleanExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(!foundError){RESULT = new BooleanExpression(e1,"<>",e2,null);
                                                                                            String auxtype = e1.bringType();
                                                                                            if(auxtype != "Integer"){
                                                                                                if(auxtype == "none"){
                                                                                                    auxtype = tableIds.searchNodeType(e1.getId(),"none");
                                                                                                    if(auxtype != "Integer"){System.err.println("Error with variable "+e1.getId()+", not an Integer. Is "+auxtype+".");}
                                                                                                }else{System.err.println("Error at *expression1* <> *expression2*, expression1 is not an Integer. Is "+auxtype+".");}
                                                                                            }
                                                                                            String auxtype2 = e2.bringType();
                                                                                            if(auxtype2 != "Integer"){
                                                                                                if(auxtype2 == "none"){
                                                                                                    auxtype2 = tableIds.searchNodeType(e2.getId(),"none");
                                                                                                    if(auxtype2 != "Integer"){System.err.println("Error with variable "+e2.getId()+", not an Integer. Is "+auxtype2+".");}
                                                                                                }else{System.err.println("Error at *expression1* <> *expression2*,expression2 not an Integer. Is "+auxtype2+".");}
                                                                                            }
                                                                                        } 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // logical_expression ::= TK_NOT expression 
            {
              LogicalExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!foundError){RESULT = new LogicalExpression("Not",e1,null);
                                                                           String auxtype = e1.bringType();
                                                                            if(auxtype != "Boolean"){
                                                                                if(auxtype == "none"){
                                                                                    auxtype = tableIds.searchNodeType(e1.getId(),"none");
                                                                                    if(auxtype != "Boolean"){System.err.println("Error with variable "+e1.getId()+", not a boolean expression. Is "+auxtype+".");}
                                                                                }else{System.err.println("Error at NOT *expression*, not a boolean expression. Is "+auxtype+".");}
                                                                            }
                                                                                
                                                                        }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_expression",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // logical_expression ::= TK_NOT TK_PARIN expression TK_PAROUT 
            {
              LogicalExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		if(!foundError){RESULT = new LogicalExpression("Not",e1,null);
                                                                           String auxtype = e1.bringType();
                                                                            if(auxtype != "Boolean"){
                                                                                if(auxtype == "none"){
                                                                                    auxtype = tableIds.searchNodeType(e1.getId(),"none");
                                                                                    if(auxtype != "Boolean"){System.err.println("Error with variable "+e1.getId()+", not a boolean expression. Is "+auxtype+".");}
                                                                                }else{System.err.println("Error at NOT *(expression)*, not a boolean expression. Is "+auxtype+".");}
                                                                            }
                                                                                
                                                                        }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_expression",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // logical_expression ::= expression TK_OR expression 
            {
              LogicalExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!foundError){RESULT = new LogicalExpression("Or",e1,e2,null);
                                                                            String auxtype = e1.bringType();
                                                                            if(auxtype != "Boolean"){
                                                                                if(auxtype == "none"){
                                                                                    auxtype = tableIds.searchNodeType(e1.getId(),"none");
                                                                                    if(auxtype != "Boolean"){System.err.println("Error with variable "+e1.getId()+", not a boolean expression. Is "+auxtype+".");}
                                                                                }else{System.err.println("Error at *expression* Or *expression*, not a boolean expression. Is "+auxtype+".");}
                                                                            }
                                                                            String auxtype2 = e2.bringType();
                                                                            if(auxtype2 != "Boolean"){
                                                                                if(auxtype2 == "none"){
                                                                                    auxtype2 = tableIds.searchNodeType(e2.getId(),"none");
                                                                                    if(auxtype2 != "Boolean"){System.err.println("Error with variable "+e2.getId()+", not a boolean expression. Is "+auxtype2+".");}
                                                                                }else{System.err.println("Error at *expression* Or *expression*, not a boolean expression. Is "+auxtype2+".");}
                                                                            }
                                                                        }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_expression",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // logical_expression ::= expression TK_AND expression 
            {
              LogicalExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!foundError){RESULT = new LogicalExpression("And",e1,e2,null);
                                                                            String auxtype = e1.bringType();
                                                                            if(auxtype != "Boolean"){
                                                                                if(auxtype == "none"){
                                                                                    auxtype = tableIds.searchNodeType(e1.getId(),"none");
                                                                                    if(auxtype != "Boolean"){System.err.println("Error with variable "+e1.getId()+", not a boolean expression. Is "+auxtype+".");}
                                                                                }else{System.err.println("Error at *expression* And *expression*, not a boolean expression. Is "+auxtype+".");}
                                                                            }
                                                                            String auxtype2 = e2.bringType();
                                                                            if(auxtype2 != "Boolean"){
                                                                                if(auxtype2 == "none"){
                                                                                    auxtype2 = tableIds.searchNodeType(e2.getId(),"none");
                                                                                    if(auxtype2 != "Boolean"){System.err.println("Error with variable "+e2.getId()+", not a boolean expression. Is "+auxtype2+".");}
                                                                                }else{System.err.println("Error at *expression* And *expression*, not a boolean expression. Is "+auxtype2+".");}
                                                                            }
                                                                        } 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_expression",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // logical_expression ::= expression TK_XOR expression 
            {
              LogicalExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!foundError){RESULT = new LogicalExpression("Xor",e1,e2,null);
                                                                            String auxtype = e1.bringType();
                                                                            if(auxtype != "Boolean"){
                                                                                if(auxtype == "none"){
                                                                                    auxtype = tableIds.searchNodeType(e1.getId(),"none");
                                                                                    if(auxtype != "Boolean"){System.err.println("Error with variable "+e1.getId()+", not a boolean expression. Is "+auxtype+".");}
                                                                                }else{System.err.println("Error at *expression* Xor *expression*, not a boolean expression. Is "+auxtype+".");}
                                                                            }
                                                                            String auxtype2 = e2.bringType();
                                                                            if(auxtype2 != "Boolean"){
                                                                                if(auxtype2 == "none"){
                                                                                    auxtype2 = tableIds.searchNodeType(e2.getId(),"none");
                                                                                    if(auxtype2 != "Boolean"){System.err.println("Error with variable "+e2.getId()+", not a boolean expression. Is "+auxtype2+".");}
                                                                                }else{System.err.println("Error at *expression* Xor *expression*, not a boolean expression. Is "+auxtype2+".");}
                                                                            }
                                                                        } 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_expression",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // logical_expression ::= TK_TRUE 
            {
              LogicalExpression RESULT =null;
		if(!foundError){RESULT = new LogicalExpression(true,null);} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_expression",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // logical_expression ::= TK_FALSE 
            {
              LogicalExpression RESULT =null;
		if(!foundError){RESULT = new LogicalExpression(false,null);} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_expression",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // numeric_expression ::= expression TK_SUM expression 
            {
              NumericExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!foundError){RESULT = new NumericExpression(e1,e2,"+",null);
                                                                            String auxtype = e1.bringType();
                                                                            if(auxtype != "Integer"){
                                                                                if(auxtype == "none"){
                                                                                    auxtype = tableIds.searchNodeType(e1.getId(),"none");
                                                                                    if(auxtype != "Integer"){System.err.println("Error with variable "+e1.getId()+", not a numeric expression. Is "+auxtype+".");}
                                                                                }else{System.err.println("Error at *expression* + *expression*, not a numeric expression. Is "+auxtype+".");}
                                                                            }
                                                                            String auxtype2 = e2.bringType();
                                                                            if(auxtype2 != "Integer"){
                                                                                if(auxtype2 == "none"){
                                                                                    auxtype2 = tableIds.searchNodeType(e2.getId(),"none");
                                                                                    if(auxtype2 != "Integer"){System.err.println("Error with variable "+e2.getId()+", not a numeric expression. Is "+auxtype2+".");}
                                                                                }else{System.err.println("Error at *expression* + *expression*, not a numeric expression. Is "+auxtype2+".");}
                                                                            }
                                                                        } 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_expression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // numeric_expression ::= expression TK_MINUS expression 
            {
              NumericExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!foundError){RESULT = new NumericExpression(e1,e2,"-",null);
                                                                            String auxtype = e1.bringType();
                                                                            if(auxtype != "Integer"){
                                                                                if(auxtype == "none"){
                                                                                    auxtype = tableIds.searchNodeType(e1.getId(),"none");
                                                                                    if(auxtype != "Integer"){System.err.println("Error with variable "+e1.getId()+", not a numeric expression. Is "+auxtype+".");}
                                                                                }else{System.err.println("Error at *expression* - *expression*, not a numeric expression. Is "+auxtype+".");}
                                                                            }
                                                                            String auxtype2 = e2.bringType();
                                                                            if(auxtype2 != "Integer"){
                                                                                if(auxtype2 == "none"){
                                                                                    auxtype2 = tableIds.searchNodeType(e2.getId(),"none");
                                                                                    if(auxtype2 != "Integer"){System.err.println("Error with variable "+e2.getId()+", not a numeric expression. Is "+auxtype2+".");}
                                                                                }else{System.err.println("Error at *expression* - *expression*, not a numeric expression. Is "+auxtype2+".");}
                                                                            }
                                                                        } 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_expression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // numeric_expression ::= expression TK_PRODUCT expression 
            {
              NumericExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!foundError){RESULT = new NumericExpression(e1,e2,"*",null);
                                                                            String auxtype = e1.bringType();
                                                                            if(auxtype != "Integer"){
                                                                                if(auxtype == "none"){
                                                                                    auxtype = tableIds.searchNodeType(e1.getId(),"none");
                                                                                    if(auxtype != "Integer"){System.err.println("Error with variable "+e1.getId()+", not a numeric expression. Is "+auxtype+".");}
                                                                                }else{System.err.println("Error at *expression* * *expression*, not a numeric expression. Is "+auxtype+".");}
                                                                            }
                                                                            String auxtype2 = e2.bringType();
                                                                            if(auxtype2 != "Integer"){
                                                                                if(auxtype2 == "none"){
                                                                                    auxtype2 = tableIds.searchNodeType(e2.getId(),"none");
                                                                                    if(auxtype2 != "Integer"){System.err.println("Error with variable "+e2.getId()+", not a numeric expression. Is "+auxtype2+".");}
                                                                                }else{System.err.println("Error at *expression* * *expression*, not a numeric expression. Is "+auxtype2+".");}
                                                                            }
                                                                        } 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_expression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // numeric_expression ::= expression TK_DIVISION expression 
            {
              NumericExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!foundError){RESULT = new NumericExpression(e1,e2,"/",null);
                                                                            String auxtype = e1.bringType();
                                                                            if(auxtype != "Integer"){
                                                                                if(auxtype == "none"){
                                                                                    auxtype = tableIds.searchNodeType(e1.getId(),"none");
                                                                                    if(auxtype != "Integer"){System.err.println("Error with variable "+e1.getId()+", not a numeric expression. Is "+auxtype+".");}
                                                                                }else{System.err.println("Error at *expression* / *expression*, not a numeric expression. Is "+auxtype+".");}
                                                                            }
                                                                            String auxtype2 = e2.bringType();
                                                                            if(auxtype2 != "Integer"){
                                                                                if(auxtype2 == "none"){
                                                                                    auxtype2 = tableIds.searchNodeType(e2.getId(),"none");
                                                                                    if(auxtype2 != "Integer"){System.err.println("Error with variable "+e2.getId()+", not a numeric expression. Is "+auxtype2+".");}
                                                                                }else{System.err.println("Error at *expression* / *expression*, not a numeric expression. Is "+auxtype2+".");}
                                                                            }
                                                                        } 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_expression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // numeric_expression ::= expression TK_AMPERSAND expression 
            {
              NumericExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!foundError){RESULT = new NumericExpression(e1,e2,"&",null);
                                                                            String auxtype = e1.bringType();
                                                                            if(auxtype != "String"){
                                                                                if(auxtype == "none"){
                                                                                    auxtype = tableIds.searchNodeType(e1.getId(),"none");
                                                                                    if(auxtype != "String"){System.err.println("Error with variable "+e1.getId()+", not a String. Is "+auxtype+".");}
                                                                                }else{System.err.println("Error at *expression* & *expression*, first expression is not a String. Is "+auxtype+".");}
                                                                            }
                                                                            String auxtype2 = e2.bringType();
                                                                            if(auxtype2 != "String"){
                                                                                if(auxtype2 == "none"){
                                                                                    auxtype2 = tableIds.searchNodeType(e2.getId(),"none");
                                                                                    if(auxtype2 != "String"){System.err.println("Error with variable "+e2.getId()+", not a String. Is "+auxtype2+".");}
                                                                                }else{System.err.println("Error at *expression* & *expression*, second expression is not a String. Is "+auxtype2+".");}
                                                                            }
                                                                        } 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_expression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // numeric_expression ::= expression TK_SUM error expression 
            {
              NumericExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.err.println("Error in numeric expression.");foundError=true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_expression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // numeric_expression ::= expression TK_MINUS error expression 
            {
              NumericExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.err.println("Error in numeric expression.");foundError=true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_expression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // numeric_expression ::= expression TK_PRODUCT error expression 
            {
              NumericExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.err.println("Error in numeric expression.");foundError=true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_expression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // numeric_expression ::= expression TK_DIVISION error expression 
            {
              NumericExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.err.println("Error in numeric expression.");foundError=true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_expression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // numeric_expression ::= expression TK_AMPERSAND error expression 
            {
              NumericExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.err.println("Error in numeric expression.");foundError=true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_expression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // literal_expression ::= TK_NUMBER 
            {
              LiteralExpression RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!foundError){RESULT = new LiteralExpression(null,num,null);} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_expression",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // literal_expression ::= TK_STRINGVAL 
            {
              LiteralExpression RESULT =null;
		int strValleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strValright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String strVal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!foundError){RESULT = new LiteralExpression(strVal,null,null);} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_expression",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // function_call ::= TK_ID TK_PARIN arguments TK_PAROUT 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Argument args = (Argument)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		if(!foundError){RESULT = new FunctionCall(listaarguments,i); listaarguments = new ArrayList();} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // function_call ::= TK_ID TK_PARIN TK_PAROUT 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		if(!foundError){RESULT = new FunctionCall(null,i);} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // function_call ::= TK_ID TK_PARIN error 
            {
              Expression RESULT =null;
		System.err.println("Function call expects ')'");foundError=true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // function_call ::= TK_ID TK_PARIN arguments error 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Argument args = (Argument)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.err.println("Function call expects2 ')'");foundError=true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // arguments ::= argument TK_COMMA arguments 
            {
              Argument RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Argument arg = (Argument)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Argument args = (Argument)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!foundError){listaarguments.add(arg);} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arguments",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // arguments ::= argument 
            {
              Argument RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Argument arg = (Argument)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!foundError){listaarguments.add(arg);} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arguments",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // argument ::= expression 
            {
              Argument RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!foundError){RESULT = new Argument(expr);} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argument",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
