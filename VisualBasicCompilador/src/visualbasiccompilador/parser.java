
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package visualbasiccompilador;

import java.util.*;
import java.io.*;
import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\126\000\002\002\003\000\002\002\004\000\002\003" +
    "\003\000\002\003\002\000\002\005\004\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\007\007\000" +
    "\002\010\012\000\002\010\011\000\002\010\012\000\002" +
    "\010\011\000\002\011\012\000\002\011\014\000\002\011" +
    "\013\000\002\011\011\000\002\012\005\000\002\012\003" +
    "\000\002\013\006\000\002\014\003\000\002\014\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\004\004\000\002\004\002\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\004\000\002\016\003\000" +
    "\002\017\010\000\002\017\012\000\002\017\011\000\002" +
    "\017\013\000\002\020\004\000\002\020\003\000\002\021" +
    "\005\000\002\022\010\000\002\023\007\000\002\023\006" +
    "\000\002\023\007\000\002\024\007\000\002\024\007\000" +
    "\002\024\007\000\002\024\006\000\002\024\006\000\002" +
    "\025\005\000\002\025\003\000\002\026\010\000\002\026" +
    "\007\000\002\026\006\000\002\026\005\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\031\005\000\002" +
    "\031\005\000\002\031\005\000\002\031\005\000\002\031" +
    "\005\000\002\033\004\000\002\033\005\000\002\033\005" +
    "\000\002\033\005\000\002\033\003\000\002\033\003\000" +
    "\002\030\005\000\002\030\005\000\002\030\005\000\002" +
    "\030\005\000\002\032\003\000\002\032\003\000\002\034" +
    "\006\000\002\034\005\000\002\034\005\000\002\035\005" +
    "\000\002\035\003\000\002\036\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\307\000\012\002\ufffe\026\011\027\004\030\005\001" +
    "\002\000\006\003\265\060\266\001\002\000\004\060\261" +
    "\001\002\000\010\026\011\027\004\030\005\001\002\000" +
    "\010\026\ufffb\027\ufffb\030\ufffb\001\002\000\004\002\001" +
    "\001\002\000\004\060\017\001\002\000\010\026\ufffc\027" +
    "\ufffc\030\ufffc\001\002\000\004\002\016\001\002\000\004" +
    "\002\uffff\001\002\000\010\026\ufffa\027\ufffa\030\ufffa\001" +
    "\002\000\004\002\000\001\002\000\004\047\020\001\002" +
    "\000\010\007\021\010\025\050\024\001\002\000\004\060" +
    "\uffed\001\002\000\004\060\255\001\002\000\004\050\244" +
    "\001\002\000\040\011\063\015\046\020\031\021\044\024" +
    "\053\025\060\040\057\052\045\053\062\054\uffe7\055\040" +
    "\056\033\057\041\060\064\061\043\001\002\000\004\060" +
    "\uffec\001\002\000\006\050\uffef\051\027\001\002\000\006" +
    "\007\021\010\025\001\002\000\004\050\ufff0\001\002\000" +
    "\040\003\226\011\063\015\046\017\uffe7\020\031\021\225" +
    "\024\053\025\060\040\057\052\045\055\040\056\033\057" +
    "\041\060\064\061\043\001\002\000\110\003\uffc6\011\uffc6" +
    "\012\uffc6\013\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6\020" +
    "\uffc6\021\uffc6\023\uffc6\024\uffc6\025\uffc6\031\uffc6\032\uffc6" +
    "\033\uffc6\034\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042" +
    "\uffc6\043\uffc6\044\uffc6\045\uffc6\046\uffc6\050\uffc6\051\uffc6" +
    "\052\uffc6\054\uffc6\055\uffc6\056\uffc6\057\uffc6\060\uffc6\061" +
    "\uffc6\001\002\000\016\024\053\025\060\040\057\057\041" +
    "\060\072\061\043\001\002\000\110\003\uffc5\011\uffc5\012" +
    "\uffc5\013\uffc5\014\uffc5\015\uffc5\016\uffc5\017\uffc5\020\uffc5" +
    "\021\uffc5\023\uffc5\024\uffc5\025\uffc5\031\uffc5\032\uffc5\033" +
    "\uffc5\034\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5" +
    "\043\uffc5\044\uffc5\045\uffc5\046\uffc5\050\uffc5\051\uffc5\052" +
    "\uffc5\054\uffc5\055\uffc5\056\uffc5\057\uffc5\060\uffc5\061\uffc5" +
    "\001\002\000\046\011\063\013\uffe7\014\uffe7\015\046\017" +
    "\uffe7\020\031\021\044\023\uffe7\024\053\025\060\040\057" +
    "\052\045\054\uffe7\055\040\056\033\057\041\060\064\061" +
    "\043\001\002\000\046\011\uffe6\013\uffe6\014\uffe6\015\uffe6" +
    "\017\uffe6\020\uffe6\021\uffe6\023\uffe6\024\uffe6\025\uffe6\040" +
    "\uffe6\052\uffe6\054\uffe6\055\uffe6\056\uffe6\057\uffe6\060\uffe6" +
    "\061\uffe6\001\002\000\046\011\uffe5\013\uffe5\014\uffe5\015" +
    "\uffe5\017\uffe5\020\uffe5\021\uffe5\023\uffe5\024\uffe5\025\uffe5" +
    "\040\uffe5\052\uffe5\054\uffe5\055\uffe5\056\uffe5\057\uffe5\060" +
    "\uffe5\061\uffe5\001\002\000\046\011\uffdf\013\uffdf\014\uffdf" +
    "\015\uffdf\017\uffdf\020\uffdf\021\uffdf\023\uffdf\024\uffdf\025" +
    "\uffdf\040\uffdf\052\uffdf\054\uffdf\055\uffdf\056\uffdf\057\uffdf" +
    "\060\uffdf\061\uffdf\001\002\000\110\003\uffb2\011\uffb2\012" +
    "\uffb2\013\uffb2\014\uffb2\015\uffb2\016\uffb2\017\uffb2\020\uffb2" +
    "\021\uffb2\023\uffb2\024\uffb2\025\uffb2\031\uffb2\032\uffb2\033" +
    "\uffb2\034\uffb2\036\uffb2\037\uffb2\040\uffb2\041\uffb2\042\uffb2" +
    "\043\uffb2\044\uffb2\045\uffb2\046\uffb2\050\uffb2\051\uffb2\052" +
    "\uffb2\054\uffb2\055\uffb2\056\uffb2\057\uffb2\060\uffb2\061\uffb2" +
    "\001\002\000\110\003\uffc3\011\uffc3\012\uffc3\013\uffc3\014" +
    "\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3\023\uffc3" +
    "\024\uffc3\025\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\036" +
    "\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3" +
    "\045\uffc3\046\uffc3\050\uffc3\051\uffc3\052\uffc3\054\uffc3\055" +
    "\uffc3\056\uffc3\057\uffc3\060\uffc3\061\uffc3\001\002\000\110" +
    "\003\uffb3\011\uffb3\012\uffb3\013\uffb3\014\uffb3\015\uffb3\016" +
    "\uffb3\017\uffb3\020\uffb3\021\uffb3\023\uffb3\024\uffb3\025\uffb3" +
    "\031\uffb3\032\uffb3\033\uffb3\034\uffb3\036\uffb3\037\uffb3\040" +
    "\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3\046\uffb3" +
    "\050\uffb3\051\uffb3\052\uffb3\054\uffb3\055\uffb3\056\uffb3\057" +
    "\uffb3\060\uffb3\061\uffb3\001\002\000\020\003\214\024\053" +
    "\025\060\040\057\057\041\060\072\061\043\001\002\000" +
    "\004\060\204\001\002\000\006\052\045\060\175\001\002" +
    "\000\046\011\uffe3\013\uffe3\014\uffe3\015\uffe3\017\uffe3\020" +
    "\uffe3\021\uffe3\023\uffe3\024\uffe3\025\uffe3\040\uffe3\052\uffe3" +
    "\054\uffe3\055\uffe3\056\uffe3\057\uffe3\060\uffe3\061\uffe3\001" +
    "\002\000\046\011\uffe4\013\uffe4\014\uffe4\015\uffe4\017\uffe4" +
    "\020\uffe4\021\uffe4\023\uffe4\024\uffe4\025\uffe4\040\uffe4\052" +
    "\uffe4\054\uffe4\055\uffe4\056\uffe4\057\uffe4\060\uffe4\061\uffe4" +
    "\001\002\000\076\011\uffe1\013\uffe1\014\uffe1\015\uffe1\017" +
    "\uffe1\020\uffe1\021\uffe1\023\uffe1\024\uffe1\025\uffe1\031\104" +
    "\032\110\033\077\034\105\036\101\037\106\040\uffe1\041" +
    "\103\042\102\043\107\044\111\045\076\046\100\052\uffe1" +
    "\054\uffe1\055\uffe1\056\uffe1\057\uffe1\060\uffe1\061\uffe1\001" +
    "\002\000\046\011\uffe2\013\uffe2\014\uffe2\015\uffe2\017\uffe2" +
    "\020\uffe2\021\uffe2\023\uffe2\024\uffe2\025\uffe2\040\uffe2\052" +
    "\uffe2\054\uffe2\055\uffe2\056\uffe2\057\uffe2\060\uffe2\061\uffe2" +
    "\001\002\000\110\003\uffb9\011\uffb9\012\uffb9\013\uffb9\014" +
    "\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9\023\uffb9" +
    "\024\uffb9\025\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9\036" +
    "\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9" +
    "\045\uffb9\046\uffb9\050\uffb9\051\uffb9\052\uffb9\054\uffb9\055" +
    "\uffb9\056\uffb9\057\uffb9\060\uffb9\061\uffb9\001\002\000\110" +
    "\003\uffc8\011\uffc8\012\uffc8\013\uffc8\014\uffc8\015\uffc8\016" +
    "\uffc8\017\uffc8\020\uffc8\021\uffc8\023\uffc8\024\uffc8\025\uffc8" +
    "\031\uffc8\032\uffc8\033\uffc8\034\uffc8\036\uffc8\037\uffc8\040" +
    "\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\046\uffc8" +
    "\050\uffc8\051\uffc8\052\uffc8\054\uffc8\055\uffc8\056\uffc8\057" +
    "\uffc8\060\uffc8\061\uffc8\001\002\000\052\011\uffcd\013\uffcd" +
    "\014\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd\023" +
    "\uffcd\024\uffcd\025\uffcd\040\uffcd\051\174\052\uffcd\054\uffcd" +
    "\055\uffcd\056\uffcd\057\uffcd\060\uffcd\061\uffcd\001\002\000" +
    "\004\054\172\001\002\000\016\024\053\025\060\040\057" +
    "\057\041\060\072\061\043\001\002\000\110\003\uffb8\011" +
    "\uffb8\012\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8" +
    "\020\uffb8\021\uffb8\023\uffb8\024\uffb8\025\uffb8\031\uffb8\032" +
    "\uffb8\033\uffb8\034\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8" +
    "\042\uffb8\043\uffb8\044\uffb8\045\uffb8\046\uffb8\050\uffb8\051" +
    "\uffb8\052\uffb8\054\uffb8\055\uffb8\056\uffb8\057\uffb8\060\uffb8" +
    "\061\uffb8\001\002\000\110\003\uffc7\011\uffc7\012\uffc7\013" +
    "\uffc7\014\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7" +
    "\023\uffc7\024\uffc7\025\uffc7\031\uffc7\032\uffc7\033\uffc7\034" +
    "\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7" +
    "\044\uffc7\045\uffc7\046\uffc7\050\uffc7\051\uffc7\052\uffc7\054" +
    "\uffc7\055\uffc7\056\uffc7\057\uffc7\060\uffc7\061\uffc7\001\002" +
    "\000\010\004\132\005\131\006\133\001\002\000\016\024" +
    "\053\025\060\040\057\057\041\060\072\061\043\001\002" +
    "\000\102\011\uffc4\013\uffc4\014\uffc4\015\uffc4\017\uffc4\020" +
    "\uffc4\021\uffc4\023\uffc4\024\uffc4\025\uffc4\031\uffc4\032\uffc4" +
    "\033\uffc4\034\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4\042" +
    "\uffc4\043\uffc4\044\uffc4\045\uffc4\046\065\047\067\052\uffc4" +
    "\053\066\054\uffc4\055\uffc4\056\uffc4\057\uffc4\060\uffc4\061" +
    "\uffc4\001\002\000\016\024\053\025\060\040\057\057\041" +
    "\060\072\061\043\001\002\000\010\004\132\005\131\006" +
    "\133\001\002\000\022\003\074\024\053\025\060\040\057" +
    "\050\075\057\041\060\072\061\043\001\002\000\006\050" +
    "\uffad\051\127\001\002\000\004\050\126\001\002\000\112" +
    "\003\uffc4\011\uffc4\012\uffc4\013\uffc4\014\uffc4\015\uffc4\016" +
    "\uffc4\017\uffc4\020\uffc4\021\uffc4\023\uffc4\024\uffc4\025\uffc4" +
    "\031\uffc4\032\uffc4\033\uffc4\034\uffc4\036\uffc4\037\uffc4\040" +
    "\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4" +
    "\047\067\050\uffc4\051\uffc4\052\uffc4\054\uffc4\055\uffc4\056" +
    "\uffc4\057\uffc4\060\uffc4\061\uffc4\001\002\000\036\031\104" +
    "\032\110\033\077\034\105\036\101\037\106\041\103\042" +
    "\102\043\107\044\111\045\076\046\100\050\uffac\051\uffac" +
    "\001\002\000\110\003\uffaf\011\uffaf\012\uffaf\013\uffaf\014" +
    "\uffaf\015\uffaf\016\uffaf\017\uffaf\020\uffaf\021\uffaf\023\uffaf" +
    "\024\uffaf\025\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf\036" +
    "\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf" +
    "\045\uffaf\046\uffaf\050\uffaf\051\uffaf\052\uffaf\054\uffaf\055" +
    "\uffaf\056\uffaf\057\uffaf\060\uffaf\061\uffaf\001\002\000\110" +
    "\003\uffb0\011\uffb0\012\uffb0\013\uffb0\014\uffb0\015\uffb0\016" +
    "\uffb0\017\uffb0\020\uffb0\021\uffb0\023\uffb0\024\uffb0\025\uffb0" +
    "\031\uffb0\032\uffb0\033\uffb0\034\uffb0\036\uffb0\037\uffb0\040" +
    "\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0" +
    "\050\uffb0\051\uffb0\052\uffb0\054\uffb0\055\uffb0\056\uffb0\057" +
    "\uffb0\060\uffb0\061\uffb0\001\002\000\016\024\053\025\060" +
    "\040\057\057\041\060\072\061\043\001\002\000\016\024" +
    "\053\025\060\040\057\057\041\060\072\061\043\001\002" +
    "\000\016\024\053\025\060\040\057\057\041\060\072\061" +
    "\043\001\002\000\016\024\053\025\060\040\057\057\041" +
    "\060\072\061\043\001\002\000\016\024\053\025\060\040" +
    "\057\057\041\060\072\061\043\001\002\000\016\024\053" +
    "\025\060\040\057\057\041\060\072\061\043\001\002\000" +
    "\016\024\053\025\060\040\057\057\041\060\072\061\043" +
    "\001\002\000\016\024\053\025\060\040\057\057\041\060" +
    "\072\061\043\001\002\000\016\024\053\025\060\040\057" +
    "\057\041\060\072\061\043\001\002\000\016\024\053\025" +
    "\060\040\057\057\041\060\072\061\043\001\002\000\016" +
    "\024\053\025\060\040\057\057\041\060\072\061\043\001" +
    "\002\000\016\024\053\025\060\040\057\057\041\060\072" +
    "\061\043\001\002\000\110\003\uffc0\011\uffc0\012\uffc0\013" +
    "\uffc0\014\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0" +
    "\023\uffc0\024\uffc0\025\uffc0\031\104\032\110\033\077\034" +
    "\105\036\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0" +
    "\044\uffc0\045\uffc0\046\uffc0\050\uffc0\051\uffc0\052\uffc0\054" +
    "\uffc0\055\uffc0\056\uffc0\057\uffc0\060\uffc0\061\uffc0\001\002" +
    "\000\110\003\uffb6\011\uffb6\012\uffb6\013\uffb6\014\uffb6\015" +
    "\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6\023\uffb6\024\uffb6" +
    "\025\uffb6\031\uffb6\032\uffb6\033\077\034\105\036\uffb6\037" +
    "\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6" +
    "\046\uffb6\050\uffb6\051\uffb6\052\uffb6\054\uffb6\055\uffb6\056" +
    "\uffb6\057\uffb6\060\uffb6\061\uffb6\001\002\000\110\003\uffc1" +
    "\011\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1\016\uffc1\017" +
    "\uffc1\020\uffc1\021\uffc1\023\uffc1\024\uffc1\025\uffc1\031\104" +
    "\032\110\033\077\034\105\036\uffc1\037\uffc1\040\uffc1\041" +
    "\uffc1\042\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1\050\uffc1" +
    "\051\uffc1\052\uffc1\054\uffc1\055\uffc1\056\uffc1\057\uffc1\060" +
    "\uffc1\061\uffc1\001\002\000\110\003\uffbc\011\uffbc\012\uffbc" +
    "\013\uffbc\014\uffbc\015\uffbc\016\uffbc\017\uffbc\020\uffbc\021" +
    "\uffbc\023\uffbc\024\uffbc\025\uffbc\031\104\032\110\033\077" +
    "\034\105\036\101\037\uffbc\040\uffbc\041\103\042\102\043" +
    "\107\044\111\045\076\046\100\050\uffbc\051\uffbc\052\uffbc" +
    "\054\uffbc\055\uffbc\056\uffbc\057\uffbc\060\uffbc\061\uffbc\001" +
    "\002\000\110\003\uffb4\011\uffb4\012\uffb4\013\uffb4\014\uffb4" +
    "\015\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4\023\uffb4\024" +
    "\uffb4\025\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4\036\uffb4" +
    "\037\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\045" +
    "\uffb4\046\uffb4\050\uffb4\051\uffb4\052\uffb4\054\uffb4\055\uffb4" +
    "\056\uffb4\057\uffb4\060\uffb4\061\uffb4\001\002\000\110\003" +
    "\uffb7\011\uffb7\012\uffb7\013\uffb7\014\uffb7\015\uffb7\016\uffb7" +
    "\017\uffb7\020\uffb7\021\uffb7\023\uffb7\024\uffb7\025\uffb7\031" +
    "\uffb7\032\uffb7\033\077\034\105\036\uffb7\037\uffb7\040\uffb7" +
    "\041\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7\046\uffb7\050" +
    "\uffb7\051\uffb7\052\uffb7\054\uffb7\055\uffb7\056\uffb7\057\uffb7" +
    "\060\uffb7\061\uffb7\001\002\000\110\003\uffba\011\uffba\012" +
    "\uffba\013\uffba\014\uffba\015\uffba\016\uffba\017\uffba\020\uffba" +
    "\021\uffba\023\uffba\024\uffba\025\uffba\031\104\032\110\033" +
    "\077\034\105\036\101\037\uffba\040\uffba\041\103\042\102" +
    "\043\107\044\111\045\076\046\100\050\uffba\051\uffba\052" +
    "\uffba\054\uffba\055\uffba\056\uffba\057\uffba\060\uffba\061\uffba" +
    "\001\002\000\110\003\uffc2\011\uffc2\012\uffc2\013\uffc2\014" +
    "\uffc2\015\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2\023\uffc2" +
    "\024\uffc2\025\uffc2\031\104\032\110\033\077\034\105\036" +
    "\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2" +
    "\045\uffc2\046\uffc2\050\uffc2\051\uffc2\052\uffc2\054\uffc2\055" +
    "\uffc2\056\uffc2\057\uffc2\060\uffc2\061\uffc2\001\002\000\110" +
    "\003\uffbb\011\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb\016" +
    "\uffbb\017\uffbb\020\uffbb\021\uffbb\023\uffbb\024\uffbb\025\uffbb" +
    "\031\104\032\110\033\077\034\105\036\uffbb\037\uffbb\040" +
    "\uffbb\041\uffbb\042\102\043\107\044\111\045\076\046\100" +
    "\050\uffbb\051\uffbb\052\uffbb\054\uffbb\055\uffbb\056\uffbb\057" +
    "\uffbb\060\uffbb\061\uffbb\001\002\000\110\003\uffbe\011\uffbe" +
    "\012\uffbe\013\uffbe\014\uffbe\015\uffbe\016\uffbe\017\uffbe\020" +
    "\uffbe\021\uffbe\023\uffbe\024\uffbe\025\uffbe\031\104\032\110" +
    "\033\077\034\105\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042" +
    "\uffbe\043\uffbe\044\uffbe\045\uffbe\046\uffbe\050\uffbe\051\uffbe" +
    "\052\uffbe\054\uffbe\055\uffbe\056\uffbe\057\uffbe\060\uffbe\061" +
    "\uffbe\001\002\000\110\003\uffb5\011\uffb5\012\uffb5\013\uffb5" +
    "\014\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\023" +
    "\uffb5\024\uffb5\025\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5" +
    "\036\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044" +
    "\uffb5\045\uffb5\046\uffb5\050\uffb5\051\uffb5\052\uffb5\054\uffb5" +
    "\055\uffb5\056\uffb5\057\uffb5\060\uffb5\061\uffb5\001\002\000" +
    "\110\003\uffbf\011\uffbf\012\uffbf\013\uffbf\014\uffbf\015\uffbf" +
    "\016\uffbf\017\uffbf\020\uffbf\021\uffbf\023\uffbf\024\uffbf\025" +
    "\uffbf\031\104\032\110\033\077\034\105\036\uffbf\037\uffbf" +
    "\040\uffbf\041\uffbf\042\uffbf\043\uffbf\044\uffbf\045\uffbf\046" +
    "\uffbf\050\uffbf\051\uffbf\052\uffbf\054\uffbf\055\uffbf\056\uffbf" +
    "\057\uffbf\060\uffbf\061\uffbf\001\002\000\110\003\uffb1\011" +
    "\uffb1\012\uffb1\013\uffb1\014\uffb1\015\uffb1\016\uffb1\017\uffb1" +
    "\020\uffb1\021\uffb1\023\uffb1\024\uffb1\025\uffb1\031\uffb1\032" +
    "\uffb1\033\uffb1\034\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1" +
    "\042\uffb1\043\uffb1\044\uffb1\045\uffb1\046\uffb1\050\uffb1\051" +
    "\uffb1\052\uffb1\054\uffb1\055\uffb1\056\uffb1\057\uffb1\060\uffb1" +
    "\061\uffb1\001\002\000\016\024\053\025\060\040\057\057" +
    "\041\060\072\061\043\001\002\000\004\050\uffae\001\002" +
    "\000\044\011\uffea\015\uffea\020\uffea\021\uffea\024\uffea\025" +
    "\uffea\040\uffea\046\uffea\050\uffea\051\uffea\052\uffea\054\uffea" +
    "\055\uffea\056\uffea\057\uffea\060\uffea\061\uffea\001\002\000" +
    "\044\011\uffeb\015\uffeb\020\uffeb\021\uffeb\024\uffeb\025\uffeb" +
    "\040\uffeb\046\uffeb\050\uffeb\051\uffeb\052\uffeb\054\uffeb\055" +
    "\uffeb\056\uffeb\057\uffeb\060\uffeb\061\uffeb\001\002\000\044" +
    "\011\uffe9\015\uffe9\020\uffe9\021\uffe9\024\uffe9\025\uffe9\040" +
    "\uffe9\046\uffe9\050\uffe9\051\uffe9\052\uffe9\054\uffe9\055\uffe9" +
    "\056\uffe9\057\uffe9\060\uffe9\061\uffe9\001\002\000\004\046" +
    "\135\001\002\000\016\024\053\025\060\040\057\057\041" +
    "\060\072\061\043\001\002\000\102\011\uffcb\013\uffcb\014" +
    "\uffcb\015\uffcb\016\uffcb\017\uffcb\020\uffcb\021\uffcb\023\uffcb" +
    "\024\uffcb\025\uffcb\031\104\032\110\033\077\034\105\036" +
    "\101\037\106\040\uffcb\041\103\042\102\043\107\044\111" +
    "\045\076\046\100\051\uffcb\052\uffcb\054\uffcb\055\uffcb\056" +
    "\uffcb\057\uffcb\060\uffcb\061\uffcb\001\002\000\102\011\uffc9" +
    "\013\uffc9\014\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9\021" +
    "\uffc9\023\uffc9\024\uffc9\025\uffc9\031\104\032\110\033\077" +
    "\034\105\036\101\037\106\040\uffc9\041\103\042\102\043" +
    "\107\044\111\045\076\046\100\051\uffc9\052\uffc9\054\uffc9" +
    "\055\uffc9\056\uffc9\057\uffc9\060\uffc9\061\uffc9\001\002\000" +
    "\034\012\141\031\104\032\110\033\077\034\105\036\101" +
    "\037\106\041\103\042\102\043\107\044\111\045\076\046" +
    "\100\001\002\000\042\011\063\013\uffe7\014\uffe7\015\046" +
    "\020\031\021\044\024\053\025\060\040\057\052\045\054" +
    "\uffe7\055\040\056\033\057\041\060\064\061\043\001\002" +
    "\000\010\013\143\014\147\054\145\001\002\000\016\024" +
    "\053\025\060\040\057\057\041\060\072\061\043\001\002" +
    "\000\006\014\156\054\155\001\002\000\004\011\154\001" +
    "\002\000\010\013\143\014\uffd9\054\uffd9\001\002\000\036" +
    "\011\063\015\046\020\031\021\044\024\053\025\060\040" +
    "\057\052\045\054\uffe7\055\040\056\033\057\041\060\064" +
    "\061\043\001\002\000\004\054\151\001\002\000\004\011" +
    "\152\001\002\000\046\011\uffdd\013\uffdd\014\uffdd\015\uffdd" +
    "\017\uffdd\020\uffdd\021\uffdd\023\uffdd\024\uffdd\025\uffdd\040" +
    "\uffdd\052\uffdd\054\uffdd\055\uffdd\056\uffdd\057\uffdd\060\uffdd" +
    "\061\uffdd\001\002\000\006\014\uffda\054\uffda\001\002\000" +
    "\046\011\uffde\013\uffde\014\uffde\015\uffde\017\uffde\020\uffde" +
    "\021\uffde\023\uffde\024\uffde\025\uffde\040\uffde\052\uffde\054" +
    "\uffde\055\uffde\056\uffde\057\uffde\060\uffde\061\uffde\001\002" +
    "\000\004\011\162\001\002\000\036\011\063\015\046\020" +
    "\031\021\044\024\053\025\060\040\057\052\045\054\uffe7" +
    "\055\040\056\033\057\041\060\064\061\043\001\002\000" +
    "\004\054\160\001\002\000\004\011\161\001\002\000\046" +
    "\011\uffdb\013\uffdb\014\uffdb\015\uffdb\017\uffdb\020\uffdb\021" +
    "\uffdb\023\uffdb\024\uffdb\025\uffdb\040\uffdb\052\uffdb\054\uffdb" +
    "\055\uffdb\056\uffdb\057\uffdb\060\uffdb\061\uffdb\001\002\000" +
    "\046\011\uffdc\013\uffdc\014\uffdc\015\uffdc\017\uffdc\020\uffdc" +
    "\021\uffdc\023\uffdc\024\uffdc\025\uffdc\040\uffdc\052\uffdc\054" +
    "\uffdc\055\uffdc\056\uffdc\057\uffdc\060\uffdc\061\uffdc\001\002" +
    "\000\034\012\164\031\104\032\110\033\077\034\105\036" +
    "\101\037\106\041\103\042\102\043\107\044\111\045\076" +
    "\046\100\001\002\000\010\013\uffd8\014\uffd8\054\uffd8\001" +
    "\002\000\036\011\063\015\046\020\031\021\044\024\053" +
    "\025\060\040\057\052\045\054\uffe7\055\040\056\033\057" +
    "\041\060\064\061\043\001\002\000\004\054\167\001\002" +
    "\000\004\026\170\001\002\000\010\026\ufff2\027\ufff2\030" +
    "\ufff2\001\002\000\110\003\uffbd\011\uffbd\012\uffbd\013\uffbd" +
    "\014\uffbd\015\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd\023" +
    "\uffbd\024\uffbd\025\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd" +
    "\036\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd\044" +
    "\uffbd\045\uffbd\046\uffbd\050\uffbd\051\uffbd\052\uffbd\054\uffbd" +
    "\055\uffbd\056\uffbd\057\uffbd\060\uffbd\061\uffbd\001\002\000" +
    "\004\026\173\001\002\000\010\026\ufff1\027\ufff1\030\ufff1" +
    "\001\002\000\006\052\045\060\175\001\002\000\006\046" +
    "\065\053\066\001\002\000\050\011\uffce\013\uffce\014\uffce" +
    "\015\uffce\016\uffce\017\uffce\020\uffce\021\uffce\023\uffce\024" +
    "\uffce\025\uffce\040\uffce\052\uffce\054\uffce\055\uffce\056\uffce" +
    "\057\uffce\060\uffce\061\uffce\001\002\000\004\016\200\001" +
    "\002\000\016\024\053\025\060\040\057\057\041\060\072" +
    "\061\043\001\002\000\066\011\063\015\046\020\031\021" +
    "\044\023\uffe7\024\053\025\060\031\104\032\110\033\077" +
    "\034\105\036\101\037\106\040\057\041\103\042\102\043" +
    "\107\044\111\045\076\046\100\052\045\055\040\056\033" +
    "\057\041\060\064\061\043\001\002\000\004\023\203\001" +
    "\002\000\046\011\uffd7\013\uffd7\014\uffd7\015\uffd7\017\uffd7" +
    "\020\uffd7\021\uffd7\023\uffd7\024\uffd7\025\uffd7\040\uffd7\052" +
    "\uffd7\054\uffd7\055\uffd7\056\uffd7\057\uffd7\060\uffd7\061\uffd7" +
    "\001\002\000\006\046\205\053\206\001\002\000\016\024" +
    "\053\025\060\040\057\057\041\060\072\061\043\001\002" +
    "\000\010\004\132\005\131\006\133\001\002\000\004\046" +
    "\210\001\002\000\016\024\053\025\060\040\057\057\041" +
    "\060\072\061\043\001\002\000\102\011\uffcc\013\uffcc\014" +
    "\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc\023\uffcc" +
    "\024\uffcc\025\uffcc\031\104\032\110\033\077\034\105\036" +
    "\101\037\106\040\uffcc\041\103\042\102\043\107\044\111" +
    "\045\076\046\100\051\uffcc\052\uffcc\054\uffcc\055\uffcc\056" +
    "\uffcc\057\uffcc\060\uffcc\061\uffcc\001\002\000\102\011\uffca" +
    "\013\uffca\014\uffca\015\uffca\016\uffca\017\uffca\020\uffca\021" +
    "\uffca\023\uffca\024\uffca\025\uffca\031\104\032\110\033\077" +
    "\034\105\036\101\037\106\040\uffca\041\103\042\102\043" +
    "\107\044\111\045\076\046\100\051\uffca\052\uffca\054\uffca" +
    "\055\uffca\056\uffca\057\uffca\060\uffca\061\uffca\001\002\000" +
    "\066\011\063\015\046\020\031\021\044\024\053\025\060" +
    "\031\104\032\110\033\077\034\105\036\101\037\106\040" +
    "\057\041\103\042\102\043\107\044\111\045\076\046\100" +
    "\052\045\054\uffe7\055\040\056\033\057\041\060\064\061" +
    "\043\001\002\000\004\054\215\001\002\000\004\021\216" +
    "\001\002\000\046\011\uffd5\013\uffd5\014\uffd5\015\uffd5\017" +
    "\uffd5\020\uffd5\021\uffd5\023\uffd5\024\uffd5\025\uffd5\040\uffd5" +
    "\052\uffd5\054\uffd5\055\uffd5\056\uffd5\057\uffd5\060\uffd5\061" +
    "\uffd5\001\002\000\004\054\220\001\002\000\006\003\221" +
    "\021\222\001\002\000\046\011\uffd4\013\uffd4\014\uffd4\015" +
    "\uffd4\017\uffd4\020\uffd4\021\uffd4\023\uffd4\024\uffd4\025\uffd4" +
    "\040\uffd4\052\uffd4\054\uffd4\055\uffd4\056\uffd4\057\uffd4\060" +
    "\uffd4\061\uffd4\001\002\000\046\011\uffd6\013\uffd6\014\uffd6" +
    "\015\uffd6\017\uffd6\020\uffd6\021\uffd6\023\uffd6\024\uffd6\025" +
    "\uffd6\040\uffd6\052\uffd6\054\uffd6\055\uffd6\056\uffd6\057\uffd6" +
    "\060\uffd6\061\uffd6\001\002\000\014\013\uffe8\014\uffe8\017" +
    "\uffe8\023\uffe8\054\uffe8\001\002\000\076\011\uffe0\013\uffe0" +
    "\014\uffe0\015\uffe0\017\uffe0\020\uffe0\021\uffe0\023\uffe0\024" +
    "\uffe0\025\uffe0\031\104\032\110\033\077\034\105\036\101" +
    "\037\106\040\uffe0\041\103\042\102\043\107\044\111\045" +
    "\076\046\100\052\uffe0\054\uffe0\055\uffe0\056\uffe0\057\uffe0" +
    "\060\uffe0\061\uffe0\001\002\000\020\003\237\024\053\025" +
    "\060\040\057\057\041\060\072\061\043\001\002\000\004" +
    "\017\233\001\002\000\004\017\230\001\002\000\004\022" +
    "\231\001\002\000\016\024\053\025\060\040\057\057\041" +
    "\060\072\061\043\001\002\000\076\011\uffd2\013\uffd2\014" +
    "\uffd2\015\uffd2\017\uffd2\020\uffd2\021\uffd2\023\uffd2\024\uffd2" +
    "\025\uffd2\031\104\032\110\033\077\034\105\036\101\037" +
    "\106\040\uffd2\041\103\042\102\043\107\044\111\045\076" +
    "\046\100\052\uffd2\054\uffd2\055\uffd2\056\uffd2\057\uffd2\060" +
    "\uffd2\061\uffd2\001\002\000\004\022\234\001\002\000\016" +
    "\024\053\025\060\040\057\057\041\060\072\061\043\001" +
    "\002\000\076\011\uffd1\013\uffd1\014\uffd1\015\uffd1\017\uffd1" +
    "\020\uffd1\021\uffd1\023\uffd1\024\uffd1\025\uffd1\031\104\032" +
    "\110\033\077\034\105\036\101\037\106\040\uffd1\041\103" +
    "\042\102\043\107\044\111\045\076\046\100\052\uffd1\054" +
    "\uffd1\055\uffd1\056\uffd1\057\uffd1\060\uffd1\061\uffd1\001\002" +
    "\000\072\003\242\011\063\015\046\017\uffe7\020\031\021" +
    "\044\024\053\025\060\031\104\032\110\033\077\034\105" +
    "\036\101\037\106\040\057\041\103\042\102\043\107\044" +
    "\111\045\076\046\100\052\045\054\uffe7\055\040\056\033" +
    "\057\041\060\064\061\043\001\002\000\006\017\240\054" +
    "\215\001\002\000\046\011\uffd0\013\uffd0\014\uffd0\015\uffd0" +
    "\017\uffd0\020\uffd0\021\uffd0\023\uffd0\024\uffd0\025\uffd0\040" +
    "\uffd0\052\uffd0\054\uffd0\055\uffd0\056\uffd0\057\uffd0\060\uffd0" +
    "\061\uffd0\001\002\000\006\017\243\054\220\001\002\000" +
    "\046\011\uffcf\013\uffcf\014\uffcf\015\uffcf\017\uffcf\020\uffcf" +
    "\021\uffcf\023\uffcf\024\uffcf\025\uffcf\040\uffcf\052\uffcf\054" +
    "\uffcf\055\uffcf\056\uffcf\057\uffcf\060\uffcf\061\uffcf\001\002" +
    "\000\046\011\uffd3\013\uffd3\014\uffd3\015\uffd3\017\uffd3\020" +
    "\uffd3\021\uffd3\023\uffd3\024\uffd3\025\uffd3\040\uffd3\052\uffd3" +
    "\054\uffd3\055\uffd3\056\uffd3\057\uffd3\060\uffd3\061\uffd3\001" +
    "\002\000\040\011\063\015\046\020\031\021\044\024\053" +
    "\025\060\040\057\052\045\053\246\054\uffe7\055\040\056" +
    "\033\057\041\060\064\061\043\001\002\000\004\054\253" +
    "\001\002\000\010\004\132\005\131\006\133\001\002\000" +
    "\036\011\063\015\046\020\031\021\044\024\053\025\060" +
    "\040\057\052\045\054\uffe7\055\040\056\033\057\041\060" +
    "\064\061\043\001\002\000\004\054\251\001\002\000\004" +
    "\026\252\001\002\000\010\026\ufff3\027\ufff3\030\ufff3\001" +
    "\002\000\004\026\254\001\002\000\010\026\ufff4\027\ufff4" +
    "\030\ufff4\001\002\000\004\053\256\001\002\000\010\004" +
    "\132\005\131\006\133\001\002\000\006\050\uffee\051\uffee" +
    "\001\002\000\004\002\ufffd\001\002\000\036\011\063\015" +
    "\046\020\031\021\044\024\053\025\060\040\057\052\045" +
    "\054\uffe7\055\040\056\033\057\041\060\064\061\043\001" +
    "\002\000\004\054\263\001\002\000\004\030\264\001\002" +
    "\000\010\026\ufff9\027\ufff9\030\ufff9\001\002\000\004\047" +
    "\305\001\002\000\004\047\267\001\002\000\010\007\021" +
    "\010\025\050\271\001\002\000\004\050\301\001\002\000" +
    "\040\003\272\011\063\015\046\020\031\021\044\024\053" +
    "\025\060\040\057\052\045\054\uffe7\055\040\056\033\057" +
    "\041\060\064\061\043\001\002\000\036\011\063\015\046" +
    "\020\031\021\044\024\053\025\060\040\057\052\045\054" +
    "\uffe7\055\040\056\033\057\041\060\064\061\043\001\002" +
    "\000\004\054\274\001\002\000\004\027\275\001\002\000" +
    "\010\026\ufff7\027\ufff7\030\ufff7\001\002\000\004\054\277" +
    "\001\002\000\004\027\300\001\002\000\010\026\ufff6\027" +
    "\ufff6\030\ufff6\001\002\000\036\011\063\015\046\020\031" +
    "\021\044\024\053\025\060\040\057\052\045\054\uffe7\055" +
    "\040\056\033\057\041\060\064\061\043\001\002\000\004" +
    "\054\303\001\002\000\004\027\304\001\002\000\010\026" +
    "\ufff8\027\ufff8\030\ufff8\001\002\000\004\050\306\001\002" +
    "\000\036\011\063\015\046\020\031\021\044\024\053\025" +
    "\060\040\057\052\045\054\uffe7\055\040\056\033\057\041" +
    "\060\064\061\043\001\002\000\004\054\310\001\002\000" +
    "\004\027\311\001\002\000\010\026\ufff5\027\ufff5\030\ufff5" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\307\000\020\002\012\003\007\005\013\006\005\007" +
    "\011\010\006\011\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\005\257\006\005\007\011\010\006\011" +
    "\014\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\012\022\013\025\014\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\004\055" +
    "\016\034\017\035\022\047\023\036\024\046\025\051\026" +
    "\054\027\050\030\053\031\060\032\033\033\031\034\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\012" +
    "\027\013\025\014\021\001\001\000\002\001\001\000\036" +
    "\004\226\016\034\017\035\022\047\023\036\024\046\025" +
    "\051\026\054\027\050\030\053\031\060\032\033\033\031" +
    "\034\041\001\001\000\002\001\001\000\016\027\223\030" +
    "\053\031\060\032\033\033\031\034\041\001\001\000\002" +
    "\001\001\000\036\004\222\016\034\017\035\022\047\023" +
    "\036\024\046\025\051\026\054\027\050\030\053\031\060" +
    "\032\033\033\031\034\041\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\027\212\030\053\031" +
    "\060\032\033\033\031\034\041\001\001\000\002\001\001" +
    "\000\006\025\176\026\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\027\170\030\053\031\060\032\033\033\031" +
    "\034\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\164\001\001\000\016\027\137\030\053\031\060" +
    "\032\033\033\031\034\041\001\001\000\002\001\001\000" +
    "\016\027\136\030\053\031\060\032\033\033\031\034\041" +
    "\001\001\000\004\015\133\001\001\000\022\027\072\030" +
    "\053\031\060\032\033\033\031\034\041\035\070\036\067" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\027\124\030\053\031\060\032\033\033\031\034" +
    "\041\001\001\000\016\027\123\030\053\031\060\032\033" +
    "\033\031\034\041\001\001\000\016\027\122\030\053\031" +
    "\060\032\033\033\031\034\041\001\001\000\016\027\121" +
    "\030\053\031\060\032\033\033\031\034\041\001\001\000" +
    "\016\027\120\030\053\031\060\032\033\033\031\034\041" +
    "\001\001\000\016\027\117\030\053\031\060\032\033\033" +
    "\031\034\041\001\001\000\016\027\116\030\053\031\060" +
    "\032\033\033\031\034\041\001\001\000\016\027\115\030" +
    "\053\031\060\032\033\033\031\034\041\001\001\000\016" +
    "\027\114\030\053\031\060\032\033\033\031\034\041\001" +
    "\001\000\016\027\113\030\053\031\060\032\033\033\031" +
    "\034\041\001\001\000\016\027\112\030\053\031\060\032" +
    "\033\033\031\034\041\001\001\000\016\027\111\030\053" +
    "\031\060\032\033\033\031\034\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\027" +
    "\072\030\053\031\060\032\033\033\031\034\041\035\127" +
    "\036\067\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\027\135\030\053\031\060\032\033\033\031\034\041\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\004\141\016\034\017\035\022\047\023\036\024" +
    "\046\025\051\026\054\027\050\030\053\031\060\032\033" +
    "\033\031\034\041\001\001\000\006\020\143\021\145\001" +
    "\001\000\016\027\162\030\053\031\060\032\033\033\031" +
    "\034\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\020\152\021\145\001\001\000\036\004\147\016\034" +
    "\017\035\022\047\023\036\024\046\025\051\026\054\027" +
    "\050\030\053\031\060\032\033\033\031\034\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\004\156\016\034\017\035\022\047\023\036\024\046\025" +
    "\051\026\054\027\050\030\053\031\060\032\033\033\031" +
    "\034\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\004\165\016\034\017\035\022\047\023" +
    "\036\024\046\025\051\026\054\027\050\030\053\031\060" +
    "\032\033\033\031\034\041\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\025\175\026\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\027\200\030\053\031\060\032\033\033\031\034" +
    "\041\001\001\000\036\004\201\016\034\017\035\022\047" +
    "\023\036\024\046\025\051\026\054\027\050\030\053\031" +
    "\060\032\033\033\031\034\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\027\211\030" +
    "\053\031\060\032\033\033\031\034\041\001\001\000\004" +
    "\015\206\001\001\000\002\001\001\000\016\027\210\030" +
    "\053\031\060\032\033\033\031\034\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\004\216\016\034\017" +
    "\035\022\047\023\036\024\046\025\051\026\054\027\050" +
    "\030\053\031\060\032\033\033\031\034\041\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\027\235" +
    "\030\053\031\060\032\033\033\031\034\041\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\027\231\030\053\031\060\032\033\033\031\034\041\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\027\234" +
    "\030\053\031\060\032\033\033\031\034\041\001\001\000" +
    "\002\001\001\000\036\004\240\016\034\017\035\022\047" +
    "\023\036\024\046\025\051\026\054\027\050\030\053\031" +
    "\060\032\033\033\031\034\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\004\244\016\034\017\035\022\047" +
    "\023\036\024\046\025\051\026\054\027\050\030\053\031" +
    "\060\032\033\033\031\034\041\001\001\000\002\001\001" +
    "\000\004\015\246\001\001\000\036\004\247\016\034\017" +
    "\035\022\047\023\036\024\046\025\051\026\054\027\050" +
    "\030\053\031\060\032\033\033\031\034\041\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\256\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\004\261\016\034\017\035\022\047\023\036\024\046\025" +
    "\051\026\054\027\050\030\053\031\060\032\033\033\031" +
    "\034\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\012\267\013\025\014\021\001\001\000\002\001\001\000" +
    "\036\004\272\016\034\017\035\022\047\023\036\024\046" +
    "\025\051\026\054\027\050\030\053\031\060\032\033\033" +
    "\031\034\041\001\001\000\036\004\275\016\034\017\035" +
    "\022\047\023\036\024\046\025\051\026\054\027\050\030" +
    "\053\031\060\032\033\033\031\034\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\004\301" +
    "\016\034\017\035\022\047\023\036\024\046\025\051\026" +
    "\054\027\050\030\053\031\060\032\033\033\031\034\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\004\306\016\034\017\035" +
    "\022\047\023\036\024\046\025\051\026\054\027\050\030" +
    "\053\031\060\032\033\033\031\034\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	public void syntax_error(Symbol s){
            if(s.sym==0){

            }else{
                System.err.print("Syntax error, Line "+(s.left)+ " Column "+(s.right)+ " Symbol #"+s.sym+". ");
                List<Integer> expected = expected_token_ids();
                String expectedSymbol = "";
                /*System.out.println("Tamaño:"+expected.size());
                for(int i=0;i<expected.size();i++)
                    System.out.println(expected.get(i));*/
                if(expected.size()==1){
                    if(expected.get(0) == sym.TK_EQUALS){
                        expectedSymbol = "=";
                    }else if(expected.get(0) == sym.TK_MINUS){
                        expectedSymbol = "-";
                    }else if(expected.get(0) == sym.TK_GREATERTHAN){
                        expectedSymbol = ">";
                    }else if(expected.get(0) == sym.TK_PRODUCT){
                        expectedSymbol = "*";
                    }else if(expected.get(0) == sym.TK_LESSEQUAL){
                        expectedSymbol = "<=";
                    }else if(expected.get(0) == sym.TK_FOR){
                        expectedSymbol = "For";
                    }else if(expected.get(0) == sym.TK_LESSTHAN){
                        expectedSymbol = "<";
                    }else if(expected.get(0) == sym.TK_NOT){
                        expectedSymbol = "NOT";
                    }else if(expected.get(0) == sym.TK_AND){
                        expectedSymbol = "AND";
                    }else if(expected.get(0) == sym.TK_COMMA){
                        expectedSymbol = ",";
                    }else if(expected.get(0) == sym.TK_OR){
                        expectedSymbol = "or";
                    }else if(expected.get(0) == sym.TK_UNTIL){
                        expectedSymbol = "Until";
                    }else if(expected.get(0) == sym.TK_ELSEIF){
                        expectedSymbol = "ElseIf";
                    }else if(expected.get(0) == sym.TK_IF){
                        expectedSymbol = "If";
                    }else if(expected.get(0) == sym.TK_ID){
                        expectedSymbol = "<ID>";
                    }else if(expected.get(0) == sym.TK_PAROUT){
                        expectedSymbol = "(";
                    }else if(expected.get(0) == sym.TK_BYVAL){
                        expectedSymbol = "ByVal";
                    }else if(expected.get(0) == sym.TK_BOOLEAN){
                        expectedSymbol = "Boolean";
                    }else if(expected.get(0) == sym.TK_DIM){
                        expectedSymbol = "Dim";
                    }else if(expected.get(0) == sym.TK_GREATEREQUAL){
                        expectedSymbol = ">=";
                    }else if(expected.get(0) == sym.TK_EXIT){
                        expectedSymbol = "Exit";
                    }else if(expected.get(0) == sym.TK_LOOP){
                        expectedSymbol = "Loop";
                    }else if(expected.get(0) == sym.TK_NEXT){
                        expectedSymbol = "Next";
                    }else if(expected.get(0) == sym.TK_STRINGVAL){
                        expectedSymbol = "of type string.";
                    }else if(expected.get(0) == sym.TK_RETURN){
                        expectedSymbol = "Return";
                    }else if(expected.get(0) == sym.TK_TRUE){
                        expectedSymbol = "True";
                    }else if(expected.get(0) == sym.TK_PARIN){
                        expectedSymbol = "(";
                    }else if(expected.get(0) == sym.TK_NUMBER){
                        expectedSymbol = "of number type";
                    }else if(expected.get(0) == sym.TK_BYREF){
                        expectedSymbol = "ByRef";
                    }else if(expected.get(0) == sym.TK_STRUCTURE){
                        expectedSymbol = "Structure";
                    }else if(expected.get(0) == sym.TK_TO){
                        expectedSymbol = "To";
                    }else if(expected.get(0) == sym.TK_WHILE){
                        expectedSymbol = "While";
                    }else if(expected.get(0) == sym.TK_DIVISION){
                        expectedSymbol = "%";
                    }else if(expected.get(0) == sym.TK_END){
                        expectedSymbol = "End";
                    }else if(expected.get(0) == sym.TK_SUM){
                        expectedSymbol = "+";
                    }else if(expected.get(0) == sym.TK_FALSE){
                        expectedSymbol = "False";
                    }else if(expected.get(0) == sym.TK_AS){
                        expectedSymbol = "As";
                    }else if(expected.get(0) == sym.TK_THEN){
                        expectedSymbol = "Then";
                    }else if(expected.get(0) == sym.TK_STRING){
                        expectedSymbol = "String";
                    }else if(expected.get(0) == sym.TK_FUNCTION){
                        expectedSymbol = "Function";
                    }else if(expected.get(0) == sym.TK_DO){
                        expectedSymbol = "Do";
                    }else if(expected.get(0) == sym.TK_SUB){
                        expectedSymbol = "Sub";
                    }else if(expected.get(0) == sym.TK_INTEGER){
                        expectedSymbol = "Integer";
                    }else if(expected.get(0) == sym.TK_XOR){
                        expectedSymbol = "Xor";
                    }
                    System.err.println("Expected symbol "+expectedSymbol );
                }else{
                    if(s.sym == sym.TK_ID){
                        System.err.println("Expected definition of type for ID.");
                    }
                    if(s.sym == sym.TK_PARIN || s.sym == sym.TK_PAROUT){
                        System.err.println("Expected an expression or call.");
                    }
                    if(s.sym == sym.TK_SUM || s.sym == sym.TK_MINUS || s.sym == sym.TK_DIVISION || s.sym == sym.TK_PRODUCT){
                        System.err.println("Unplaced, lacking or unexpected expression.");
                    }
                    if(s.sym == sym.TK_GREATERTHAN || s.sym == sym.TK_GREATEREQUAL || s.sym == sym.TK_LESSTHAN || s.sym == sym.TK_LESSEQUAL){
                        System.err.println("Unexpected evaluation.");
                    }
                    if(s.sym == sym.TK_EQUALS){
                        System.err.println("Unexpected evaluation or assignation");
                    }

                }


                
            }
            
            
            
	}

        public void unrecovered_syntax_error(Symbol cur_token) {
            if(cur_token.sym==0){

            }else{
                System.err.println("Error with code's syntax in line: " + (cur_token.left + 1) + ", col: " + (cur_token.right + 1));
            }
            
            
        }

        public void report_fatal_error(String message, Object info) {
            
        }

        public void report_error(String message, Object info) {
            
        }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // initial ::= program 
            {
              Object RESULT =null;
		 System.out.println("Programa en Visual Basic"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("initial",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= initial EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= function_declarations 
            {
              Object RESULT =null;
		int functionDeclarationsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int functionDeclarationsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object functionDeclarations = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Program"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // function_declarations ::= function_declaration function_declarations 
            {
              Object RESULT =null;
		int functionDeclarationleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int functionDeclarationright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object functionDeclaration = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int functionDeclarationsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int functionDeclarationsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object functionDeclarations = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declarations",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // function_declaration ::= structure_statement 
            {
              Object RESULT =null;
		int structureStatementleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int structureStatementright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object structureStatement = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // function_declaration ::= sub_statement 
            {
              Object RESULT =null;
		int subStatementleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int subStatementright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object subStatement = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // function_declaration ::= function_statement 
            {
              Object RESULT =null;
		int functionStatementleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int functionStatementright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object functionStatement = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // structure_statement ::= TK_STRUCTURE TK_ID statements TK_END TK_STRUCTURE 
            {
              Object RESULT =null;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object stmnts = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("structure_statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sub_statement ::= TK_SUB TK_ID TK_PARIN parameters TK_PAROUT statements TK_END TK_SUB 
            {
              Object RESULT =null;
		int prmtsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int prmtsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object prmts = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object stmnts = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sub_statement ::= TK_SUB TK_ID TK_PARIN TK_PAROUT statements TK_END TK_SUB 
            {
              Object RESULT =null;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object stmnts = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sub_statement ::= TK_SUB TK_ID TK_PARIN TK_PAROUT error statements TK_END TK_SUB 
            {
              Object RESULT =null;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object stmnts = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		System.err.println("Error with Sub statement");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sub_statement ::= TK_SUB error TK_PARIN TK_PAROUT statements TK_END TK_SUB 
            {
              Object RESULT =null;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object stmnts = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		System.err.println("Erroneous Sub declaration.");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // function_statement ::= TK_FUNCTION TK_ID TK_PARIN parameters TK_PAROUT statements TK_END TK_FUNCTION 
            {
              Object RESULT =null;
		int prmtsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int prmtsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object prmts = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object stmnts = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // function_statement ::= TK_FUNCTION TK_ID TK_PARIN parameters TK_PAROUT TK_AS data_type statements TK_END TK_FUNCTION 
            {
              Object RESULT =null;
		int prmtsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int prmtsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object prmts = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object stmnts = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // function_statement ::= TK_FUNCTION TK_ID TK_PARIN TK_PAROUT TK_AS data_type statements TK_END TK_FUNCTION 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object stmnts = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // function_statement ::= TK_FUNCTION TK_ID TK_PARIN TK_PAROUT statements TK_END TK_FUNCTION 
            {
              Object RESULT =null;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object stmnts = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // parameters ::= parameter TK_COMMA parameters 
            {
              Object RESULT =null;
		int prmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int prmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object prmt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int prmtsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int prmtsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object prmts = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // parameters ::= parameter 
            {
              Object RESULT =null;
		int prmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int prmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object prmt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // parameter ::= parameter_type TK_ID TK_AS data_type 
            {
              Object RESULT =null;
		int prmt_typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int prmt_typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object prmt_type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // parameter_type ::= TK_BYVAL 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // parameter_type ::= TK_BYREF 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // data_type ::= TK_INTEGER 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // data_type ::= TK_BOOLEAN 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // data_type ::= TK_STRING 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statements ::= statement statements 
            {
              Object RESULT =null;
		int stmntleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stmntright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object stmnt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object stmnts = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statements ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statement ::= if_statement 
            {
              Object RESULT =null;
		int ifStatementleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ifStatementright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ifStatement = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statement ::= while_statement 
            {
              Object RESULT =null;
		int whileStatementleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int whileStatementright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object whileStatement = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement ::= for_statement 
            {
              Object RESULT =null;
		int forStatementleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int forStatementright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object forStatement = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement ::= do_statement 
            {
              Object RESULT =null;
		int doStatementleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int doStatementright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object doStatement = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement ::= variable_declaration 
            {
              Object RESULT =null;
		int var_declareleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var_declareright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var_declare = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement ::= expression 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement ::= TK_RETURN expression 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement ::= TK_EXIT 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // if_statement ::= TK_IF expression TK_THEN statements TK_END TK_IF 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object stmnts = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // if_statement ::= TK_IF expression TK_THEN statements TK_ELSE statements TK_END TK_IF 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object stmnts = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int stmnts1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stmnts1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object stmnts1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // if_statement ::= TK_IF expression TK_THEN statements elseif_statements TK_END TK_IF 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object stmnts = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int elseifStmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elseifStmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object elseifStmnts = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // if_statement ::= TK_IF expression TK_THEN statements elseif_statements TK_ELSE statements TK_END TK_IF 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object stmnts = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int elseifStmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int elseifStmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object elseifStmnts = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int stmnts1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stmnts1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object stmnts1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // elseif_statements ::= elseif_statement elseif_statements 
            {
              Object RESULT =null;
		int elseifStmntleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elseifStmntright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object elseifStmnt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elseifStmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elseifStmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object elseifStmnts = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseif_statements",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // elseif_statements ::= elseif_statement 
            {
              Object RESULT =null;
		int elseifStmntleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elseifStmntright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object elseifStmnt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseif_statements",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // elseif_statement ::= TK_ELSEIF expression TK_THEN 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseif_statement",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // for_statement ::= TK_FOR variable_declaration TK_TO expression statements TK_NEXT 
            {
              Object RESULT =null;
		int var_declareleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int var_declareright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object var_declare = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object stmnts = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // while_statement ::= TK_WHILE expression statements TK_END TK_WHILE 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object stmnts = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // while_statement ::= TK_WHILE error TK_END TK_WHILE 
            {
              Object RESULT =null;
		System.err.println("Error inside While block");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // while_statement ::= TK_WHILE expression statements TK_END error 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object stmnts = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // do_statement ::= TK_DO TK_WHILE expression statements TK_LOOP 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object stmnts = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("do_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // do_statement ::= TK_DO statements TK_LOOP TK_UNTIL expression 
            {
              Object RESULT =null;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object stmnts = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("do_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // do_statement ::= TK_DO error TK_LOOP TK_UNTIL expression 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.err.println("Error inside Do Loop");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("do_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // do_statement ::= TK_DO TK_WHILE error TK_LOOP 
            {
              Object RESULT =null;
		System.err.println("Error in Do While");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("do_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // do_statement ::= TK_DO TK_WHILE expression error 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.err.println("Error after Do While statement ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("do_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // variable_declaration ::= variable_declarator TK_COMMA variable_declaration 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int var_declareleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var_declareright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var_declare = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // variable_declaration ::= variable_declarator 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // variable_declarator ::= TK_DIM TK_ID TK_AS data_type TK_EQUALS expression 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declarator",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // variable_declarator ::= TK_ID TK_AS data_type TK_EQUALS expression 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declarator",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // variable_declarator ::= TK_DIM TK_ID TK_EQUALS expression 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declarator",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // variable_declarator ::= TK_ID TK_EQUALS expression 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declarator",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expression ::= numeric_expression 
            {
              Object RESULT =null;
		int num_expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int num_expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object num_exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expression ::= boolean_expression 
            {
              Object RESULT =null;
		int bool_expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bool_expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object bool_exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expression ::= logical_expression 
            {
              Object RESULT =null;
		int logic_expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int logic_expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object logic_exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expression ::= literal_expression 
            {
              Object RESULT =null;
		int lit_expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lit_expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lit_exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expression ::= TK_ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		OBJID id = (OBJID)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expression ::= function_call 
            {
              Object RESULT =null;
		int callleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int callright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object call = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // boolean_expression ::= expression TK_GREATERTHAN expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // boolean_expression ::= expression TK_LESSTHAN expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // boolean_expression ::= expression TK_GREATEREQUAL expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // boolean_expression ::= expression TK_LESSEQUAL expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // boolean_expression ::= expression TK_EQUALS expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // logical_expression ::= TK_NOT expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_expression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // logical_expression ::= expression TK_OR expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_expression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // logical_expression ::= expression TK_AND expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_expression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // logical_expression ::= expression TK_XOR expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_expression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // logical_expression ::= TK_TRUE 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_expression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // logical_expression ::= TK_FALSE 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_expression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // numeric_expression ::= expression TK_SUM expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_expression",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // numeric_expression ::= expression TK_MINUS expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_expression",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // numeric_expression ::= expression TK_PRODUCT expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_expression",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // numeric_expression ::= expression TK_DIVISION expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_expression",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // literal_expression ::= TK_NUMBER 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_expression",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // literal_expression ::= TK_STRINGVAL 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_expression",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // function_call ::= TK_ID TK_PARIN arguments TK_PAROUT 
            {
              Object RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object args = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // function_call ::= TK_ID TK_PARIN TK_PAROUT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // function_call ::= TK_ID TK_PARIN error 
            {
              Object RESULT =null;
		System.err.println("Function call expects ')'");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // arguments ::= argument TK_COMMA arguments 
            {
              Object RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object arg = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object args = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arguments",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // arguments ::= argument 
            {
              Object RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object arg = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arguments",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // argument ::= expression 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argument",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
