package visualbasiccompilador;

import java.util.*;
import java.io.*;
import java_cup.runtime.Symbol;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;


parser code {:

	public void syntax_error(Symbol s){
            System.out.println("Error de sintaxis");
            System.out.println("Linea "+s.left);
            System.out.println("Columna "+s.right);
	}

        public void unrecovered_syntax_error(Symbol cur_token) {
            System.err.println("Error with code's syntax in line: " + (cur_token.left + 1) + ", col: " + (cur_token.right + 1));
        }

        public void report_fatal_error(String message, Object info) {
            
        }

        public void report_error(String message, Object info) {
            
        }

:};

												/* Terminales */

/* Tipos de Datos */
terminal TK_INTEGER, TK_BOOLEAN, TK_STRING;

/* Por Valor o Por Referencia */
terminal TK_BYVAL, TK_BYREF;

/* Estructuras de Control */
terminal TK_IF, TK_THEN, TK_ELSEIF, TK_ELSE, TK_FOR, TK_TO, TK_LOOP, TK_DO, TK_WHILE, TK_UNTIL, TK_NEXT, TK_STEP;

/* Expresiones Booleanas */
terminal TK_TRUE, TK_FALSE;

/* Funciones */
terminal TK_FUNCTION, TK_SUB, TK_STRUCTURE;

/* Operadores Aritmeticos */
terminal TK_SUM, TK_MINUS, TK_PRODUCT, TK_DIVISION; 

/* Operadores logicos */
terminal TK_AND, TK_OR, TK_NOT, TK_XOR;

/*Operadores Relacionales */
terminal TK_GREATERTHAN, TK_LESSTHAN, TK_GREATEREQUAL, TK_LESSEQUAL, TK_EQUALS;

/* Parentesis */
terminal TK_PARIN, TK_PAROUT;

/* Simbolos */
terminal TK_COMMA;

/* Otras palabras reservadas */
terminal TK_DIM, TK_AS, TK_END, TK_EXIT, TK_RETURN, TK_NEW;

/* Valores */
terminal String TK_STRINGVAL;
terminal OBJID TK_ID;
terminal Integer TK_NUMBER;

													/* NO TERMINALES */

non terminal program;
non terminal statements;
non terminal function_declarations;
non terminal function_declaration;
non terminal structure_statement;
non terminal sub_statement;
non terminal function_statement;
non terminal parameters;
non terminal parameter;
non terminal parameter_type;
non terminal data_type;
non terminal statement;
non terminal if_statement;
non terminal elseif_statements;
non terminal elseif_statement;
non terminal for_statement;
non terminal while_statement; 
non terminal do_statement;
non terminal variable_declaration;
non terminal variable_declarator;
non terminal expression;
non terminal numeric_expression;
non terminal boolean_expression;
non terminal literal_expression;
non terminal logical_expression;
non terminal function_call;
non terminal arguments;
non terminal argument;
non terminal arguments2;

/* Precedencia */
precedence left TK_EQUALS;
precedence left TK_OR, TK_XOR;
precedence left TK_AND;
precedence left TK_LESSTHAN, TK_LESSEQUAL,TK_GREATERTHAN, TK_GREATEREQUAL, TK_EQUALS;
precedence left TK_SUM, TK_MINUS;
precedence left TK_PRODUCT, TK_DIVISION;
precedence right TK_NOT;
precedence nonassoc TK_ELSE;



program ::= function_declarations:functionDeclarations
            | /* Vacio */
;


function_declarations ::= function_declaration:functionDeclaration function_declarations:functionDeclarations
;

function_declaration ::= structure_statement:structureStatement
			 |sub_statement:subStatement
			 |function_statement:functionStatement
;

structure_statement ::= TK_STRUCTURE TK_ID statements:stmnts TK_END TK_STRUCTURE
;

sub_statement ::= TK_SUB TK_ID TK_PARIN parameters:prmts TK_PAROUT statements:stmnts TK_END TK_SUB
;


function_statement ::= 	TK_FUNCTION TK_ID TK_PARIN parameters:prmts TK_PAROUT statements:stmnts TK_END TK_FUNCTION
			|TK_FUNCTION TK_ID TK_PARIN parameters:prmts TK_PAROUT TK_AS data_type:type statements:stmnts TK_END TK_FUNCTION
;

parameters ::= 	parameter:prmt TK_COMMA parameters:prmts
		|parameter:prmt
		| /* Vacio */
;

parameter ::=	parameter_type:prmt_type TK_ID TK_AS data_type:type
;

parameter_type ::= 	TK_BYVAL
					| TK_BYREF
;

data_type ::=	TK_INTEGER
				|TK_BOOLEAN
				|TK_STRING
;

statements ::=	statement:stmnt statements:stmnts
				| /* Vacio */
;

statement ::=	if_statement:ifStatement
				|while_statement:whileStatement
				|for_statement:forStatement
				|do_statement:doStatement
				|variable_declaration:var_declare
				|expression:expr
				|TK_RETURN expression
                                |TK_RETURN TK_ID
				|TK_EXIT
;

if_statement ::=	TK_IF expression:expr TK_THEN statements:stmnts TK_END TK_IF
                        |TK_IF TK_ID TK_THEN statements:stmnts TK_END TK_IF
                        |TK_IF expression:expr TK_THEN statements:stmnts TK_ELSE statements:stmnts TK_END TK_IF
                        |TK_IF TK_ID TK_THEN statements:stmnts TK_ELSE statements:stmnts TK_END TK_IF
			|TK_IF expression:expr TK_THEN statements:stmnts elseif_statements:elseifStmnts TK_END TK_IF
                        |TK_IF TK_ID TK_THEN statements:stmnts elseif_statements:elseifStmnts TK_END TK_IF
			|TK_IF expression:expr TK_THEN statements:stmnts elseif_statements:elseifStmnts TK_ELSE statements:stmnts TK_END TK_IF
                        |TK_IF TK_ID TK_THEN statements:stmnts elseif_statements:elseifStmnts TK_ELSE statements:stmnts TK_END TK_IF
; 

elseif_statements ::=	elseif_statement:elseifStmnt elseif_statements:elseifStmnts
						|elseif_statement:elseifStmnt
;

elseif_statement ::=	TK_ELSEIF expression:expr TK_THEN
                        |TK_ELSEIF TK_ID TK_THEN
;


for_statement ::=	TK_FOR variable_declaration:var_declare TK_TO expression:expr statements:stmnts TK_NEXT
                        |TK_FOR variable_declaration:var_declare TK_TO TK_ID statements:stmnts TK_NEXT
			|TK_FOR variable_declaration:var_declare TK_TO expression:expr TK_STEP TK_NUMBER statements:stmnts TK_NEXT
                        |TK_FOR variable_declaration:var_declare TK_TO TK_ID TK_STEP TK_NUMBER statements:stmnts TK_NEXT
;

while_statement ::=	TK_WHILE expression:expr statements:stmnts TK_END TK_WHILE
                        |TK_WHILE TK_ID statements:stmnts TK_END TK_WHILE
;

do_statement ::=	TK_DO TK_WHILE expression:expr statements:stmnts TK_LOOP
			|TK_DO statements:stmnts TK_LOOP TK_UNTIL TK_ID
;

variable_declaration ::=	variable_declarator:var TK_COMMA variable_declaration:var_declare 
				|variable_declarator:var
;


variable_declarator  ::=	TK_DIM TK_ID TK_AS data_type:type TK_EQUALS expression:expr
                                |TK_DIM TK_ID TK_AS data_type:type TK_EQUALS TK_ID
				|TK_ID TK_AS data_type:type TK_EQUALS expression:expr
                                |TK_ID TK_AS data_type:type TK_EQUALS TK_ID
				|TK_DIM TK_ID TK_EQUALS expression:expr
                                |TK_DIM TK_ID TK_EQUALS TK_ID
				|TK_ID TK_EQUALS expression:expr
                                |TK_ID TK_EQUALS TK_ID
				|TK_DIM TK_ID TK_AS TK_NEW data_type:type TK_EQUALS expression:expr TK_PARIN arguments:args TK_PAROUT
				|TK_DIM TK_ID TK_AS TK_NEW data_type:type TK_EQUALS TK_ID TK_PARIN arguments:args TK_PAROUT
                                |TK_ID TK_EQUALS TK_NEW data_type:type TK_PARIN arguments:args TK_PAROUT
;



expression ::=	numeric_expression:num_exp
		|boolean_expression:bool_exp
		|logical_expression:logic_exp
		|literal_expression:lit_exp
		|function_call:call
;

boolean_expression ::= expression:e1 TK_GREATERTHAN expression:e2
                       |expression:e1 TK_GREATERTHAN TK_ID
                       |TK_ID TK_GREATERTHAN expression:e2
                       |TK_ID TK_GREATERTHAN TK_ID
                       |expression:e1 TK_LESSTHAN expression:e2
                       |TK_ID TK_LESSTHAN expression:e2
                       |expression:e1 TK_LESSTHAN TK_ID
                       |TK_ID TK_LESSTHAN TK_ID
                       |expression:e1 TK_GREATEREQUAL expression:e2
                       |TK_ID TK_GREATEREQUAL expression:e2
                       |expression:e1 TK_GREATEREQUAL TK_ID
                       |TK_ID TK_GREATEREQUAL TK_ID
                       |expression:e1 TK_LESSEQUAL expression:e2
                       |TK_ID TK_LESSEQUAL expression:e2
                       |expression:e1 TK_LESSEQUAL TK_ID
                       |TK_ID TK_LESSEQUAL TK_ID
                       |expression:e1 TK_EQUALS expression:e2
                       |TK_ID TK_EQUALS expression:e2
                       |expression:e1 TK_EQUALS TK_ID
                       |TK_ID TK_EQUALS TK_ID
;

logical_expression ::= TK_NOT expression:e1
                       |TK_NOT TK_ID
                       |expression:e1 TK_OR expression:e2
                       |TK_ID TK_OR expression:e2
                       |expression:e1 TK_OR TK_ID
                       |TK_ID TK_OR TK_ID
                       |expression:e1 TK_AND expression:e2
                       |TK_ID TK_AND expression:e2
                       |expression:e1 TK_AND TK_ID
                       |TK_ID TK_AND TK_ID
                       |expression:e1 TK_XOR expression:e2
                       |TK_ID TK_XOR expression:e2
                       |expression:e1 TK_XOR TK_ID
                       |TK_ID TK_XOR TK_ID
                       |TK_TRUE
                       |TK_FALSE
;
numeric_expression ::= expression:e1 TK_SUM expression:e2
                       |TK_ID TK_SUM expression:e2
                       |TK_ID TK_SUM TK_ID
                       |expression:e1 TK_SUM TK_ID
                       |expression:e1 TK_MINUS expression:e2
                       |TK_ID TK_MINUS expression:e2
                       |TK_ID TK_MINUS TK_ID
                       |expression:e1 TK_MINUS TK_ID
                       |expression:e1 TK_PRODUCT expression:e2
                       |TK_ID TK_PRODUCT expression:e2
                       |TK_ID TK_PRODUCT TK_ID
                       |expression:e1 TK_PRODUCT TK_ID
                       |expression:e1 TK_DIVISION expression:e2
                       |TK_ID TK_DIVISION expression:e2
                       |TK_ID TK_DIVISION TK_ID
                       |expression:e1 TK_DIVISION TK_ID
;

literal_expression ::= 	TK_NUMBER
						|TK_STRINGVAL
;

function_call ::= 	TK_ID TK_PARIN arguments:args TK_PAROUT
;

arguments ::=	argument:arg arguments2
		| /* Vacio */
;
arguments2 ::=  TK_COMMA arguments
                | /* Vacio */
;
argument ::= expression:expr
;