package visualbasiccompilador;

import java.util.*;
import java.io.*;
import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import AST.*;

parser code {:
        public Program FINALOBJECT = new Program();
        public IdTable tableIds = new IdTable();
        public Cuadruplo cuadruplo = new Cuadruplo();
        public ArrayList<Statements> listastatements = new ArrayList();
        public ArrayList<Argument> listaarguments = new ArrayList();
        public ArrayList<Parameter> listaparameters = new ArrayList();
        public ArrayList<ElseIfStatement> listaelseifs = new ArrayList();
        public ArrayList<VariableDeclarator> variables = new ArrayList();
        public boolean foundError = false;
        public boolean foundTypeError = false;
        public int bloque = 0;
        public boolean hayUnIf = false;
        public int contadortemporales = 0;
        public int contadoretiquetas = 0;
        public int size = 0;
        public boolean hayUnFor = false;
        public int offset = 0;
        public Stack pila_de_bloques = new Stack();
        public String ambito_actual = Integer.toString(bloque);
        public String partir_ambito[];
        public String remove_scope(String[] remove){
            String scope = "";
            for(int i = 0; i < remove.length-1;i++){
                if(i != remove.length-1){
                    if(i == remove.length-2){
                        scope += remove[i];
                    }else{
                        scope += remove[i]+".";
                    }   
                }
            }
            return scope;
        }
        public String nuevoTemporal(){
            String tmp = "t"+contadortemporales;
            contadortemporales++;
            return tmp;
        }
        public ArrayList<Integer> fusiona(ArrayList<Integer> lista1, ArrayList<Integer> lista2){
            ArrayList<Integer> lista = new ArrayList();
            for(int i=0;i<lista1.size();i++){
                lista.add(lista1.get(i));
            }
            for(int i=0;i<lista2.size();i++){
                lista.add(lista2.get(i));
            }
            return lista;
            
        }
	public void syntax_error(Symbol s){
            if(s.sym==0){

            }else{
                System.err.print("Syntax error, Line "+(s.left)+ " Column "+(s.right)+ " Symbol #"+s.sym+". ");
                List<Integer> expected = expected_token_ids();
                String expectedSymbol = "";
                /*System.out.println("Tama√±o:"+expected.size());
                for(int i=0;i<expected.size();i++)
                    System.out.println(expected.get(i));*/
                if(expected.size()==1){
                    if(expected.get(0) == sym.TK_EQUALS){
                        expectedSymbol = "=";
                    }else if(expected.get(0) == sym.TK_MINUS){
                        expectedSymbol = "-";
                    }else if(expected.get(0) == sym.TK_GREATERTHAN){
                        expectedSymbol = ">";
                    }else if(expected.get(0) == sym.TK_PRODUCT){
                        expectedSymbol = "*";
                    }else if(expected.get(0) == sym.TK_LESSEQUAL){
                        expectedSymbol = "<=";
                    }else if(expected.get(0) == sym.TK_FOR){
                        expectedSymbol = "For";
                    }else if(expected.get(0) == sym.TK_LESSTHAN){
                        expectedSymbol = "<";
                    }else if(expected.get(0) == sym.TK_NOT){
                        expectedSymbol = "NOT";
                    }else if(expected.get(0) == sym.TK_AND){
                        expectedSymbol = "AND";
                    }else if(expected.get(0) == sym.TK_COMMA){
                        expectedSymbol = ",";
                    }else if(expected.get(0) == sym.TK_OR){
                        expectedSymbol = "or";
                    }else if(expected.get(0) == sym.TK_UNTIL){
                        expectedSymbol = "Until";
                    }else if(expected.get(0) == sym.TK_ELSEIF){
                        expectedSymbol = "ElseIf";
                    }else if(expected.get(0) == sym.TK_IF){
                        expectedSymbol = "If";
                    }else if(expected.get(0) == sym.TK_ID){
                        expectedSymbol = "<ID>";
                    }else if(expected.get(0) == sym.TK_PAROUT){
                        expectedSymbol = "(";
                    }else if(expected.get(0) == sym.TK_BYVAL){
                        expectedSymbol = "ByVal";
                    }else if(expected.get(0) == sym.TK_BOOLEAN){
                        expectedSymbol = "Boolean";
                    }else if(expected.get(0) == sym.TK_DIM){
                        expectedSymbol = "Dim";
                    }else if(expected.get(0) == sym.TK_GREATEREQUAL){
                        expectedSymbol = ">=";
                    }else if(expected.get(0) == sym.TK_EXIT){
                        expectedSymbol = "Exit";
                    }else if(expected.get(0) == sym.TK_LOOP){
                        expectedSymbol = "Loop";
                    }else if(expected.get(0) == sym.TK_NEXT){
                        expectedSymbol = "Next";
                    }else if(expected.get(0) == sym.TK_STRINGVAL){
                        expectedSymbol = "of type string.";
                    }else if(expected.get(0) == sym.TK_RETURN){
                        expectedSymbol = "Return";
                    }else if(expected.get(0) == sym.TK_TRUE){
                        expectedSymbol = "True";
                    }else if(expected.get(0) == sym.TK_PARIN){
                        expectedSymbol = "(";
                    }else if(expected.get(0) == sym.TK_NUMBER){
                        expectedSymbol = "of number type";
                    }else if(expected.get(0) == sym.TK_BYREF){
                        expectedSymbol = "ByRef";
                    }else if(expected.get(0) == sym.TK_STRUCTURE){
                        expectedSymbol = "Structure";
                    }else if(expected.get(0) == sym.TK_TO){
                        expectedSymbol = "To";
                    }else if(expected.get(0) == sym.TK_WHILE){
                        expectedSymbol = "While";
                    }else if(expected.get(0) == sym.TK_DIVISION){
                        expectedSymbol = "%";
                    }else if(expected.get(0) == sym.TK_END){
                        expectedSymbol = "End";
                    }else if(expected.get(0) == sym.TK_SUM){
                        expectedSymbol = "+";
                    }else if(expected.get(0) == sym.TK_FALSE){
                        expectedSymbol = "False";
                    }else if(expected.get(0) == sym.TK_AS){
                        expectedSymbol = "As";
                    }else if(expected.get(0) == sym.TK_THEN){
                        expectedSymbol = "Then";
                    }else if(expected.get(0) == sym.TK_STRING){
                        expectedSymbol = "String";
                    }else if(expected.get(0) == sym.TK_FUNCTION){
                        expectedSymbol = "Function";
                    }else if(expected.get(0) == sym.TK_DO){
                        expectedSymbol = "Do";
                    }else if(expected.get(0) == sym.TK_SUB){
                        expectedSymbol = "Sub";
                    }else if(expected.get(0) == sym.TK_INTEGER){
                        expectedSymbol = "Integer";
                    }else if(expected.get(0) == sym.TK_XOR){
                        expectedSymbol = "Xor";
                    }else if(expected.get(0) == sym.TK_AMPERSAND){
                        expectedSymbol = "&";
                    }
                    System.err.println("Expected symbol "+expectedSymbol );
                }else{
                    if(s.sym == sym.TK_ID){
                        System.err.println("Expected definition of type for ID or found a mispelled reserved word.");
                    }
                    else if(s.sym == sym.TK_PARIN || s.sym == sym.TK_PAROUT){
                        System.err.println("Expected an expression or call.");
                    }
                    else if(s.sym == sym.TK_SUM || s.sym == sym.TK_MINUS || s.sym == sym.TK_DIVISION || s.sym == sym.TK_PRODUCT  ||s.sym == sym.TK_AMPERSAND){
                        System.err.println("Unplaced, lacking or unexpected expression.");
                    }
                    else if(s.sym == sym.TK_GREATERTHAN || s.sym == sym.TK_GREATEREQUAL || s.sym == sym.TK_LESSTHAN || s.sym == sym.TK_LESSEQUAL ||s.sym == sym.TK_NOTEQUAL ){
                        System.err.println("Unexpected evaluation.");
                    }
                    else if(s.sym == sym.TK_EQUALS){
                        System.err.println("Unexpected evaluation or assignation");
                    }
                    else{
                        System.err.println("Check code's syntax;");
                    }

                }


                
            }
            
            
            
	}

        public void unrecovered_syntax_error(Symbol cur_token) {
            if(cur_token.sym==0){

            }else{
                System.err.println("Error with code's syntax in line: " + (cur_token.left + 1) + ", col: " + (cur_token.right + 1));
            }
            
            
        }

        public void report_fatal_error(String message, Object info) {
            
        }

        public void report_error(String message, Object info) {
            
        }

:};

												/* Terminales */

/* Tipos de Datos */
terminal TK_INTEGER, TK_BOOLEAN, TK_STRING;

/* Por Valor o Por Referencia */
terminal TK_BYVAL, TK_BYREF;

/* Estructuras de Control */
terminal TokenEtiqueta TK_IF, TK_THEN, TK_ELSEIF, TK_ELSE, TK_FOR, TK_TO, TK_LOOP, TK_WHILE;
terminal TK_UNTIL, TK_NEXT, TK_DO;
/* Expresiones Booleanas */
terminal TK_TRUE, TK_FALSE;

/* Funciones */
terminal TK_FUNCTION, TK_SUB, TK_STRUCTURE;

/* Operadores Aritmeticos */
terminal TK_SUM, TK_MINUS, TK_PRODUCT, TK_DIVISION, TK_AMPERSAND; 

/* Operadores logicos */
terminal TokenEtiqueta TK_AND, TK_OR, TK_NOT, TK_XOR;

/*Operadores Relacionales */
terminal String TK_GREATERTHAN, TK_LESSTHAN, TK_GREATEREQUAL, TK_LESSEQUAL, TK_EQUALS, TK_NOTEQUAL;

/* Parentesis */
terminal TK_PARIN, TK_PAROUT;

/* Simbolos */
terminal TK_COMMA;

/* Otras palabras reservadas */
terminal TK_DIM, TK_AS, TK_EXIT, TK_RETURN, TK_WRITE, TK_READ;
terminal TokenEtiqueta TK_END;
/* Valores */
terminal String TK_STRINGVAL;
terminal String TK_ID;
terminal Integer TK_NUMBER;

													/* NO TERMINALES */

non terminal initial;
non terminal Program program;
non terminal Statements statements;
non terminal FunctionDeclarations function_declarations;
non terminal FunctionDeclaration function_declaration;
non terminal FunctionDeclaration structure_statement;
non terminal FunctionDeclaration sub_statement;
non terminal FunctionDeclaration function_statement;
non terminal parameters;
non terminal Parameter parameter;
non terminal String parameter_type;
non terminal String data_type;
non terminal Statements statement;
non terminal Statements write_statement;
non terminal Statements read_statement;
non terminal Statements if_statement;
non terminal ElseIfStatement elseif_statements;
non terminal ElseIfStatement elseif_statement;
non terminal ElseStatement else_statement;
non terminal IfStatement begin_if;
non terminal Statements for_statement;
non terminal Statements do_statement;
non terminal VariableDeclaration variable_declaration;
non terminal VariableDeclarator variable_declarator;
non terminal Expression expression;
non terminal NumericExpression numeric_expression;
non terminal BooleanExpression boolean_expression;
non terminal LiteralExpression literal_expression;
non terminal LogicalExpression logical_expression;
non terminal FunctionCall function_call;
non terminal Argument arguments;
non terminal Argument argument;
non terminal Statements N;

/* Precedencia */
precedence left TK_EQUALS;
precedence left TK_OR;
precedence left TK_XOR;
precedence left TK_AND;
precedence left TK_LESSTHAN, TK_LESSEQUAL,TK_GREATERTHAN, TK_GREATEREQUAL, TK_EQUALS, TK_NOTEQUAL;
precedence left TK_SUM, TK_MINUS, TK_AMPERSAND;
precedence left TK_PRODUCT, TK_DIVISION;
precedence right TK_NOT;
precedence nonassoc TK_ELSE;

initial ::= program {: System.out.println("Programa en Visual Basic"); :}
;

program ::= function_declarations:functionDeclarations {:System.out.println("Program"); :}                   
            | /* Vacio */
;


function_declarations ::= function_declaration:functionDeclaration function_declarations:functionDeclarations       {: System.out.println("Func decls");FINALOBJECT.getDeclarations().add(functionDeclaration);:}
;

function_declaration ::= structure_statement:structureStatement                             {:if(!foundError){RESULT = new StructureStatement(((StructureStatement)structureStatement).getStructure(),((StructureStatement)structureStatement).getId(),((StructureStatement)structureStatement).getEnd_structure(),((StructureStatement)structureStatement).getStatements());FINALOBJECT.getDeclarations().add(RESULT);} :}
			 |sub_statement:subStatement                                        {:if(!foundError){RESULT = new SubStatement(((SubStatement)subStatement).getSub(),((SubStatement)subStatement).getId(),((SubStatement)subStatement).getParameters(),((SubStatement)subStatement).getStatements(),((SubStatement)subStatement).getEndSub());FINALOBJECT.getDeclarations().add(RESULT);}:}
			 |function_statement:functionStatement                              {:if(!foundError){RESULT = new FunctionStatement(((FunctionStatement)functionStatement).getFunction(),((FunctionStatement)functionStatement).getId(),((FunctionStatement)functionStatement).getParameters(),((FunctionStatement)functionStatement).getStatements(),((FunctionStatement)functionStatement).getDataType(),"End Function");FINALOBJECT.getDeclarations().add(RESULT);  }:}
;

structure_statement ::= TK_STRUCTURE {:if(!foundError){
                                            bloque++;
                                            ambito_actual += "." + Integer.toString(bloque);
                                            pila_de_bloques.push(bloque);
                                            bloque = 0;
                                            offset = 0;
                                       }
                                      :} TK_ID:i statements:stmnts TK_END TK_STRUCTURE {:if(!foundError){RESULT = new StructureStatement("Structure",i,"End Structure",listastatements);listastatements = new ArrayList();
                                                                                                    String tipo_record = "";
                                                                                                    int recordSize = 0;
                                                                                                    for(int k = 0; k < variables.size(); k++){
                                                                                                        recordSize += tableIds.getNodeSize(variables.get(k).getId(),ambito_actual);
                                                                                                        if(k != variables.size()-1){
                                                                                                            tipo_record += variables.get(k).getDataType() + "x";
                                                                                                        }else{
                                                                                                            tipo_record += variables.get(k).getDataType();
                                                                                                        }
                                                                                                    }
                                                                                                    offset = 0;
                                                                                                    tableIds.addNode(new IdNode(i,"Record",ambito_actual,"record("+tipo_record+")","Structure",recordSize,offset));
                                                                                                    partir_ambito = ambito_actual.split("\\.");
                                                                                                    ambito_actual = remove_scope(partir_ambito);
                                                                                                    bloque = (int) pila_de_bloques.pop();
                                                                                                    variables = new ArrayList();
                                                                                                    recordSize = 0;
                                                                                                    
                                                                                                }:}
;

sub_statement ::=   TK_SUB TK_ID:i TK_PARIN parameters:prmts TK_PAROUT {:if(!foundError){
                                                                            bloque++;
                                                                            ambito_actual += "." + Integer.toString(bloque);
                                                                            String tipo_sub = "";
                                                                            for(int k = 0; k < listaparameters.size(); k++){
                                                                                if(k != listaparameters.size()-1){
                                                                                    tipo_sub += listaparameters.get(k).getDataType() + "x";
                                                                                }else{
                                                                                    tipo_sub += listaparameters.get(k).getDataType();
                                                                                }
                                                                            }
                                                                            if (!tableIds.addNode(new IdNode(i,"void",ambito_actual,"void->"+tipo_sub,"Sub"))){
                                                                                System.err.println("Function or Sub"+i+" has already been defined. Line "+ileft);
                                                                            }
                                                                            pila_de_bloques.push(bloque);
                                                                            bloque = 0;
                                                                            if(!"main".equals(i)){
                                                                                cuadruplo.addNode("ETIQ","sub_"+i);
                                                                            }else{
                                                                                cuadruplo.addNode("Main",i);
                                                                            }
                                                                        }:} 
                                                                        statements:stmnts   TK_END TK_SUB  {:if(!foundError){
                                                                                                                RESULT = new SubStatement("Sub",i,listaparameters,listastatements,"End Sub");
                                                                                                                listastatements = new ArrayList();listaparameters = new ArrayList();
                                                                                                                partir_ambito = ambito_actual.split("\\.");
                                                                                                                ambito_actual = remove_scope(partir_ambito);
                                                                                                                bloque = (int) pila_de_bloques.pop();
                                                                                                                offset = 0;
                                                                                                                if(!"main".equals(i)){
                                                                                                                    cuadruplo.addNode("FINSUB","");
                                                                                                                }
                                                                                                            } :}
                    |TK_SUB TK_ID:i TK_PARIN TK_PAROUT {:if(!foundError){
                                                            bloque++;
                                                            ambito_actual += "." + Integer.toString(bloque);
                                                            if (!tableIds.addNode(new IdNode(i, "void", ambito_actual,"void->void","Sub"))){
                                                                System.err.println("Function or Sub "+i+" has already been defined. Line "+ileft);
                                                            }
                                                            pila_de_bloques.push(bloque);
                                                            bloque = 0;
                                                            if(!"main".equals(i) && !"algo".equals(i)){
                                                                cuadruplo.addNode("ETIQ","sub_"+i);
                                                            }else if("main".equals(i)){
                                                                cuadruplo.addNode("Main","");
                                                            }
                                                        }:} 
                                                        statements:stmnts TK_END TK_SUB                         {:if(!foundError){
                                                                                                                    RESULT = new SubStatement("Sub",i,null,listastatements,"End Sub");
                                                                                                                    listastatements = new ArrayList();
                                                                                                                    partir_ambito = ambito_actual.split("\\.");
                                                                                                                    ambito_actual = remove_scope(partir_ambito);
                                                                                                                    bloque = (int) pila_de_bloques.pop();
                                                                                                                    offset = 0;
                                                                                                                    if(!"main".equals(i) && !"algo".equals(i)){
                                                                                                                        cuadruplo.addNode("FINSUB","");
                                                                                                                    }
                                                                                                                }:}
                    |TK_SUB TK_ID TK_PARIN TK_PAROUT error:er statements:stmnts error TK_END TK_SUB                {:System.err.println("Several errors inside Sub statement. Line "+erleft);foundError=true;:}
                    |TK_SUB error:er TK_PARIN TK_PAROUT statements:stmnts TK_END TK_SUB                            {:System.err.println("Erroneous Sub declaration. Line "+erleft);foundError=true;:}
                    |TK_SUB TK_ID:i TK_PARIN error:er TK_PAROUT statements:stmnts TK_END TK_SUB                      {:System.err.println("Errorneous parameters in Sub "+i+". Line "+erleft); foundError=true;:}
;


function_statement ::= 	TK_FUNCTION TK_ID:i TK_PARIN parameters:prmts TK_PAROUT TK_AS data_type:type {:if(!foundError){
                                                                                                            bloque++;
                                                                                                            ambito_actual += "."+Integer.toString(bloque);
                                                                                                            String tipo_funcion = "";
                                                                                                            for(int k = 0; k < listaparameters.size(); k++){
                                                                                                                if(k != listaparameters.size()-1){
                                                                                                                    tipo_funcion += listaparameters.get(k).getDataType() + "x";
                                                                                                                }else{
                                                                                                                    tipo_funcion += listaparameters.get(k).getDataType();
                                                                                                                }
                                                                                                                if(!tableIds.addNode(new IdNode(listaparameters.get(k).getId(),listaparameters.get(k).getDataType(),ambito_actual,"Parameter",listaparameters.get(k).getParameterType(),size,offset))){//revisar si expr tiene el mismo type que id
                                                                                                                    System.err.println("Parameter id "+i+" already exists. Line "+ileft);//No estoy seguro si foundError debe cambiar
                                                                                                                } 
                                                                                                                
                                                                                                            }
                                                                                                            if(!tableIds.addNode(new IdNode(i,type,ambito_actual,type+"->"+tipo_funcion,"Function"))){
                                                                                                                System.err.println("Function "+i+" already exists "+type+"->"+tipo_funcion+". Line "+ileft);
                                                                                                            }
                                                                                                            pila_de_bloques.push(bloque);
                                                                                                            bloque = 0;
                                                                                                            cuadruplo.addNode("ETIQ","fun_"+i);
                                                                                                            
                                                                                                      }:} 
                                                                                                      statements:stmnts TK_END TK_FUNCTION  {:if(!foundError){
                                                                                                                                                RESULT = new FunctionStatement("Function",i,listaparameters,listastatements,type,"End Function"); 
                                                                                                                                                listaparameters = new ArrayList();listastatements = new ArrayList();
                                                                                                                                                partir_ambito = ambito_actual.split("\\.");
                                                                                                                                                ambito_actual = remove_scope(partir_ambito);
                                                                                                                                                bloque = (int) pila_de_bloques.pop();
                                                                                                                                                offset = 0;
                                                                                                                                                cuadruplo.addNode("FINFUN","");
                                                                                                                                            }:}
                        
                        |TK_FUNCTION TK_ID:i TK_PARIN TK_PAROUT TK_AS data_type:type {:if(!foundError){
                                                                                            bloque++;
                                                                                            ambito_actual += "."+Integer.toString(bloque);
                                                                                            if(!tableIds.addNode(new IdNode(i,type,ambito_actual,type+"->void","Function"))){
                                                                                                System.err.println("Function "+i+" already exists "+type+"->void. Line "+ileft);
                                                                                            }
                                                                                            pila_de_bloques.push(bloque);
                                                                                            bloque = 0;
                                                                                            cuadruplo.addNode("ETIQ","fun_"+i);
                                                                                      }:} 
                                                                                      statements:stmnts TK_END TK_FUNCTION {:if(!foundError){
                                                                                                                                RESULT = new FunctionStatement("Function",i,null,listastatements,type,"End Function"); 
                                                                                                                                listastatements = new ArrayList();
                                                                                                                                partir_ambito = ambito_actual.split("\\.");
                                                                                                                                ambito_actual = remove_scope(partir_ambito);
                                                                                                                                bloque = (int) pila_de_bloques.pop();
                                                                                                                                offset = 0;
                                                                                                                                cuadruplo.addNode("FINFUN","");
                                                                                                                             }:}
                        
                        |TK_FUNCTION TK_ID TK_PARIN parameters:prmts error:er TK_PAROUT statements:stmnts TK_END TK_FUNCTION                   {:System.err.println("Erroneous Function declaration. Line "+erleft);foundError=true; :}
                        |TK_FUNCTION TK_ID TK_PARIN TK_PAROUT statements:stmnts error:er TK_END TK_FUNCTION                                    {:System.err.println("Error inside Function statement. Line "+erleft);foundError=true;:}
;

parameters ::= 	parameter:prmt TK_COMMA parameters:prmts        {: if(!foundError){listaparameters.add(prmt);}:}
		|parameter:prmt                                 {: if(!foundError){listaparameters.add(prmt);}:}
;

parameter ::=	parameter_type:prmt_type TK_ID:i TK_AS data_type:type {:if(!foundError){RESULT = new Parameter(prmt_type, type,i);
                                                                                                                                                      
                                                                      } 
                                                                      :}
;

parameter_type ::=  TK_BYVAL                    {: if(!foundError){RESULT = "ByVal";}:}
                    |TK_BYREF                   {: if(!foundError){RESULT = "ByRef";}:}
;

data_type ::=	TK_INTEGER          {: if(!foundError){RESULT = "Integer";size=4;offset += 4;} :}
		|TK_BOOLEAN         {: if(!foundError){RESULT = "Boolean";size=1;offset += 1;} :}
		|TK_STRING          {: if(!foundError){RESULT = "String";size=50;offset += 50;} :}
                |TK_ID:i               {: if(!foundError){
                                            if(!tableIds.searchRecord(i)){
                                                System.err.println("Error with variable declaration. Data Type: "+i+" cannot be found. Line "+ileft);
                                            }else{
                                                RESULT = i;
                                                size = tableIds.getRecordSize(i);
                                                offset += tableIds.getRecordSize(i);
                                            }
                                        }
                                    :}
;

statements ::=	statement:stmnt statements:stmnts       {:if(!foundError){listastatements.add(stmnt);
                                                            RESULT = new Statements();
                                                            RESULT.setListasig(fusiona(stmnt.getListasig(),stmnts.getListasig()));
                                                        }:}  
		| /* Vacio */                           {:RESULT = new Statements();RESULT.setListasig(new ArrayList<Integer>());:}
;

statement ::=	if_statement:ifStatement                {:if(!foundError){
                                                            RESULT = ifStatement;
                                                          } 
                                                        :}
		|for_statement:forStatement             {:if(!foundError){RESULT = forStatement;} :}
		|do_statement:doStatement               {:if(!foundError){RESULT = doStatement;} :}
                |write_statement:writeStatement         {:if(!foundError){RESULT = writeStatement;} :}
                |read_statement:readStatement           {:if(!foundError){RESULT = readStatement;} :}
                |variable_declaration:var_declare       {:if(!foundError){RESULT = var_declare;} :}
		|expression:expr                        {:if(!foundError){RESULT = expr;}:}
		|TK_RETURN expression:exp               {:if(!foundError){RESULT = new ReturnExpression("Return",exp);
                                                            cuadruplo.addNode("RET",exp.getLugar());
                                                        }:}
		|TK_EXIT                                {:if(!foundError){RESULT = new ExitStatement("Exit");} :}
;
write_statement ::= TK_WRITE TK_PARIN literal_expression:le TK_PAROUT           {:if(!foundError){RESULT = new WriteStatement("Write",le,null);
                                                                                    cuadruplo.addNode("print",le.getLugar());
                                                                                } :}
                    |TK_WRITE TK_PARIN TK_ID:i TK_PAROUT                        {:if(!foundError){RESULT = new WriteStatement("Write",null,i);
                                                                                    cuadruplo.addNode("print", i);
                                                                                }  :}
                    |TK_WRITE TK_PARIN error:er TK_PAROUT                          {:System.err.println("\t\t\t\t\t  Problem near Write(). Line "+erleft); foundError=true;:}
;
read_statement  ::= TK_READ TK_PARIN TK_ID:i TK_PAROUT               {:if(!foundError){RESULT = new ReadStatement("Read",i);
                                                                         //hay que buscar que este declarada i
                                                                         cuadruplo.addNode("read",i);
                                                                     } :}
                    |TK_READ TK_PARIN error:er TK_PAROUT              {:System.err.println("\t\t\t\t\t  Problem near Read(). Line "+erleft);foundError=true; :}
;
if_statement ::=    begin_if:beg TK_END TK_IF                                                                {:if(!foundError){
                                                                                                                 RESULT = new IfStatement("If",beg.getExpression(),"Then",null,listastatements,null,null,"End IF");
                                                                                                                 listastatements = new ArrayList();
                                                                                                                 partir_ambito = ambito_actual.split("\\.");
                                                                                                                 ambito_actual = remove_scope(partir_ambito);
                                                                                                                 bloque = (int) pila_de_bloques.pop();
                                                                                                                 cuadruplo.addNode("ETIQ","etiqueta"+contadoretiquetas);
                                                                                                                 //////cuadruplo.complete(beg.getListasig(),"etiqueta"+contadoretiquetas);
                                                                                                                 cuadruplo.complete(beg.getListanumbersFalse(),"etiqueta"+contadoretiquetas);
                                                                                                                 contadoretiquetas++;
                                                                                                               }:}
                    |begin_if:beg N:n else_statement:elseStmnt TK_END:tkend {::}TK_IF                            {:if(!foundError){
                                                                                                                    RESULT = new IfStatement("If",beg.getExpression(),"Then","Else",listastatements,null,elseStmnt,"End IF");
                                                                                                                   listastatements = new ArrayList();
                                                                                                                   partir_ambito = ambito_actual.split("\\.");
                                                                                                                   ambito_actual = remove_scope(partir_ambito);
                                                                                                                   bloque = (int) pila_de_bloques.pop();
                                                                                                                   
                                                                                                                   cuadruplo.addNode("ETIQ","etiqueta"+contadoretiquetas);
                                                                                                                   RESULT.setListasig(fusiona(beg.getListasig(),fusiona(n.getListasig(),elseStmnt.getListasig())));
                                                                                                                   //////cuadruplo.complete(beg.getListasig(),"etiqueta"+contadoretiquetas);
                                                                                                                   cuadruplo.complete(n.getListasig(),"etiqueta"+contadoretiquetas);
                                                                                                                   cuadruplo.complete(beg.getListanumbersFalse(),elseStmnt.getEtiqueteinicio());
                                                                                                                   //RESULT.setEtiqueta("etiqueta"+contadoretiquetas);
                                                                                                                   contadoretiquetas++;
                                                                                                                }:}
;
begin_if ::= TK_IF {:hayUnIf = true;:} expression:expr {:if(!foundError){
                                                RESULT = new IfStatement("Begin If",expr,"","",null,null,null,"");
                                                bloque++;
                                                ambito_actual += "."+Integer.toString(bloque);
                                                pila_de_bloques.push(bloque);
                                                bloque = 0;
                                                //cuadruplo.addNode("If",expr.getLugar(),"","etiqueta"+contadoretiquetas);
                                                //RESULT.getListanumbers(cuadruplo.getSize()-1);
                                                //cuadruplo.addNode("GOTO","");
                                                //RESULT.getListanumbersFalse().add(cuadruplo.getSize()-1);
                                                
                                                hayUnIf = false;
                                             }:} TK_THEN:tkthen{:cuadruplo.addNode("ETIQ","etiqueta"+contadoretiquetas);
                                                tkthen.setEtiqueta("etiqueta"+contadoretiquetas);
                                                contadoretiquetas++;:} statements:stmnts {://cuadruplo.addNode("GOTO","");
                                                                             //RESULT.getListasig().add(cuadruplo.getSize()-1);
                                                                             //contadoretiquetas++;
                                                                             cuadruplo.complete(expr.getListaverdaderas(),tkthen.getEtiqueta());
                                                                             RESULT.setListasig(fusiona(expr.getListafalsas(),stmnts.getListasig()));
                                                                             RESULT.setListanumbersFalse(expr.getListafalsas());
                                                                           :}
;

else_statement   ::=    {:if(!foundError){
                            partir_ambito = ambito_actual.split("\\.");
                            ambito_actual = remove_scope(partir_ambito);
                            bloque = (int) pila_de_bloques.pop();
                          }:} TK_ELSE:els {:if(!foundError){
                                    
                                    bloque++;
                                    ambito_actual += "."+Integer.toString(bloque);
                                    pila_de_bloques.push(bloque);
                                    bloque = 0;
                                    //els.setArraynumber(cuadruplo.getSize());
                                    cuadruplo.addNode("ETIQ","etiqueta"+contadoretiquetas);
                                    els.setEtiqueta("etiqueta"+contadoretiquetas);
                                    contadoretiquetas++;
                                  }:} statements:stmnts                   {:if(!foundError){
                                                                                RESULT = new ElseStatement("Else",listastatements);
                                                                                RESULT.setEtiqueteinicio(els.getEtiqueta());
                                                                                RESULT.setListasig(stmnts.getListasig());
                                                                                listastatements = new ArrayList();
                                                                                
                                                                          }:}
;
 

for_statement ::=	TK_FOR:fr {:if(!foundError){
                                    bloque++;
                                    ambito_actual += "."+Integer.toString(bloque);
                                    pila_de_bloques.push(bloque);
                                    bloque = 0;
                                }:} variable_declaration:var_declare {:cuadruplo.addNode("ETIQ","etiqueta"+contadoretiquetas);
                                                                        fr.setEtiqueta("etiqueta"+contadoretiquetas);
                                                                       contadoretiquetas++;
                                                                       /////////////cuadruplo.addNode("GOTO","");
                                                                     :} TK_TO:tkto {:hayUnIf = true; hayUnFor =true;:} expression:expr {:
                                                                                                cuadruplo.addNode("If",expr.getLugarFor(),"","etiqueta"+contadoretiquetas);
                                                                                                tkto.getListanumbers().add(cuadruplo.getSize()-1);
                                                                                                cuadruplo.addNode("GOTO","");
                                                                                                tkto.getListanumbersFalse().add(cuadruplo.getSize()-1);
                                                                                                cuadruplo.addNode("ETIQ","etiqueta"+contadoretiquetas);
                                                                                                contadoretiquetas++;
                                                                                                hayUnIf = false;
                                                                                                hayUnFor = false;
                                                                                         :} statements:stmnts {:String auxtmp = nuevoTemporal();
                                                                                                                cuadruplo.addNode("+",var_declare.getLugar(),"1",auxtmp);
                                                                                                                cuadruplo.addNode("=",auxtmp,"",var_declare.getLugar());
                                                                                                                cuadruplo.addNode("GOTO",fr.getEtiqueta());
                                                                                                              :}TK_NEXT                         {:if(!foundError){
                                                                                                                                                    RESULT = new ForStatement("For",var_declare,"To",expr,listastatements,"Next"); 
                                                                                                                                                    listastatements = new ArrayList();
                                                                                                                                                    partir_ambito = ambito_actual.split("\\.");
                                                                                                                                                    ambito_actual = remove_scope(partir_ambito);
                                                                                                                                                    bloque = (int) pila_de_bloques.pop();
                                                                                                                                                    cuadruplo.addNode("ETIQ","etiqueta"+contadoretiquetas);
                                                                                                                                                    cuadruplo.complete(tkto.getListanumbersFalse(),"etiqueta"+contadoretiquetas);
                                                                                                                                                    contadoretiquetas++;
                                                                                                                                                    
                                                                                                                                               }:}
; 


do_statement ::=    TK_DO TK_WHILE:whil{:cuadruplo.addNode("ETIQ","etiqueta"+contadoretiquetas);
                                        whil.setEtiqueta("etiqueta"+contadoretiquetas);
                                        contadoretiquetas++;
                                        hayUnIf = true;
                                        hayUnFor = true;
                                      :} expression:expr {:if(!foundError){
                                                            bloque++;
                                                            ambito_actual += "."+Integer.toString(bloque);
                                                            pila_de_bloques.push(bloque);
                                                            bloque = 0;
                                                            hayUnIf=false;
                                                            hayUnFor=false;
                                                        }:} statements:stmnts {:
                                                                                   cuadruplo.addNode("If",expr.getLugarFor(),"",whil.getEtiqueta());:}
                                                                                   TK_LOOP {:if(!foundError){ 
                                                                                        RESULT = new DoStatement("Do","While",listastatements,"Loop",null,expr);
                                                                                        listastatements = new ArrayList();
                                                                                        partir_ambito = ambito_actual.split("\\.");
                                                                                        ambito_actual = remove_scope(partir_ambito);
                                                                                        bloque = (int) pila_de_bloques.pop();
                                                                                   }:}
                    |TK_DO TK_WHILE error:er TK_LOOP                                               {:System.err.println("Error in Do While. Line "+erleft);foundError=true;:}
;

variable_declaration ::=    variable_declarator:var TK_COMMA variable_declaration:var_declare   {: if(!foundError){RESULT = new VariableDeclaration(var,var_declare);}:}
                            |variable_declarator:var                                            {: if(!foundError){RESULT = new VariableDeclaration(var,null);
                                                                                                    
                                                                                                    RESULT.setLugar(var.getLugar());
                                                                                                    variables.add(var);
                                                                                                }:}
;


variable_declarator  ::=    TK_DIM TK_ID:id TK_AS data_type:type TK_EQUALS expression:expr                  {: if(!foundError){RESULT = new VariableDeclarator("Dim",id,"As",type,"=",expr);
                                                                                                               String auxtype = expr.bringType();
                                                                                                               if(auxtype==type){
                                                                                                                    if(!tableIds.addNode(new IdNode(id,type,ambito_actual,size,offset))){//revisar si expr tiene el mismo type que id
                                                                                                                        
                                                                                                                         System.err.println("Variable id "+id+" already exists. Line "+idleft);//No estoy seguro si foundError debe cambiar
                                                                                                                    }
                                                                                                               }else{ 
                                                                                                                    if(auxtype=="none"){ 
                                                                                                                        auxtype = tableIds.searchNodeType(expr.getId(),ambito_actual);
                                                                                                                        if(!(auxtype==type))
                                                                                                                            System.err.println("Error with variable "+id+". Type "+auxtype+" has no implicit conversion to "+type+". Line "+idleft);
                                                                                                                    }else   
                                                                                                                        System.err.println("Error with variable "+id+". Type "+auxtype+" has no implicit conversion to "+type+". Line "+idleft);
                                                                                                               }
                                                                                                               cuadruplo.addNode("=",expr.getLugar(),"",id);
                                                                                                               RESULT.setLugar(id);
                                                                                                            }:}
                            |TK_ID:id TK_AS data_type:type TK_EQUALS expression:expr                        {: if(!foundError){RESULT = new VariableDeclarator(id,"As",type,"=",expr);
                                                                                                                String auxtype = expr.bringType();
                                                                                                               if(auxtype==type){
                                                                                                                    if(!tableIds.addNode(new IdNode(id,type,ambito_actual,size,offset))){//revisar si expr tiene el mismo type que id
                                                                                                                         System.err.println("Variable id "+id+" already exists. Line "+idleft);//No estoy seguro si foundError debe cambiar
                                                                                                                    }
                                                                                                               }else{ 
                                                                                                                    if(auxtype=="none"){ 
                                                                                                                        auxtype = tableIds.searchNodeType(expr.getId(),ambito_actual);
                                                                                                                        if(!(auxtype==type))
                                                                                                                            System.err.println("Error with variable "+id+". Type "+auxtype+" has no implicit conversion to "+type+". Line "+idleft);
                                                                                                                    }else   
                                                                                                                        System.err.println("Error with variable "+id+". Type "+auxtype+" has no implicit conversion to "+type+". Line "+idleft);
                                                                                                               }
                                                                                                               cuadruplo.addNode("=",expr.getLugar(),"",id);
                                                                                                               RESULT.setLugar(id);
                                                                                                            }:}
                            |TK_DIM TK_ID:id TK_EQUALS expression:expr                                      {: if(!foundError){RESULT = new VariableDeclarator("Dim",id,"=",expr);
                                                                                                               String auxtype1 =tableIds.searchNodeType(id,ambito_actual);
                                                                                                               String auxtype2 = expr.bringType();
                                                                                                               if(auxtype2=="none"){ auxtype2 = tableIds.searchNodeType(expr.getId(),ambito_actual);}
                                                                                                               if(auxtype1 != auxtype2){System.err.println("Error with variable "+id+". Type "+auxtype2+" has no implicit conversion to "+auxtype1+". Line "+idleft);}
                                                                                                               cuadruplo.addNode("=",expr.getLugar(),"",id);
                                                                                                               RESULT.setLugar(id);
                                                                                                            } :}
                            |TK_ID:id TK_EQUALS expression:expr                                             {: if(!foundError){RESULT = new VariableDeclarator(id,"=",expr);
                                                                                                               String auxtype1 =tableIds.searchNodeType(id,ambito_actual);
                                                                                                               String auxtype2 = expr.bringType();
                                                                                                               if(auxtype2=="none"){ auxtype2 = tableIds.searchNodeType(expr.getId(),ambito_actual);}
                                                                                                               if(auxtype1 != auxtype2){System.err.println("Error with variable "+id+". Type "+auxtype2+" has no implicit conversion to "+auxtype1+". Line "+idleft);}
                                                                                                               cuadruplo.addNode("=",expr.getLugar(),"",id);
                                                                                                               RESULT.setLugar(id);
                                                                                                            }:}
                            |TK_ID:id TK_AS data_type:type                                                  {:if(!foundError){RESULT = new VariableDeclarator(id,"As",type);
                                                                                                                if(type != null){
                                                                                                                    if(!tableIds.addNode(new IdNode(id,type,ambito_actual,size,offset))){
                                                                                                                        System.err.println("Variable id "+id+" already exists. Line "+idleft);
                                                                                                                    }
                                                                                                                } 
                                                                                                             }:}
                            |TK_DIM TK_ID:id TK_AS data_type:type                                              {:if(!foundError){RESULT = new VariableDeclarator("Dim", id, "As", type);
                                                                                                                    if(type != null){
                                                                                                                        if(!tableIds.addNode(new IdNode(id,type,ambito_actual,size,offset))){
                                                                                                                            System.err.println("Variable id "+id+" already exists. Line "+idleft);
                                                                                                                        }
                                                                                                                    }
                                                                                                                }:}                                                                                  
;   


expression ::=	numeric_expression:num_exp      {: if(!foundError){RESULT = new NumericExpression(((NumericExpression)num_exp).getExpression1(),((NumericExpression)num_exp).getExpression2(),((NumericExpression)num_exp).getOperador(),null); RESULT.setLugar(num_exp.getLugar());} :}
		|boolean_expression:bool_exp    {:if(!foundError){RESULT = new BooleanExpression(((BooleanExpression)bool_exp).getExpression1(), ((BooleanExpression)bool_exp).getOperador(), ((BooleanExpression)bool_exp).getExpression2(),null); RESULT.setLugar(bool_exp.getLugar()); RESULT.setListaverdaderas(bool_exp.getListaverdaderas());RESULT.setListafalsas(bool_exp.getListafalsas()); RESULT.setLugarFor(bool_exp.getLugarFor());} :}
		|logical_expression:logic_exp   {:if(!foundError){RESULT = new LogicalExpression(((LogicalExpression)logic_exp).isValue(),((LogicalExpression)logic_exp).getOperador(),((LogicalExpression)logic_exp).getExpression1(),((LogicalExpression)logic_exp).getExpression2(),null); RESULT.setLugar(logic_exp.getLugar()); RESULT.setListaverdaderas(logic_exp.getListaverdaderas());RESULT.setListafalsas(logic_exp.getListafalsas());} :}
		|literal_expression:lit_exp     {:if(!foundError){RESULT = new LiteralExpression(((LiteralExpression)lit_exp).getStringval(),((LiteralExpression)lit_exp).getNumber(),null); RESULT.setLugar(lit_exp.getLugar());} :}
		|TK_ID:id                       {:if(!foundError){RESULT = new Expression(id); RESULT.setLugar(id);} :}
		|function_call:call             {:if(!foundError){RESULT = new FunctionCall(((FunctionCall)call).getArguments(),((FunctionCall)call).getId(),((FunctionCall)call).getReturns()); RESULT.setLugar(call.getLugar());} :}
;



logical_expression ::= TK_NOT expression:e1                             {:if(!foundError){RESULT = new LogicalExpression("Not",e1,null);
                                                                            if(e1.getId() != null && !tableIds.searchScope(e1.getId(),ambito_actual)){
                                                                                System.err.println("Variable "+e1.getId()+" has not been declared in this scope. Line "+e1left);
                                                                            }else{
                                                                                String auxtype = e1.bringType();
                                                                                if(auxtype != "Boolean"){
                                                                                    if(auxtype == "none"){
                                                                                        auxtype = tableIds.searchNodeType(e1.getId(),ambito_actual);
                                                                                        if(auxtype != "Boolean"){System.err.println("Error with variable "+e1.getId()+", not a boolean expression. Is "+auxtype+". Line "+e1left);}
                                                                                    }else{
                                                                                        System.err.println("Error at NOT *expression*, not a boolean expression. Is "+auxtype+". Line "+e1left);
                                                                                    }
                                                                                }
                                                                            }
                                                                            RESULT.setListaverdaderas(e1.getListafalsas());
                                                                            RESULT.setListafalsas(e1.getListaverdaderas());
                                                                            //RESULT.setLugar(nuevoTemporal());
                                                                            //cuadruplo.addNode("NOT",e1.getLugar(),"",RESULT.getLugar());
                                                                        }:}
                       |TK_NOT TK_PARIN expression:e1 TK_PAROUT         {:if(!foundError){RESULT = new LogicalExpression("Not",e1,null);
                                                                           if(e1.getId() != null && !tableIds.searchScope(e1.getId(),ambito_actual)){
                                                                                System.err.println("Variable "+e1.getId()+" has not been declared in this scope. Line "+e1left);
                                                                           }else{
                                                                                String auxtype = e1.bringType();
                                                                                if(auxtype != "Boolean"){
                                                                                    if(auxtype == "none"){
                                                                                        auxtype = tableIds.searchNodeType(e1.getId(),ambito_actual);
                                                                                        if(auxtype != "Boolean"){System.err.println("Error with variable "+e1.getId()+", not a boolean expression. Is "+auxtype+". Line "+e1left);}
                                                                                    }else{
                                                                                        System.err.println("Error at NOT *(expression)*, not a boolean expression. Is "+auxtype+". Line "+e1left);
                                                                                    }
                                                                                }
                                                                            }
                                                                            RESULT.setListaverdaderas(e1.getListafalsas());
                                                                            RESULT.setListafalsas(e1.getListaverdaderas());
                                                                            //RESULT.setLugar(nuevoTemporal());
                                                                            //cuadruplo.addNode("NOT",e1.getLugar(),"",RESULT.getLugar());
                                                                        }:}
                       |expression:e1 TK_OR:tkor {:cuadruplo.addNode("ETIQ","etiqueta"+contadoretiquetas);
                                              tkor.setEtiqueta("etiqueta"+contadoretiquetas);
                                              contadoretiquetas++;                                             
                                            :} 
                                               expression:e2               {:if(!foundError){RESULT = new LogicalExpression("Or",e1,e2,null);
                                                                            if(e1.getId() != null && !tableIds.searchScope(e1.getId(),ambito_actual)){
                                                                                System.err.println("Variable "+e1.getId()+" has not been declared in this scope. Line "+e1left); 
                                                                            }else{
                                                                                String auxtype = e1.bringType();
                                                                                if(auxtype != "Boolean"){
                                                                                    if(auxtype == "none"){
                                                                                        auxtype = tableIds.searchNodeType(e1.getId(),ambito_actual);
                                                                                        if((auxtype != "Boolean") && auxtype!="Integer"){System.err.println("Error with variable "+e1.getId()+", not a boolean expression. Is "+auxtype+". Line "+e1left);}
                                                                                    }else{System.err.println("Error at *expression* Or *expression*, not a boolean expression. Is "+auxtype+". Line "+e1left);}
                                                                                }
                                                                            }
                                                                            
                                                                            if(e2.getId() != null && !tableIds.searchScope(e2.getId(),ambito_actual)){
                                                                                System.err.println("Variable "+e2.getId()+" has not been declared in this scope. Line "+e2left);
                                                                            }else{
                                                                                String auxtype2 = e2.bringType();
                                                                                if(auxtype2 != "Boolean"){
                                                                                    if(auxtype2 == "none"){
                                                                                        auxtype2 = tableIds.searchNodeType(e2.getId(),ambito_actual);
                                                                                        if((auxtype2 != "Boolean") && auxtype2!="Integer"){System.err.println("Error with variable "+e2.getId()+", not a boolean expression. Is "+auxtype2+". Line "+e2left);}
                                                                                    }else{System.err.println("Error at *expression* Or *expression*, not a boolean expression. Is "+auxtype2+". Line "+e2left);}
                                                                                }
                                                                            }
                                                                            
                                                                            //comenzar por aqui
                                                                            cuadruplo.complete(e1.getListafalsas(),tkor.getEtiqueta());
                                                                            RESULT.setListaverdaderas(fusiona(e1.getListaverdaderas(),e2.getListaverdaderas()));
                                                                            RESULT.setListafalsas(e2.getListafalsas());
                                                                            RESULT.setLugar(e1.getLugar());
                                                                            //cuadruplo.addNode("Or",e1.getLugar(),e2.getLugar(),RESULT.getLugar());
                                                                        }:}
                       |expression:e1 TK_AND:tkand {:cuadruplo.addNode("ETIQ","etiqueta"+contadoretiquetas);
                                              tkand.setEtiqueta("etiqueta"+contadoretiquetas);
                                              contadoretiquetas++;                                             
                                            :} expression:e2              {:if(!foundError){RESULT = new LogicalExpression("And",e1,e2,null);
                                                                            if(e1.getId() != null && !tableIds.searchScope(e1.getId(),ambito_actual)){
                                                                                System.err.println("Variable "+e1.getId()+" has not been declared in this scope. Line "+e1left+" "+e1right);
                                                                            }else{
                                                                                String auxtype = e1.bringType();
                                                                                if(auxtype != "Boolean"){
                                                                                    if(auxtype == "none"){
                                                                                        auxtype = tableIds.searchNodeType(e1.getId(),ambito_actual);
                                                                                        if((auxtype != "Boolean") && (auxtype!="Integer")){System.err.println("Error with variable "+e1.getId()+", not a boolean expression. Is "+auxtype+". Line "+e1left);}
                                                                                    }else{System.err.println("Error at *expression* And *expression*, not a boolean expression. Is "+auxtype+". Line "+e1left);}
                                                                                }
                                                                            }
                                                                            
                                                                            if(e2.getId() != null && !tableIds.searchScope(e2.getId(), ambito_actual)){
                                                                                System.err.println("Variable "+e2.getId()+" has not been declared in this scope. Line "+e2left);
                                                                            }else{
                                                                                String auxtype2 = e2.bringType();
                                                                                if(auxtype2 != "Boolean"){
                                                                                    if(auxtype2 == "none"){
                                                                                        auxtype2 = tableIds.searchNodeType(e2.getId(),ambito_actual);
                                                                                        if((auxtype2 != "Boolean") && (auxtype2!="Integer")){System.err.println("Error with variable "+e2.getId()+", not a boolean expression. Is "+auxtype2+". Line "+e2left);}
                                                                                    }else{System.err.println("Error at *expression* And *expression*, not a boolean expression. Is "+auxtype2+". Line "+e2left);}
                                                                                }
                                                                            }
                                                                            cuadruplo.complete(e1.getListaverdaderas(),tkand.getEtiqueta());
                                                                            RESULT.setListaverdaderas(e2.getListaverdaderas());
                                                                            RESULT.setListafalsas(fusiona(e1.getListafalsas(),e2.getListafalsas()));
                                                                            RESULT.setLugar(e1.getLugar());
                                                                            //RESULT.setLugar(nuevoTemporal());
                                                                            //cuadruplo.addNode("And",e1.getLugar(),e2.getLugar(),RESULT.getLugar());
                                                                            
                                                                        } :}
                       |TK_TRUE                                         {:if(!foundError){RESULT = new LogicalExpression(true,null);} 
                                                                            RESULT.getListaverdaderas().add(cuadruplo.getSize());
                                                                            cuadruplo.addNode("GOTO","");
                                                                        :}
                       |TK_FALSE                                        {:if(!foundError){RESULT = new LogicalExpression(false,null);} 
                                                                            RESULT.getListafalsas().add(cuadruplo.getSize());
                                                                            cuadruplo.addNode("GOTO","");
                                                                        :}
;
boolean_expression ::= expression:e1 TK_GREATERTHAN expression:e2                       {: if(!foundError){RESULT = new BooleanExpression(e1,">",e2,null);
                                                                                            
                                                                                            
                                                                                                if(e1.getId()!=null && !tableIds.searchScope(e1.getId(),ambito_actual)){
                                                                                                    System.err.println("Variable "+e1.getId()+" has not been declared in this scope. Line "+e1left);
                                                                                                }else{
                                                                                                    String auxtype = e1.bringType();
                                                                                                    if(auxtype != "Integer"){
                                                                                                        if(auxtype == "none"){
                                                                                                            auxtype = tableIds.searchNodeType(e1.getId(),ambito_actual);
                                                                                                            if(auxtype != "Integer"){
                                                                                                                System.err.println("Error with variable "+e1.getId()+", not an Integer. Is "+auxtype+". Line "+e1left);
                                                                                                            }
                                                                                                        }else{
                                                                                                            System.err.println("Error at *expression1* > *expression2*, expression1 is not an Integer. Is "+auxtype+". Line "+e1left);
                                                                                                        }
                                                                                                    }else{
                                                                                                        
                                                                                                        
                                                                                                    }
                                                                                                }
                                                                                            
                                                                                            
                                                                                            
                                                                                                if(e2.getId()!=null && !tableIds.searchScope(e1.getId(),ambito_actual)){
                                                                                                    System.err.println("Variable "+e2.getId()+" has not been declared in this scope. Line "+e2left);
                                                                                                }else{
                                                                                                    String auxtype2 = e2.bringType();
                                                                                                    if(auxtype2 != "Integer"){
                                                                                                        if(auxtype2 == "none"){
                                                                                                            auxtype2 = tableIds.searchNodeType(e2.getId(),ambito_actual);
                                                                                                            if(auxtype2 != "Integer"){
                                                                                                                System.err.println("Error with variable "+e2.getId()+", is not an Integer. Is "+auxtype2+". Line "+e2left);
                                                                                                            }
                                                                                                        }else{
                                                                                                            System.err.println("Error at *expression1* > *expression2*, expression2 is not an Integer. Is "+auxtype2+". Line "+e2left);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                if(!hayUnIf){
                                                                                                    RESULT.setLugar(nuevoTemporal());
                                                                                                    int tmpet = contadoretiquetas;
                                                                                                    cuadruplo.addNode(">",e1.getLugar(),e2.getLugar(),"etiqueta"+tmpet);
                                                                                                    contadoretiquetas++;
                                                                                                    cuadruplo.addNode("=","0","",RESULT.getLugar());
                                                                                                    int tmpet2 = contadoretiquetas;
                                                                                                    cuadruplo.addNode("GOTO","etiqueta"+tmpet2);
                                                                                                    contadoretiquetas++;
                                                                                                    cuadruplo.addNode("ETIQ","etiqueta"+tmpet);
                                                                                                    cuadruplo.addNode("=","1","",RESULT.getLugar());
                                                                                                    cuadruplo.addNode("ETIQ","etiqueta"+tmpet2);
                                                                                                }else if(!hayUnFor){//RESULT.setLugar(e1.getLugar()+">"+e2.getLugar());
                                                                                                    RESULT.setLugarFor(e1.getLugar()+">"+e2.getLugar());
                                                                                                    RESULT.getListaverdaderas().add(cuadruplo.getSize());
                                                                                                    cuadruplo.addNode("If>",e1.getLugar(),e2.getLugar(),"");
                                                                                                    RESULT.getListafalsas().add(cuadruplo.getSize());
                                                                                                    cuadruplo.addNode("GOTO","");
                                                                                                }else{RESULT.setLugarFor(e1.getLugar()+">"+e2.getLugar());}
                                                                                                                                                                               
                                                                                        }:}

                       |expression:e1 TK_LESSTHAN expression:e2                         {: if(!foundError){RESULT = new BooleanExpression(e1,"<",e2,null);
                                                                                            
                                                                                                if(e1.getId()!=null && !tableIds.searchScope(e1.getId(),ambito_actual)){
                                                                                                    System.err.println("Variable "+e1.getId()+" has not been declared in this scope. Line "+e1left);
                                                                                                }else{
                                                                                                    String auxtype = e1.bringType();
                                                                                                    if(auxtype != "Integer"){
                                                                                                        if(auxtype == "none"){
                                                                                                            auxtype = tableIds.searchNodeType(e1.getId(),ambito_actual);
                                                                                                            if(auxtype != "Integer"){
                                                                                                                System.err.println("Error with variable "+e1.getId()+", not an Integer. Is "+auxtype+". Line "+e1left);
                                                                                                            }
                                                                                                        }else{
                                                                                                            System.err.println("Error at *expression1* < *expression2*, expression1 is not an Integer. Is "+auxtype+". Line "+e1left);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            
                                                                                            
                                                                                                if(e2.getId()!=null && !tableIds.searchScope(e2.getId(),ambito_actual)){
                                                                                                    System.err.println("Variable "+e2.getId()+" has not been declared in this scope. Line "+e2left);
                                                                                                }else{
                                                                                                    String auxtype2 = e2.bringType();
                                                                                                    if(auxtype2 != "Integer"){
                                                                                                        if(auxtype2 == "none"){
                                                                                                            auxtype2 = tableIds.searchNodeType(e2.getId(),ambito_actual);
                                                                                                            if(auxtype2 != "Integer"){
                                                                                                                System.err.println("Error with variable "+e2.getId()+", is not an Integer. Is "+auxtype2+". Line "+e2left);
                                                                                                            }
                                                                                                        }else{
                                                                                                            System.err.println("Error at *expression1* < *expression2*, expression2 is not an Integer. Is "+auxtype2+". Line "+e2left);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                if(!hayUnIf){
                                                                                                    RESULT.setLugar(nuevoTemporal());
                                                                                                    int tmpet = contadoretiquetas;
                                                                                                    cuadruplo.addNode("<",e1.getLugar(),e2.getLugar(),"etiqueta"+tmpet);
                                                                                                    contadoretiquetas++;
                                                                                                    cuadruplo.addNode("=","0","",RESULT.getLugar());
                                                                                                    int tmpet2 = contadoretiquetas;
                                                                                                    cuadruplo.addNode("GOTO","etiqueta"+tmpet2);
                                                                                                    contadoretiquetas++;
                                                                                                    cuadruplo.addNode("ETIQ","etiqueta"+tmpet);
                                                                                                    cuadruplo.addNode("=","1","",RESULT.getLugar());
                                                                                                    cuadruplo.addNode("ETIQ","etiqueta"+tmpet2);
                                                                                                }else if(!hayUnFor){//RESULT.setLugarFor(e1.getLugar()+op+e2.getLugar());
                                                                                                    RESULT.setLugarFor(e1.getLugar()+"<"+e2.getLugar());
                                                                                                    RESULT.getListaverdaderas().add(cuadruplo.getSize());
                                                                                                    cuadruplo.addNode("If<",e1.getLugar(),e2.getLugar(),"");
                                                                                                    RESULT.getListafalsas().add(cuadruplo.getSize());
                                                                                                    cuadruplo.addNode("GOTO","");
                                                                                                }else{RESULT.setLugarFor(e1.getLugar()+"<"+e2.getLugar());}
                                                                                            
                                                                                        }:}
                       |expression:e1 TK_GREATEREQUAL expression:e2                     {: if(!foundError){RESULT = new BooleanExpression(e1,">=",e2,null);
                                                                                            
                                                                                                if(e1.getId()!=null && !tableIds.searchScope(e1.getId(),ambito_actual)){
                                                                                                    System.err.println("Variable "+e1.getId()+" has not been declared in this scope. Line "+e1left);
                                                                                                }else{
                                                                                                    String auxtype = e1.bringType();
                                                                                                    if(auxtype != "Integer"){
                                                                                                        if(auxtype == "none"){
                                                                                                            auxtype = tableIds.searchNodeType(e1.getId(),ambito_actual);
                                                                                                            if(auxtype != "Integer"){
                                                                                                                System.err.println("Error with variable "+e1.getId()+", not an Integer. Is "+auxtype+". Line "+e1left);
                                                                                                            }
                                                                                                        }else{
                                                                                                            System.err.println("Error at *expression1* >= *expression2*, expression1 is not an Integer. Is "+auxtype+". Line "+e1left);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            
                                                                                            
                                                                                                if(e2.getId()!=null && !tableIds.searchScope(e2.getId(),ambito_actual)){
                                                                                                    System.err.println("Variable "+e2.getId()+" has not been declared in this scope. Line "+e2left);
                                                                                                }else{
                                                                                                    String auxtype2 = e2.bringType();
                                                                                                    if(auxtype2 != "Integer"){
                                                                                                        if(auxtype2 == "none"){
                                                                                                            auxtype2 = tableIds.searchNodeType(e2.getId(),ambito_actual);
                                                                                                            if(auxtype2 != "Integer"){
                                                                                                                System.err.println("Error with variable "+e2.getId()+", is not an Integer. Is "+auxtype2+". Line "+e2left);
                                                                                                            }
                                                                                                        }else{
                                                                                                            System.err.println("Error at *expression1* >= *expression2*, expression2 is not an Integer. Is "+auxtype2+". Line "+e2left);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                if(!hayUnIf){
                                                                                                    RESULT.setLugar(nuevoTemporal());
                                                                                                    int tmpet = contadoretiquetas;
                                                                                                    cuadruplo.addNode(">=",e1.getLugar(),e2.getLugar(),"etiqueta"+tmpet);
                                                                                                    contadoretiquetas++;
                                                                                                    cuadruplo.addNode("=","0","",RESULT.getLugar());
                                                                                                    int tmpet2 = contadoretiquetas;
                                                                                                    cuadruplo.addNode("GOTO","etiqueta"+tmpet2);
                                                                                                    contadoretiquetas++;
                                                                                                    cuadruplo.addNode("ETIQ","etiqueta"+tmpet);
                                                                                                    cuadruplo.addNode("=","1","",RESULT.getLugar());
                                                                                                    cuadruplo.addNode("ETIQ","etiqueta"+tmpet2);
                                                                                                }else if(!hayUnFor){//RESULT.setLugarFor(e1.getLugar()+op+e2.getLugar());
                                                                                                    RESULT.setLugarFor(e1.getLugar()+">="+e2.getLugar());
                                                                                                    RESULT.getListaverdaderas().add(cuadruplo.getSize());
                                                                                                    cuadruplo.addNode("If>=",e1.getLugar(),e2.getLugar(),"");
                                                                                                    RESULT.getListafalsas().add(cuadruplo.getSize());
                                                                                                    cuadruplo.addNode("GOTO","");
                                                                                                }else{RESULT.setLugarFor(e1.getLugar()+">="+e2.getLugar());}
                                                                                             
                                                                                        }:}
                       |expression:e1 TK_LESSEQUAL expression:e2                        {: if(!foundError){RESULT = new BooleanExpression(e1,"<=",e2,null);
                                                                                            
                                                                                                if(e1.getId()!=null && !tableIds.searchScope(e1.getId(),ambito_actual)){
                                                                                                    System.err.println("Variable "+e1.getId()+" has not been declared in this scope. Line "+e1left);
                                                                                                }else{
                                                                                                    String auxtype = e1.bringType();
                                                                                                    if(auxtype != "Integer"){
                                                                                                        if(auxtype == "none"){
                                                                                                            auxtype = tableIds.searchNodeType(e1.getId(),ambito_actual);
                                                                                                            if(auxtype != "Integer"){
                                                                                                                System.err.println("Error with variable "+e1.getId()+", not an Integer. Is "+auxtype+". Line "+e1left);
                                                                                                            }
                                                                                                        }else{
                                                                                                            System.err.println("Error at *expression1* <= *expression2*, expression1 is not an Integer. Is "+auxtype+". Line "+e1left);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            
                                                                                            
                                                                                                if(e2.getId()!=null && !tableIds.searchScope(e2.getId(),ambito_actual)){
                                                                                                    System.err.println("Variable "+e2.getId()+" has not been declared in this scope. Line "+e2left);
                                                                                                }else{
                                                                                                    String auxtype2 = e2.bringType();
                                                                                                    if(auxtype2 != "Integer"){
                                                                                                        if(auxtype2 == "none"){
                                                                                                            auxtype2 = tableIds.searchNodeType(e2.getId(),ambito_actual);
                                                                                                            if(auxtype2 != "Integer"){
                                                                                                                System.err.println("Error with variable "+e2.getId()+", is not an Integer. Is "+auxtype2+". Line "+e2left);
                                                                                                            }
                                                                                                        }else{
                                                                                                            System.err.println("Error at *expression1* <= *expression2*, expression2 is not an Integer. Is "+auxtype2+". Line "+e2left);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                if(!hayUnIf){
                                                                                                    RESULT.setLugar(nuevoTemporal());
                                                                                                    int tmpet = contadoretiquetas;
                                                                                                    cuadruplo.addNode("<=",e1.getLugar(),e2.getLugar(),"etiqueta"+tmpet);
                                                                                                    contadoretiquetas++;
                                                                                                    cuadruplo.addNode("=","0","",RESULT.getLugar());
                                                                                                    int tmpet2 = contadoretiquetas;
                                                                                                    cuadruplo.addNode("GOTO","etiqueta"+tmpet2);
                                                                                                    contadoretiquetas++;
                                                                                                    cuadruplo.addNode("ETIQ","etiqueta"+tmpet);
                                                                                                    cuadruplo.addNode("=","1","",RESULT.getLugar());
                                                                                                    cuadruplo.addNode("ETIQ","etiqueta"+tmpet2);
                                                                                                }else if(!hayUnFor){//RESULT.setLugarFor(e1.getLugar()+op+e2.getLugar());
                                                                                                    RESULT.setLugarFor(e1.getLugar()+"<="+e2.getLugar());
                                                                                                    RESULT.getListaverdaderas().add(cuadruplo.getSize());
                                                                                                    cuadruplo.addNode("If<=",e1.getLugar(),e2.getLugar(),"");
                                                                                                    RESULT.getListafalsas().add(cuadruplo.getSize());
                                                                                                    cuadruplo.addNode("GOTO","");}
                                                                                                    else{RESULT.setLugarFor(e1.getLugar()+"<="+e2.getLugar());}
                                                                                             
                                                                                        }:}
                       |expression:e1 TK_EQUALS expression:e2                           {: if(!foundError){RESULT = new BooleanExpression(e1,"=",e2,null);
                                                                                            
                                                                                                if(e1.getId()!=null && !tableIds.searchScope(e1.getId(),ambito_actual)){
                                                                                                    System.err.println("Variable "+e1.getId()+" has not been declared in this scope. Line "+e1left);
                                                                                                }else{
                                                                                                    String auxtype = e1.bringType();
                                                                                                    if(auxtype != "Integer"){
                                                                                                        if(auxtype == "none"){
                                                                                                            auxtype = tableIds.searchNodeType(e1.getId(),ambito_actual);
                                                                                                            if(auxtype != "Integer"){
                                                                                                                System.err.println("Error with variable "+e1.getId()+", not an Integer. Is "+auxtype+". Line "+e1left);
                                                                                                            }
                                                                                                        }else{
                                                                                                            System.err.println("Error at *expression1* = *expression2*, expression1 is not an Integer. Is "+auxtype+". Line "+e1left);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            
                                                                                            
                                                                                                if(e2.getId()!=null && !tableIds.searchScope(e2.getId(),ambito_actual)){
                                                                                                    System.err.println("Variable "+e2.getId()+" has not been declared in this scope. Line "+e2left);
                                                                                                }else{
                                                                                                    String auxtype2 = e2.bringType();
                                                                                                    if(auxtype2 != "Integer"){
                                                                                                        if(auxtype2 == "none"){
                                                                                                            auxtype2 = tableIds.searchNodeType(e2.getId(),ambito_actual);
                                                                                                            if(auxtype2 != "Integer"){
                                                                                                                System.err.println("Error with variable "+e2.getId()+", is not an Integer. Is "+auxtype2+". Line "+e2left);
                                                                                                            }
                                                                                                        }else{
                                                                                                           System.err.println("Error at *expression1* = *expression2*, expression2 is not an Integer. Is "+auxtype2+". Line "+e2left); 
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                if(!hayUnIf){
                                                                                                    RESULT.setLugar(nuevoTemporal());
                                                                                                    int tmpet = contadoretiquetas;
                                                                                                    cuadruplo.addNode("==",e1.getLugar(),e2.getLugar(),"etiqueta"+tmpet);
                                                                                                    contadoretiquetas++;
                                                                                                    cuadruplo.addNode("=","0","",RESULT.getLugar());
                                                                                                    int tmpet2 = contadoretiquetas;
                                                                                                    cuadruplo.addNode("GOTO","etiqueta"+tmpet2);
                                                                                                    contadoretiquetas++;
                                                                                                    cuadruplo.addNode("ETIQ","etiqueta"+tmpet);
                                                                                                    cuadruplo.addNode("=","1","",RESULT.getLugar());
                                                                                                    cuadruplo.addNode("ETIQ","etiqueta"+tmpet2);
                                                                                                }else if(!hayUnFor){//RESULT.setLugarFor(e1.getLugar()+op+e2.getLugar());
                                                                                                    RESULT.setLugarFor(e1.getLugar()+"="+e2.getLugar());
                                                                                                    RESULT.getListaverdaderas().add(cuadruplo.getSize());
                                                                                                    cuadruplo.addNode("If=",e1.getLugar(),e2.getLugar(),"");
                                                                                                    RESULT.getListafalsas().add(cuadruplo.getSize());
                                                                                                    cuadruplo.addNode("GOTO","");}
                                                                                                else{RESULT.setLugarFor(e1.getLugar()+"="+e2.getLugar());}
                                                                                            
                                                                                        }:}
                       |expression:e1 TK_NOTEQUAL expression:e2                         {: if(!foundError){RESULT = new BooleanExpression(e1,"<>",e2,null);
                                                                                            
                                                                                                if(e1.getId()!=null && !tableIds.searchScope(e1.getId(),ambito_actual)){
                                                                                                    System.err.println("Variable "+e1.getId()+" has not been declared in this scope. Line "+e1left);
                                                                                                }else{
                                                                                                    String auxtype = e1.bringType();
                                                                                                    if(auxtype != "Integer"){
                                                                                                        if(auxtype == "none"){
                                                                                                            auxtype = tableIds.searchNodeType(e1.getId(),ambito_actual);
                                                                                                            if(auxtype != "Integer"){
                                                                                                                System.err.println("Error with variable "+e1.getId()+", not an Integer. Is "+auxtype+". Line "+e1left);
                                                                                                            }
                                                                                                        }else{
                                                                                                            System.err.println("Error at *expression1* <> *expression2*, expression1 is not an Integer. Is "+auxtype+". Line "+e1left);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            
                                                                                            
                                                                                                if(e2.getId()!=null && !tableIds.searchScope(e2.getId(),ambito_actual)){
                                                                                                    System.err.println("Variable "+e2.getId()+" has not been declared in this scope. Line "+e2left);
                                                                                                }else{
                                                                                                    String auxtype2 = e2.bringType();
                                                                                                    if(auxtype2 != "Integer"){
                                                                                                        if(auxtype2 == "none"){
                                                                                                            auxtype2 = tableIds.searchNodeType(e2.getId(),ambito_actual);
                                                                                                            if(auxtype2 != "Integer"){
                                                                                                                System.err.println("Error with variable "+e2.getId()+", is not an Integer. Is "+auxtype2+". Line "+e2left);
                                                                                                            }
                                                                                                        }else{
                                                                                                            System.err.println("Error at *expression1* <> *expression2*, expression2 is not an Integer. Is "+auxtype2+". Line "+e2left);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                if(!hayUnIf){
                                                                                                    RESULT.setLugar(nuevoTemporal());
                                                                                                    int tmpet = contadoretiquetas;
                                                                                                    cuadruplo.addNode("!=",e1.getLugar(),e2.getLugar(),"etiqueta"+tmpet);
                                                                                                    contadoretiquetas++;
                                                                                                    cuadruplo.addNode("=","0","",RESULT.getLugar());
                                                                                                    int tmpet2 = contadoretiquetas;
                                                                                                    cuadruplo.addNode("GOTO","etiqueta"+tmpet2);
                                                                                                    contadoretiquetas++;
                                                                                                    cuadruplo.addNode("ETIQ","etiqueta"+tmpet);
                                                                                                    cuadruplo.addNode("=","1","",RESULT.getLugar());
                                                                                                    cuadruplo.addNode("ETIQ","etiqueta"+tmpet2);
                                                                                                }else if(!hayUnFor){//RESULT.setLugarFor(e1.getLugar()+op+e2.getLugar());
                                                                                                    RESULT.setLugarFor(e1.getLugar()+"!="+e2.getLugar());
                                                                                                    RESULT.getListaverdaderas().add(cuadruplo.getSize());
                                                                                                    cuadruplo.addNode("If!=",e1.getLugar(),e2.getLugar(),"");
                                                                                                    RESULT.getListafalsas().add(cuadruplo.getSize());
                                                                                                    cuadruplo.addNode("GOTO","");}
                                                                                                else{RESULT.setLugarFor(e1.getLugar()+"!="+e2.getLugar());} 
                                                                                             }
:}
;
numeric_expression ::= expression:e1 TK_SUM expression:e2               {:if(!foundError){RESULT = new NumericExpression(e1,e2,"+",null);
                                                                            
                                                                                if(e1.getId()!=null && !tableIds.searchScope(e1.getId(),ambito_actual)){
                                                                                    System.err.println("Variable "+e1.getId()+" has not been declared in this scope. Line "+e1left);
                                                                                }else{
                                                                                    String auxtype = e1.bringType();
                                                                                    if(auxtype != "Integer"){
                                                                                        if(auxtype == "none"){
                                                                                            auxtype = tableIds.searchNodeType(e1.getId(),ambito_actual);
                                                                                                if(auxtype != "Integer"){
                                                                                                    System.err.println("Error with variable "+e1.getId()+", not an Integer. Is "+auxtype+". Line "+e1left);
                                                                                                }
                                                                                        }else{
                                                                                            System.err.println("Error at *expression1* + *expression2*, first operand is not an Integer. Is "+auxtype+". Line "+e1left);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            
                                                                            
                                                                                if(e2.getId()!=null && !tableIds.searchScope(e2.getId(),ambito_actual)){
                                                                                    System.err.println("Variable "+e2.getId()+" has not been declared in this scope. Line "+e2left);
                                                                                }else{
                                                                                    String auxtype2 = e2.bringType();
                                                                                    if(auxtype2 != "Integer"){
                                                                                        if(auxtype2 == "none"){
                                                                                            auxtype2 = tableIds.searchNodeType(e2.getId(),ambito_actual);
                                                                                            if(auxtype2 != "Integer"){
                                                                                                System.err.println("Error with variable "+e2.getId()+", not an Integer. Is "+auxtype2+". Line "+e2left);
                                                                                            }
                                                                                        }else{
                                                                                           System.err.println("Error at *expression1* + *expression2*, second operand is not an Integer. Is "+auxtype2+". Line "+e2left); 
                                                                                        }
                                                                                    }
                                                                                }
                                                                                RESULT.setLugar(nuevoTemporal());
                                                                                cuadruplo.addNode("+",e1.getLugar(),e2.getLugar(),RESULT.getLugar());
                                                                            
                                                                        } :}
                       |expression:e1 TK_MINUS expression:e2            {:if(!foundError){RESULT = new NumericExpression(e1,e2,"-",null);
                                                                            
                                                                                if(e1.getId()!=null && !tableIds.searchScope(e1.getId(),ambito_actual)){
                                                                                    System.err.println("Variable "+e1.getId()+" has not been declared in this scope. Line "+e1left);
                                                                                }else{
                                                                                    String auxtype = e1.bringType();
                                                                                    if(auxtype != "Integer"){
                                                                                        if(auxtype == "none"){
                                                                                            auxtype = tableIds.searchNodeType(e1.getId(),ambito_actual);
                                                                                                if(auxtype != "Integer"){
                                                                                                    System.err.println("Error with variable "+e1.getId()+", not an Integer. Is "+auxtype+". Line "+e1left);
                                                                                                }
                                                                                        }else{
                                                                                            System.err.println("Error at *expression1* - *expression2*, first operand is not an Integer. Is "+auxtype+". Line "+e1left);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            
                                                                            
                                                                                if(e2.getId()!=null && !tableIds.searchScope(e2.getId(),ambito_actual)){
                                                                                    System.err.println("Variable "+e2.getId()+" has not been declared in this scope. Line "+e2left);
                                                                                }else{
                                                                                    String auxtype2 = e2.bringType();
                                                                                    if(auxtype2 != "Integer"){
                                                                                        if(auxtype2 == "none"){
                                                                                            auxtype2 = tableIds.searchNodeType(e2.getId(),ambito_actual);
                                                                                            if(auxtype2 != "Integer"){
                                                                                                System.err.println("Error with variable "+e2.getId()+", not an Integer. Is "+auxtype2+". Line "+e2left);
                                                                                            }
                                                                                        }else{
                                                                                           System.err.println("Error at *expression1* - *expression2*, second operand is not an Integer. Is "+auxtype2+". Line "+e2left); 
                                                                                        }
                                                                                    }
                                                                                }
                                                                                RESULT.setLugar(nuevoTemporal());
                                                                                cuadruplo.addNode("-",e1.getLugar(),e2.getLugar(),RESULT.getLugar());
                                                                        } :}
                       |expression:e1 TK_PRODUCT expression:e2          {:if(!foundError){RESULT = new NumericExpression(e1,e2,"*",null);
                                                                            
                                                                                if(e1.getId()!=null && !tableIds.searchScope(e1.getId(),ambito_actual)){
                                                                                    System.err.println("Variable "+e1.getId()+" has not been declared in this scope. Line "+e1left);
                                                                                }else{
                                                                                    String auxtype = e1.bringType();
                                                                                    if(auxtype != "Integer"){
                                                                                        if(auxtype == "none"){
                                                                                            auxtype = tableIds.searchNodeType(e1.getId(),ambito_actual);
                                                                                                if(auxtype != "Integer"){
                                                                                                    System.err.println("Error with variable "+e1.getId()+", not an Integer. Is "+auxtype+". Line "+e1left);
                                                                                                }
                                                                                        }else{
                                                                                            System.err.println("Error at *expression1* * *expression2*, first operand is not an Integer. Is "+auxtype+". Line "+e1left);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            
                                                                            
                                                                                if(e2.getId()!=null && !tableIds.searchScope(e2.getId(),ambito_actual)){
                                                                                    System.err.println("Variable "+e2.getId()+" has not been declared in this scope. Line "+e2left);
                                                                                }else{
                                                                                    String auxtype2 = e2.bringType();
                                                                                    if(auxtype2 != "Integer"){
                                                                                        if(auxtype2 == "none"){
                                                                                            auxtype2 = tableIds.searchNodeType(e2.getId(),ambito_actual);
                                                                                            if(auxtype2 != "Integer"){
                                                                                                System.err.println("Error with variable "+e2.getId()+", not an Integer. Is "+auxtype2+". Line "+e2left);
                                                                                            }
                                                                                        }else{
                                                                                            System.err.println("Error at *expression1* * *expression2*, second operand is not an Integer. Is "+auxtype2+". Line "+e2left);
                                                                                        }
                                                                                    }
                                                                                }
                                                                                RESULT.setLugar(nuevoTemporal());
                                                                                cuadruplo.addNode("*",e1.getLugar(),e2.getLugar(),RESULT.getLugar());
                                                                            
                                                                        } :}
                       |expression:e1 TK_DIVISION expression:e2         {:if(!foundError){RESULT = new NumericExpression(e1,e2,"/",null);
                                                                            
                                                                                if(e1.getId()!=null && !tableIds.searchScope(e1.getId(),ambito_actual)){
                                                                                    System.err.println("Variable "+e1.getId()+" has not been declared in this scope. Line "+e1left);
                                                                                }else{
                                                                                    String auxtype = e1.bringType();
                                                                                    if(auxtype != "Integer"){
                                                                                        if(auxtype == "none"){
                                                                                            auxtype = tableIds.searchNodeType(e1.getId(),ambito_actual);
                                                                                                if(auxtype != "Integer"){
                                                                                                    System.err.println("Error with variable "+e1.getId()+", not an Integer. Is "+auxtype+". Line "+e1left);
                                                                                                }
                                                                                        }else{
                                                                                            System.err.println("Error at *expression1* / *expression2*, first operand is not an Integer. Is "+auxtype+". Line "+e1left);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            
                                                                            
                                                                                if(e2.getId()!=null && !tableIds.searchScope(e2.getId(),ambito_actual)){
                                                                                    System.err.println("Variable "+e2.getId()+" has not been declared in this scope. Line "+e2left);
                                                                                }else{
                                                                                    String auxtype2 = e2.bringType();
                                                                                    if(auxtype2 != "Integer"){
                                                                                        if(auxtype2 == "none"){
                                                                                            auxtype2 = tableIds.searchNodeType(e2.getId(),ambito_actual);
                                                                                            if(auxtype2 != "Integer"){
                                                                                                System.err.println("Error with variable "+e2.getId()+", not an Integer. Is "+auxtype2+". Line "+e2left);
                                                                                            }
                                                                                        }else{
                                                                                            System.err.println("Error at *expression1* / *expression2*, second operand is not an Integer. Is "+auxtype2+". Line "+e2left);
                                                                                        }
                                                                                    }
                                                                                }
                                                                                RESULT.setLugar(nuevoTemporal());
                                                                                cuadruplo.addNode("/",e1.getLugar(),e2.getLugar(),RESULT.getLugar());
                                                                            
                                                                        } :}
                       |expression:e1 TK_AMPERSAND expression:e2        {:if(!foundError){RESULT = new NumericExpression(e1,e2,"&",null);
                                                                            
                                                                                if(e1.getId()!=null && !tableIds.searchScope(e1.getId(),ambito_actual)){
                                                                                    System.err.println("Variable "+e1.getId()+" has not been declared in this scope. Line "+e1left);
                                                                                }else{
                                                                                    String auxtype = e1.bringType();
                                                                                    if(auxtype != "String"){
                                                                                        if(auxtype == "none"){
                                                                                            auxtype = tableIds.searchNodeType(e1.getId(),ambito_actual);
                                                                                                if(auxtype != "String"){
                                                                                                    System.err.println("Error with variable "+e1.getId()+", not a String. Is "+auxtype+". Line "+e1left);
                                                                                                }
                                                                                        }else{
                                                                                            System.err.println("Error at *expression1* & *expression2*, first operand is not a String. Is "+auxtype+". Line "+e1left);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            
                                                                            
                                                                                if(e2.getId()!=null && !tableIds.searchScope(e2.getId(),ambito_actual)){
                                                                                    System.err.println("Variable "+e2.getId()+" has not been declared in this scope. Line "+e2left);
                                                                                }else{
                                                                                    String auxtype2 = e2.bringType();
                                                                                    if(auxtype2 != "String"){
                                                                                        if(auxtype2 == "none"){
                                                                                            auxtype2 = tableIds.searchNodeType(e2.getId(),ambito_actual);
                                                                                            if(auxtype2 != "String"){
                                                                                                System.err.println("Error with variable "+e2.getId()+", is not a String Is "+auxtype2+". Line "+e2left);
                                                                                            }
                                                                                        }else{
                                                                                            System.err.println("Error at *expression1* / *expression2*, second operand is not a String. Is "+auxtype2+". Line "+e2left);
                                                                                        }
                                                                                    }
                                                                                }
                                                                                RESULT.setLugar(nuevoTemporal());
                                                                                cuadruplo.addNode("&",e1.getLugar(),e2.getLugar(),RESULT.getLugar());
                                                                            
                                                                        } :}
                       |expression:e1 TK_SUM error:er expression:e2              {: System.err.println("Error in numeric expression."+" Line "+erleft);foundError=true;:}
                       |expression:e1 TK_MINUS error:er expression:e2            {: System.err.println("Error in numeric expression."+" Line "+erleft);foundError=true;:}
                       |expression:e1 TK_PRODUCT error:er expression:e2          {: System.err.println("Error in numeric expression."+" Line "+erleft);foundError=true;:}
                       |expression:e1 TK_DIVISION error:er expression:e2         {: System.err.println("Error in numeric expression."+" Line "+erleft);foundError=true;:}
                       |expression:e1 TK_AMPERSAND error:er expression:e2        {: System.err.println("Error in numeric expression."+" Line "+erleft);foundError=true;:}
;   

literal_expression ::= 	TK_NUMBER:num                                       {:if(!foundError){RESULT = new LiteralExpression(null,num,null);} 
                                                                                RESULT.setLugar(num.toString());
                                                                            :}
			|TK_STRINGVAL:strVal                                {:if(!foundError){RESULT = new LiteralExpression(strVal,null,null);} 
                                                                                RESULT.setLugar("\""+strVal+"\"");
                                                                            :}
;

function_call ::=   TK_ID:i TK_PARIN arguments:args TK_PAROUT             {:if(!foundError){
                                                                                RESULT = new FunctionCall(listaarguments,i,tableIds.searchNodeType(i,ambito_actual));
                                                                                String parameterType = tableIds.searchFunctionType(i);
                                                                                if(parameterType=="none"){
                                                                                    System.err.println("Function or Sub "+i+" not found. Line "+ileft);
                                                                                }else{
                                                                                    String[] split1 = parameterType.split("->");
                                                                                    
                                                                                    if(split1[1].equals("void") && listaarguments.size() > 0){
                                                                                        System.err.println("Error with function or sub "+i+". Expects no arguments. Line "+ileft);
                                                                                    }else if(!split1.equals("void")){
                                                                                        String[] split2 = split1[1].split("x");
                                                                                    
                                                                                        if(split2.length != listaarguments.size()){
                                                                                            System.err.println("Error with function or sub "+i+" wrong number of arguments. Line "+ileft);
                                                                                        }else{
                                                                                            for(int k = 0; k < listaarguments.size(); k++){
                                                                                                if(!tableIds.searchNodeType(listaarguments.get(k).getExpression().getId(),ambito_actual).equals(split2[k]) && listaarguments.get(k).getExpression().getId() != null) {
                                                                                                    System.err.println("Error with function or sub "+i+" on call. Wrong parameter "+listaarguments.get(k).getExpression().getId()+". Expected: "+split2[k]+" found "+tableIds.searchNodeType(listaarguments.get(k).getExpression().getId(),ambito_actual)+". Line "+ileft);
                                                                                                }
                                                                                            } 
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    
                                                                                }
                                                                                //RESULT.setReturns(tableIds.searchNodeType(i,ambito_actual));
                                                                                cuadruplo.addNode("CALL",i,listaarguments.size()+"","");
                                                                                RESULT.setLugar("RET");
                                                                                listaarguments = new ArrayList();
                                                                           }:}

                    |TK_ID:i TK_PARIN TK_PAROUT                           {:if(!foundError){
                                                                                RESULT = new FunctionCall(null,i,tableIds.searchNodeType(i,ambito_actual));
                                                                            }:}

;

arguments ::=   argument:arg TK_COMMA arguments:args                    {:if(!foundError){listaarguments.add(arg);} 
                                                                            cuadruplo.addNode("PARAM",arg.getExpression().getLugar());
                                                                        :}
                |argument:arg                                           {:if(!foundError){listaarguments.add(arg);} 
                                                                            cuadruplo.addNode("PARAM",arg.getExpression().getLugar());
                                                                        :}
;

argument ::= expression:expr                                            {:if(!foundError){RESULT = new Argument(expr);} :}
;
N ::= /*Vacio*/ {:RESULT = new Statements();
                  RESULT.getListasig().add(cuadruplo.getSize());
                  cuadruplo.addNode("GOTO","");
:}                                                     
;