package visualbasiccompilador;

import java.util.*;
import java.io.*;
import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import AST.*;

parser code {:
        public Program FINALOBJECT = new Program();
        public ArrayList<Statements> listastatements = new ArrayList();
	public void syntax_error(Symbol s){
            if(s.sym==0){

            }else{
                System.err.print("Syntax error, Line "+(s.left)+ " Column "+(s.right)+ " Symbol #"+s.sym+". ");
                List<Integer> expected = expected_token_ids();
                String expectedSymbol = "";
                /*System.out.println("Tama√±o:"+expected.size());
                for(int i=0;i<expected.size();i++)
                    System.out.println(expected.get(i));*/
                if(expected.size()==1){
                    if(expected.get(0) == sym.TK_EQUALS){
                        expectedSymbol = "=";
                    }else if(expected.get(0) == sym.TK_MINUS){
                        expectedSymbol = "-";
                    }else if(expected.get(0) == sym.TK_GREATERTHAN){
                        expectedSymbol = ">";
                    }else if(expected.get(0) == sym.TK_PRODUCT){
                        expectedSymbol = "*";
                    }else if(expected.get(0) == sym.TK_LESSEQUAL){
                        expectedSymbol = "<=";
                    }else if(expected.get(0) == sym.TK_FOR){
                        expectedSymbol = "For";
                    }else if(expected.get(0) == sym.TK_LESSTHAN){
                        expectedSymbol = "<";
                    }else if(expected.get(0) == sym.TK_NOT){
                        expectedSymbol = "NOT";
                    }else if(expected.get(0) == sym.TK_AND){
                        expectedSymbol = "AND";
                    }else if(expected.get(0) == sym.TK_COMMA){
                        expectedSymbol = ",";
                    }else if(expected.get(0) == sym.TK_OR){
                        expectedSymbol = "or";
                    }else if(expected.get(0) == sym.TK_UNTIL){
                        expectedSymbol = "Until";
                    }else if(expected.get(0) == sym.TK_ELSEIF){
                        expectedSymbol = "ElseIf";
                    }else if(expected.get(0) == sym.TK_IF){
                        expectedSymbol = "If";
                    }else if(expected.get(0) == sym.TK_ID){
                        expectedSymbol = "<ID>";
                    }else if(expected.get(0) == sym.TK_PAROUT){
                        expectedSymbol = "(";
                    }else if(expected.get(0) == sym.TK_BYVAL){
                        expectedSymbol = "ByVal";
                    }else if(expected.get(0) == sym.TK_BOOLEAN){
                        expectedSymbol = "Boolean";
                    }else if(expected.get(0) == sym.TK_DIM){
                        expectedSymbol = "Dim";
                    }else if(expected.get(0) == sym.TK_GREATEREQUAL){
                        expectedSymbol = ">=";
                    }else if(expected.get(0) == sym.TK_EXIT){
                        expectedSymbol = "Exit";
                    }else if(expected.get(0) == sym.TK_LOOP){
                        expectedSymbol = "Loop";
                    }else if(expected.get(0) == sym.TK_NEXT){
                        expectedSymbol = "Next";
                    }else if(expected.get(0) == sym.TK_STRINGVAL){
                        expectedSymbol = "of type string.";
                    }else if(expected.get(0) == sym.TK_RETURN){
                        expectedSymbol = "Return";
                    }else if(expected.get(0) == sym.TK_TRUE){
                        expectedSymbol = "True";
                    }else if(expected.get(0) == sym.TK_PARIN){
                        expectedSymbol = "(";
                    }else if(expected.get(0) == sym.TK_NUMBER){
                        expectedSymbol = "of number type";
                    }else if(expected.get(0) == sym.TK_BYREF){
                        expectedSymbol = "ByRef";
                    }else if(expected.get(0) == sym.TK_STRUCTURE){
                        expectedSymbol = "Structure";
                    }else if(expected.get(0) == sym.TK_TO){
                        expectedSymbol = "To";
                    }else if(expected.get(0) == sym.TK_WHILE){
                        expectedSymbol = "While";
                    }else if(expected.get(0) == sym.TK_DIVISION){
                        expectedSymbol = "%";
                    }else if(expected.get(0) == sym.TK_END){
                        expectedSymbol = "End";
                    }else if(expected.get(0) == sym.TK_SUM){
                        expectedSymbol = "+";
                    }else if(expected.get(0) == sym.TK_FALSE){
                        expectedSymbol = "False";
                    }else if(expected.get(0) == sym.TK_AS){
                        expectedSymbol = "As";
                    }else if(expected.get(0) == sym.TK_THEN){
                        expectedSymbol = "Then";
                    }else if(expected.get(0) == sym.TK_STRING){
                        expectedSymbol = "String";
                    }else if(expected.get(0) == sym.TK_FUNCTION){
                        expectedSymbol = "Function";
                    }else if(expected.get(0) == sym.TK_DO){
                        expectedSymbol = "Do";
                    }else if(expected.get(0) == sym.TK_SUB){
                        expectedSymbol = "Sub";
                    }else if(expected.get(0) == sym.TK_INTEGER){
                        expectedSymbol = "Integer";
                    }else if(expected.get(0) == sym.TK_XOR){
                        expectedSymbol = "Xor";
                    }else if(expected.get(0) == sym.TK_AMPERSAND){
                        expectedSymbol = "&";
                    }
                    System.err.println("Expected symbol "+expectedSymbol );
                }else{
                    if(s.sym == sym.TK_ID){
                        System.err.println("Expected definition of type for ID.");
                    }
                    if(s.sym == sym.TK_PARIN || s.sym == sym.TK_PAROUT){
                        System.err.println("Expected an expression or call.");
                    }
                    if(s.sym == sym.TK_SUM || s.sym == sym.TK_MINUS || s.sym == sym.TK_DIVISION || s.sym == sym.TK_PRODUCT  ||s.sym == sym.TK_AMPERSAND){
                        System.err.println("Unplaced, lacking or unexpected expression.");
                    }
                    if(s.sym == sym.TK_GREATERTHAN || s.sym == sym.TK_GREATEREQUAL || s.sym == sym.TK_LESSTHAN || s.sym == sym.TK_LESSEQUAL ||s.sym == sym.TK_NOTEQUAL ){
                        System.err.println("Unexpected evaluation.");
                    }
                    if(s.sym == sym.TK_EQUALS){
                        System.err.println("Unexpected evaluation or assignation");
                    }

                }


                
            }
            
            
            
	}

        public void unrecovered_syntax_error(Symbol cur_token) {
            if(cur_token.sym==0){

            }else{
                System.err.println("Error with code's syntax in line: " + (cur_token.left + 1) + ", col: " + (cur_token.right + 1));
            }
            
            
        }

        public void report_fatal_error(String message, Object info) {
            
        }

        public void report_error(String message, Object info) {
            
        }

:};

												/* Terminales */

/* Tipos de Datos */
terminal TK_INTEGER, TK_BOOLEAN, TK_STRING;

/* Por Valor o Por Referencia */
terminal TK_BYVAL, TK_BYREF;

/* Estructuras de Control */
terminal TK_IF, TK_THEN, TK_ELSEIF, TK_ELSE, TK_FOR, TK_TO, TK_LOOP, TK_DO, TK_WHILE, TK_UNTIL, TK_NEXT;

/* Expresiones Booleanas */
terminal TK_TRUE, TK_FALSE;

/* Funciones */
terminal TK_FUNCTION, TK_SUB, TK_STRUCTURE;

/* Operadores Aritmeticos */
terminal TK_SUM, TK_MINUS, TK_PRODUCT, TK_DIVISION, TK_AMPERSAND; 

/* Operadores logicos */
terminal TK_AND, TK_OR, TK_NOT, TK_XOR;

/*Operadores Relacionales */
terminal TK_GREATERTHAN, TK_LESSTHAN, TK_GREATEREQUAL, TK_LESSEQUAL, TK_EQUALS, TK_NOTEQUAL;

/* Parentesis */
terminal TK_PARIN, TK_PAROUT;

/* Simbolos */
terminal TK_COMMA;

/* Otras palabras reservadas */
terminal TK_DIM, TK_AS, TK_END, TK_EXIT, TK_RETURN, TK_WRITE, TK_READ;

/* Valores */
terminal String TK_STRINGVAL;
terminal String TK_ID;
terminal Integer TK_NUMBER;

													/* NO TERMINALES */

non terminal initial;
non terminal Program program;
non terminal Statements statements;
non terminal FunctionDeclarations function_declarations;
non terminal FunctionDeclaration function_declaration;
non terminal FunctionDeclaration structure_statement;
non terminal FunctionDeclaration sub_statement;
non terminal FunctionDeclaration function_statement;
non terminal parameters;
non terminal Parameter parameter;
non terminal parameter_type;
non terminal data_type;
non terminal Statements statement;
non terminal Statements write_statement;
non terminal Statements read_statement;
non terminal Statements if_statement;
non terminal Statements elseif_statements;
non terminal Statements elseif_statement;
non terminal Statements for_statement;
non terminal Statements while_statement; 
non terminal Statements do_statement;
non terminal Statements variable_declaration;
non terminal VariableDeclarator variable_declarator;
non terminal Expression expression;
non terminal Expression numeric_expression;
non terminal Expression boolean_expression;
non terminal Expression literal_expression;
non terminal Expression logical_expression;
non terminal Expression function_call;
non terminal Argument arguments;
non terminal Argument argument;

/* Precedencia */
precedence left TK_EQUALS;
precedence left TK_OR;
precedence right TK_XOR;
precedence left TK_AND;
precedence left TK_LESSTHAN, TK_LESSEQUAL,TK_GREATERTHAN, TK_GREATEREQUAL, TK_EQUALS, TK_NOTEQUAL;
precedence left TK_SUM, TK_MINUS, TK_AMPERSAND;
precedence left TK_PRODUCT, TK_DIVISION;
precedence right TK_NOT;
precedence nonassoc TK_ELSE;

initial ::= program {: System.out.println("Programa en Visual Basic"); :}
;

program ::= function_declarations:functionDeclarations {:System.out.println("Program"); :}                   
            | /* Vacio */
;


function_declarations ::= function_declaration:functionDeclaration function_declarations:functionDeclarations       {: System.out.println("Func decls");FINALOBJECT.getDeclarations().add(functionDeclaration);:}
;

function_declaration ::= structure_statement:structureStatement                             {:  :}
			 |sub_statement:subStatement                                        {:RESULT = new SubStatement(((SubStatement)subStatement).getSub(),((SubStatement)subStatement).getId(),((SubStatement)subStatement).getParameters(),((SubStatement)subStatement).getStatements(),((SubStatement)subStatement).getEndSub());FINALOBJECT.getDeclarations().add(RESULT);:}
			 |function_statement:functionStatement                              {:  :}
;

structure_statement ::= TK_STRUCTURE TK_ID statements:stmnts TK_END TK_STRUCTURE            {: :}
;

sub_statement ::=   TK_SUB TK_ID TK_PARIN parameters:prmts TK_PAROUT statements:stmnts TK_END TK_SUB            {: :}
                    |TK_SUB TK_ID:i TK_PARIN TK_PAROUT statements:stmnts TK_END TK_SUB                          {:RESULT = new SubStatement("Sub",i,null,listastatements,"End Sub");listastatements = new ArrayList(); :}
                    |TK_SUB TK_ID TK_PARIN TK_PAROUT error statements:stmnts TK_END TK_SUB                      {:System.err.println("Error inside Sub statement");:}
                    |TK_SUB TK_ID TK_PARIN TK_PAROUT error statements:stmnts error TK_END TK_SUB                {:System.err.println("Several errors inside Sub statement");:}
                    |TK_SUB error TK_PARIN TK_PAROUT statements:stmnts TK_END TK_SUB                            {:System.err.println("Erroneous Sub declaration.");:}
;


function_statement ::= 	TK_FUNCTION TK_ID TK_PARIN parameters:prmts TK_PAROUT statements:stmnts TK_END TK_FUNCTION                          {: :}
			|TK_FUNCTION TK_ID TK_PARIN parameters:prmts TK_PAROUT TK_AS data_type:type statements:stmnts TK_END TK_FUNCTION    {: :}
                        |TK_FUNCTION TK_ID TK_PARIN TK_PAROUT TK_AS data_type:type statements:stmnts TK_END TK_FUNCTION                     {: :}
                        |TK_FUNCTION TK_ID TK_PARIN TK_PAROUT statements:stmnts TK_END TK_FUNCTION                                          {: :}
;

parameters ::= 	parameter:prmt TK_COMMA parameters:prmts        {: :}
		|parameter:prmt                                 {: :}
;

parameter ::=	parameter_type:prmt_type TK_ID TK_AS data_type:type {: :}
;

parameter_type ::=  TK_BYVAL                    {: :}
                    |TK_BYREF                   {: :}
;

data_type ::=	TK_INTEGER          {: :}
		|TK_BOOLEAN         {: :}
		|TK_STRING          {: :}
;

statements ::=	statement:stmnt statements:stmnts       {:listastatements.add(stmnt);:}  
		| /* Vacio */                      
;

statement ::=	if_statement:ifStatement                {:  :}
                |while_statement:whileStatement         {:  :}
		|for_statement:forStatement             {: :}
		|do_statement:doStatement               {: :}
                |write_statement:writeStatement         {: :}
                |read_statement:readStatement           {: :}
                |variable_declaration:var_declare       {: :}
		|expression:expr                        {:RESULT = expr;:}
		|TK_RETURN expression                   {: :}
		|TK_EXIT                                {: :}
;
write_statement ::= TK_WRITE TK_PARIN literal_expression TK_PAROUT              {: :}
                    |TK_WRITE TK_PARIN TK_ID TK_PAROUT                          {: :}
                    |TK_WRITE TK_PARIN error TK_PAROUT                          {:System.err.println("\t\t\t\t\t  Problem near Console.Write()"); :}
;
read_statement  ::= TK_READ TK_PARIN TK_ID TK_PAROUT              {: :}
                    |TK_READ TK_PARIN error TK_PAROUT              {:System.err.println("\t\t\t\t\t  Problem near Console.Read()."); :}
;
if_statement ::=    TK_IF expression:expr TK_THEN statements:stmnts TK_END TK_IF                                                                {: :}
                    |TK_IF expression:expr TK_THEN statements:stmnts TK_ELSE statements:stmnts1 TK_END TK_IF                                    {: :}
                    |TK_IF expression:expr TK_THEN statements:stmnts elseif_statements:elseifStmnts TK_END TK_IF                                {: :}
                    |TK_IF expression:expr TK_THEN statements:stmnts elseif_statements:elseifStmnts TK_ELSE statements:stmnts1 TK_END TK_IF     {: :}
                    |TK_IF expression:expr TK_THEN statements:stmnts error                                                                      {:System.err.print("Error in If."); :}
; 

elseif_statements ::=	elseif_statement:elseifStmnt elseif_statements:elseifStmnts                     {: :}
			|elseif_statement:elseifStmnt                                                   {: :}
;

elseif_statement ::=	TK_ELSEIF expression:expr TK_THEN           {: :}
;


for_statement ::=	TK_FOR variable_declaration:var_declare TK_TO expression:expr statements:stmnts TK_NEXT                         {: :}
                        |TK_FOR error TK_TO expression:expr statements:stmnts TK_NEXT                                                   {:System.err.println("Error in variable declaration by For."); :}
                        |TK_FOR variable_declaration:var_declare TK_TO expression:expr error statements:stmnts TK_NEXT                  {:System.err.println("Check syntax inside For.");:}
;

while_statement ::=     TK_WHILE expression:expr statements:stmnts TK_END TK_WHILE                  {: :}
                        |TK_WHILE error TK_END TK_WHILE                                             {:System.err.println("Error inside While block");:}
                        |TK_WHILE expression:expr statements:stmnts TK_END error                    {: :}
;

do_statement ::=    TK_DO TK_WHILE expression:expr statements:stmnts TK_LOOP                    {: :}
                    |TK_DO statements:stmnts TK_LOOP TK_UNTIL expression:expr                   {: :}
                    |TK_DO error TK_LOOP TK_UNTIL expression:expr                               {:System.err.println("Error inside Do Loop");:} 
                    |TK_DO TK_WHILE error TK_LOOP                                               {:System.err.println("Error in Do While");:}
                    |TK_DO TK_WHILE expression:expr error                                       {:System.err.println("Error after Do While statement ");:}
;

variable_declaration ::=    variable_declarator:var TK_COMMA variable_declaration:var_declare   {: :}
                            |variable_declarator:var                                                {: :}
;


variable_declarator  ::=    TK_DIM TK_ID TK_AS data_type:type TK_EQUALS expression:expr         {: :}
                            |TK_ID TK_AS data_type:type TK_EQUALS expression:expr               {: :}
                            |TK_DIM TK_ID TK_EQUALS expression:expr                             {: :}
                            |TK_ID TK_EQUALS expression:expr                                    {: :}
;   



expression ::=	numeric_expression:num_exp      {:RESULT = new NumericExpression(((NumericExpression)num_exp).getExpression1(),((NumericExpression)num_exp).getExpression2(),((NumericExpression)num_exp).getOperador(),null); :}
		|boolean_expression:bool_exp    {:RESULT = new BooleanExpression(((BooleanExpression)bool_exp).getExpression1(), ((BooleanExpression)bool_exp).getOperador(), ((BooleanExpression)bool_exp).getExpression2(),null); :}
		|logical_expression:logic_exp   {:RESULT = new LogicalExpression(((LogicalExpression)logic_exp).isValue(),((LogicalExpression)logic_exp).getOperador(),((LogicalExpression)logic_exp).getExpression1(),((LogicalExpression)logic_exp).getExpression2(),null); :}
		|literal_expression:lit_exp     {:RESULT = new LiteralExpression(((LiteralExpression)lit_exp).getStringval(),((LiteralExpression)lit_exp).getNumber(),null); :}
		|TK_ID:id                       {:RESULT = new Expression(id); :}
		|function_call:call             {://RESULT = new NumericExpression(); :}
;

boolean_expression ::= expression:e1 TK_GREATERTHAN expression:e2       {: RESULT = new BooleanExpression(e1,">",e2,null); :}
                       |expression:e1 TK_LESSTHAN expression:e2         {: RESULT = new BooleanExpression(e1,"<",e2,null); :}
                       |expression:e1 TK_GREATEREQUAL expression:e2     {: RESULT = new BooleanExpression(e1,">=",e2,null); :}
                       |expression:e1 TK_LESSEQUAL expression:e2        {: RESULT = new BooleanExpression(e1,"<=",e2,null); :}
                       |expression:e1 TK_EQUALS expression:e2           {: RESULT = new BooleanExpression(e1,"=",e2,null); :}
                       |expression:e1 TK_NOTEQUAL expression:e2         {: RESULT = new BooleanExpression(e1,"<>",e2,null); :}
;

logical_expression ::= TK_NOT expression:e1                             {:RESULT = new LogicalExpression("Not",e1,null);:}
                       |expression:e1 TK_OR expression:e2               {:RESULT = new LogicalExpression("Or",e1,e2,null);:}
                       |expression:e1 TK_AND expression:e2              {:RESULT = new LogicalExpression("And",e1,e2,null); :}
                       |expression:e1 TK_XOR expression:e2              {:RESULT = new LogicalExpression("Xor",e1,e2,null); :}
                       |TK_TRUE                                         {:RESULT = new LogicalExpression(true,null); :}
                       |TK_FALSE                                        {:RESULT = new LogicalExpression(false,null); :}
;
numeric_expression ::= expression:e1 TK_SUM expression:e2               {:RESULT = new NumericExpression(e1,e2,"+",null); :}
                       |expression:e1 TK_MINUS expression:e2            {:RESULT = new NumericExpression(e1,e2,"-",null); :}
                       |expression:e1 TK_PRODUCT expression:e2          {:RESULT = new NumericExpression(e1,e2,"*",null); :}
                       |expression:e1 TK_DIVISION expression:e2         {:RESULT = new NumericExpression(e1,e2,"/",null); :}
                       |expression:e1 TK_AMPERSAND expression:e2        {:RESULT = new NumericExpression(e1,e2,"&",null); :}
;   

literal_expression ::= 	TK_NUMBER:num                                       {: RESULT = new LiteralExpression(null,num,null); :}
			|TK_STRINGVAL:strVal                                {: RESULT = new LiteralExpression(strVal,null,null); :}
;

function_call ::=   TK_ID TK_PARIN arguments:args TK_PAROUT
                    |TK_ID TK_PARIN TK_PAROUT
                    |TK_ID TK_PARIN error                               {:System.err.println("Function call expects ')'");:}
;

arguments ::=   argument:arg TK_COMMA arguments:args
                |argument:arg
;

argument ::= expression:expr                                            {:RESULT = new Argument(expr); :}
;